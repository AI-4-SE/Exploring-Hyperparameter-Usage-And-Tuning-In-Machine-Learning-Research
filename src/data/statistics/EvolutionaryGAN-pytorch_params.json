{
    "TTUR/fid.py": {
        "tensorflow": {
            "GraphDef_38": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_40": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_37": {
                "name": {
                    "value": "pth",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_63": {
                "variable": {
                    "value": "o._shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TTUR/fid_example.py": {
        "tensorflow": {
            "Session_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TTUR/gan_64x64_FID.py": {
        "tensorflow": {
            "get_checkpoint_state_107": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_180": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depth_to_space_181": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output, output, output, output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_199": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depth_to_space_200": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_235": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_237": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_239": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_273": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_277": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_293": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * dim, fact, fact]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_300": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_302": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_316": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * dim, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_350": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_363": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_364": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_367": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_370": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_373": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_376": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_385": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * dim, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_403": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_413": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * dim * 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_434": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_441": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, DIM, DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_449": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 8 * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_455": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, DIM, DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_475": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 8 * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_482": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, DIM, DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_500": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 8 * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_515": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, DIM, DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_539": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 8 * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_552": {
                "variable": {
                    "value": "all_real_data_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[BATCH_SIZE, 3, DIM, DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_649": {
                "variable": {
                    "value": "fixed_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.normal(size=(BATCH_SIZE, 128)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_665": {
                "variable": {
                    "value": "fid_tfvar",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_666": {
                "variable": {
                    "value": "fid_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "FID",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "fid_tfvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_667": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "TBOARD_DIR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(LOG_DIR, 'logs')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_686": {
                "variable": {
                    "value": "ckpt_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_155": {
                "x": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_159": {
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_304": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_356": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_378": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_405": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_436": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_452": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_478": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_503": {
                "tensor": {
                    "value": "output / 5.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_512": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_546": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear(name + '.Linear', n_in, n_out, inputs, initialization='he')",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, inputs, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.add_n([output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]) / 4.0",
                            "BinOp"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.concat([output, output, output, output], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(output, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D(name, input_dim, output_dim, filter_size, output, he_init=he_init, biases=biases)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=1, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1b(name + '.Conv1B', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=1, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Normalize(name + '.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_1(name + '.Conv1', filter_size=filter_size, inputs=output, he_init=he_init, biases=False)",
                            "Call"
                        ],
                        [
                            "Normalize(name + '.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "conv_2(name + '.Conv2', filter_size=filter_size, inputs=output, he_init=he_init)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, fact * fact * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, fact, fact])",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res1', 8 * dim, 8 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res2', 8 * dim, 4 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res3', 4 * dim, 2 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Generator.Res4', 2 * dim, 1 * dim, 3, output, resample='up', bn=bn)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.OutputN', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Output', 1 * dim, 3, 3, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.1', 128, FC_DIM, noise)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.2', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.3', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "ReLULayer('Generator.4', FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Out', FC_DIM, OUTPUT_DIM, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', dim, dim, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim, 4, 4])",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.4x4_{}'.format(i), 8 * dim, 8 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up1', 8 * dim, 4 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.8x8_{}'.format(i), 4 * dim, 4 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up2', 4 * dim, 2 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.16x16_{}'.format(i), 2 * dim, 2 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up3', 2 * dim, 1 * dim, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.32x32_{}'.format(i), 1 * dim, 1 * dim, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.Up4', 1 * dim, dim // 2, 3, output, resample='up')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Generator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Generator.Out', dim // 2, 3, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output / 5.0)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Generator.Input', 128, 4 * 4 * 8 * dim * 2, noise)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 8 * dim * 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN1', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.2', 8 * dim, 4 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.3', 4 * dim, 2 * dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.4', 2 * dim, dim * 2, 5, output)",
                            "Call"
                        ],
                        [
                            "Normalize('Generator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.deconv2d.Deconv2D('Generator.5', dim, 3, 5, output)",
                            "Call"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.Input', 3, dim, 3, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res1', dim, 2 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res2', 2 * dim, 4 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res3', 4 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down', bn=bn)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim * 2, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "pixcnn_gated_nonlinearity(output[:, ::2], output[:, 1::2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.In', 3, dim // 2, 1, output, he_init=False)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.64x64_{}'.format(i), dim // 2, dim // 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down1', dim // 2, dim * 1, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.32x32_{}'.format(i), dim * 1, dim * 1, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down2', dim * 1, dim * 2, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.16x16_{}'.format(i), dim * 2, dim * 2, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down3', dim * 2, dim * 4, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.8x8_{}'.format(i), dim * 4, dim * 4, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.Down4', dim * 4, dim * 8, 3, output, resample='down')",
                            "Call"
                        ],
                        [
                            "BottleneckResidualBlock('Discriminator.4x4_{}'.format(i), dim * 8, dim * 8, 3, output, resample=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.Input', OUTPUT_DIM, FC_DIM, inputs)",
                            "Call"
                        ],
                        [
                            "LeakyReLULayer('Discriminator.{}'.format(i), FC_DIM, FC_DIM, output)",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Out', FC_DIM, 1, output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 3, DIM, DIM])",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.1', 3, dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.2', dim, 2 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN2', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.3', 2 * dim, 4 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN3', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "lib.ops.conv2d.Conv2D('Discriminator.4', 4 * dim, 8 * dim, 5, output, stride=2)",
                            "Call"
                        ],
                        [
                            "Normalize('Discriminator.BN4', [0, 2, 3], output)",
                            "Call"
                        ],
                        [
                            "nonlinearity(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 8 * dim])",
                            "Call"
                        ],
                        [
                            "lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_550": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_554": {
                "variable": {
                    "value": "split_real_data_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "all_real_data_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[BATCH_SIZE, 3, DIM, DIM])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "len(DEVICES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_556": {
                "variable": {
                    "value": "split_real_data_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "len(DEVICES)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "all_real_data_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[BATCH_SIZE, 3, DIM, DIM])",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_616": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "G_LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_618": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "D_LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                }
            },
            "group_625": {
                "variable": {
                    "value": "clip_disc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*clip_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_656": {
                "variable": {
                    "value": "all_fixed_noise_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_fixed_noise_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_fixed_noise_samples, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(0, all_fixed_noise_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_658": {
                "variable": {
                    "value": "all_fixed_noise_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "all_fixed_noise_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_fixed_noise_samples, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat(0, all_fixed_noise_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_175": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_175": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_n_187": {
                "inputs": {
                    "value": "[output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_192": {
                "inputs": {
                    "value": "[output[:, :, ::2, ::2], output[:, :, 1::2, ::2], output[:, :, ::2, 1::2], output[:, :, 1::2, 1::2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_562": {
                "variable": {
                    "value": "real_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "2 * (tf.cast(real_data_conv, tf.float32) / 255.0 - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[BATCH_SIZE // len(DEVICES), OUTPUT_DIM]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_612": {
                "inputs": {
                    "value": "gen_costs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_n_613": {
                "inputs": {
                    "value": "disc_costs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_628": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "G_LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                },
                "beta1": {
                    "value": "BETA1_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_630": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "D_LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ]
                    ]
                },
                "beta1": {
                    "value": "BETA1_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_683": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_550": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_560": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_634": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_636": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_584": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_585": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_624": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.params_with_name('Discriminator')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_value(var, clip_bounds[0], clip_bounds[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_640": {
                "variable": {
                    "value": "gen_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_642": {
                "variable": {
                    "value": "disc_train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_784": {
                "ref": {
                    "value": "fid_tfvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "FID",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fid.calculate_frechet_distance(mu_gen, sigma_gen, mu_real, sigma_real)",
                            "Call"
                        ],
                        [
                            "500",
                            "int"
                        ]
                    ]
                }
            },
            "reduce_mean_569": {
                "input_tensor": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_570": {
                "input_tensor": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_624": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lib.params_with_name('Discriminator')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_bounds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_bounds[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_573": {
                "input_tensor": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_574": {
                "input_tensor": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_583": {
                "ys": {
                    "value": "Discriminator(interpolates, bn=BN_D)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data + alpha * differences",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_584": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_590": {
                "variable": {
                    "value": "gen_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.ones_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_592": {
                "variable": {
                    "value": "disc_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.zeros_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_603": {
                "variable": {
                    "value": "gen_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(disc_fake - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_562": {
                "x": {
                    "value": "real_data_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_584": {
                "x": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(Discriminator(interpolates, bn=BN_D), interpolates)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_594": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_real, labels=tf.ones_like(disc_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_597": {
                "variable": {
                    "value": "gen_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(disc_fake, tf.ones_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_598": {
                "variable": {
                    "value": "disc_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(disc_fake, tf.zeros_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_590": {
                "logits": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_592": {
                "logits": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_594": {
                "logits": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_599": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(disc_real, tf.ones_like(disc_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_597": {
                "labels": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.ones_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_598": {
                "labels": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.zeros_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_599": {
                "labels": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "tf.ones_like(disc_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_604": {
                "input_tensor": {
                    "value": "(disc_fake - 0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_591": {
                "input": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_593": {
                "input": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_595": {
                "input": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_597": {
                "input": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_598": {
                "input": {
                    "value": "disc_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_599": {
                "input": {
                    "value": "disc_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "TTUR/precalc_stats_example.py": {
        "tensorflow": {
            "Session_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/inception.py": {
        "tensorflow": {
            "ConfigProto_23": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_78": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_80": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_99": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3, [1, 2]), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_40": {
                "config": {
                    "value": "get_tf_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_76": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_82": {
                "config": {
                    "value": "get_tf_config()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_96": {
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/base_dataset.py": {
        "torch": {}
    },
    "data/image_folder.py": {
        "torch": {}
    },
    "inception_pytorch/calculate_inception_moments.py": {
        "torch": {
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_63": {
                "input": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inception_pytorch/datasets.py": {
        "torch": {
            "from_numpy_232": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(f)",
                            "Call"
                        ],
                        [
                            "self.data[index]",
                            "Subscript"
                        ],
                        [
                            "self.loader(str(path))",
                            "Call"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ],
                        [
                            "self.data[index]",
                            "Subscript"
                        ],
                        [
                            "(torch.from_numpy(img).float() / 255 - 0.5) * 2",
                            "BinOp"
                        ],
                        [
                            "f['imgs'][index]",
                            "Subscript"
                        ],
                        [
                            "Image.fromarray(img)",
                            "Call"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inception_pytorch/inception_utils.py": {
        "torch": {
            "max_pool2d_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "(x - self.mean) / self.std",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7c(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "(x - self.mean) / self.std",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7c(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(x.size(0), x.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_116": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.view(1, -1)",
                            "Call"
                        ],
                        [
                            "m.t()",
                            "Call"
                        ],
                        [
                            "m - torch.mean(m, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "np.max(np.abs(covmean.imag))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_131": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_132": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_266": {
                "variable": {
                    "value": "inception_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "inception_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception_v3(pretrained=True, transform_input=False).cuda()",
                            "Call"
                        ],
                        [
                            "WrapInception(inception_model.eval()).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(inception_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "(x - self.mean) / self.std",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.net.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.net.Mixed_7c(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits + [F.softmax(logits_val, 1)]",
                            "BinOp"
                        ],
                        [
                            "self.net.fc(F.dropout(pool, training=False).view(pool.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_81": {
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool + [pool_val]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(x.view(x.size(0), x.size(1), -1), 2)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_137": {
                "input": {
                    "value": "normA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.mul(A).sum(dim=1).sum(dim=1).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_228": {
                "input": {
                    "value": "sigma1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.atleast_2d(sigma1)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_229": {
                "input": {
                    "value": "covmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg.sqrtm((sigma1 + offset).dot(sigma2 + offset))",
                            "Call"
                        ],
                        [
                            "covmean.real",
                            "Attribute"
                        ],
                        [
                            "sqrt_newton_schulz(sigma1.mm(sigma2).unsqueeze(0), 50).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_255": {
                "input": {
                    "value": "logits_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_303": {
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool + [pool_val]",
                            "BinOp"
                        ],
                        [
                            "torch.mean(x.view(x.size(0), x.size(1), -1), 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "data": {
                    "value": "data_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('./inception_pytorch/' + dataset_name + '_inception_moments.npz')['sigma']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "inception_pytorch/utils.py": {
        "torch": {
            "linspace_912": {
                "variable": {
                    "value": "lerp",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_midpoints + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_430": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_431": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_432": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randperm(n) for epoch in range(self.num_epochs)][-num_epochs:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_575": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "which_dataset(root=data_root, transform=train_transform, load_in_mem=load_in_mem, **dataset_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiEpochSampler(train_set, num_epochs, start_itr, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_580": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "which_dataset(root=data_root, transform=train_transform, load_in_mem=load_in_mem, **dataset_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_588": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_589": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_696": {
                "obj": {
                    "value": "G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['G', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_698": {
                "obj": {
                    "value": "G.optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['G_optim', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_700": {
                "obj": {
                    "value": "D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['D', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_702": {
                "obj": {
                    "value": "D.optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['D_optim', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_704": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['state_dict', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_887": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "i * classes_per_sheet",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "(i + 1) * classes_per_sheet",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_923": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_per_sheet",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_1048": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_647": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_662": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_707": {
                "obj": {
                    "value": "G_ema.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['G_ema', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_866": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_940": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_1088": {
                "*size": {
                    "value": "G_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1095": {
                "*size": {
                    "value": "G_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_637": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_721": {
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['G', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_728": {
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['D', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_735": {
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['state_dict', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_738": {
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['G_ema', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_892": {
                "variable": {
                    "value": "z_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes_per_sheet",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "G.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_1112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_509": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_653": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.view(param.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "param.view(param.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_668": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.view(param.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "param.view(param.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_725": {
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['G_optim', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_732": {
                "f": {
                    "value": "'%s/%s.pth' % (root, join_strings('_', ['D_optim', name_suffix]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_893": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_956": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_957": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_926": {
                "*size": {
                    "value": "num_per_sheet",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_927": {
                "*size": {
                    "value": "num_per_sheet",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "G.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_669": {
                "n": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "w.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_654": {
                "n": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "w.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_901": {
                "tensors": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ims + [o.data.cpu()]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/DCGAN_nets.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.cnn_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_18": {
                "in_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_24": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_27": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "LeakyReLU_49": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "4 * 4 * ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/base_model.py": {
        "torch": {
            "zeros_304": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.opt.evaluation_size, 3, self.opt.crop_size, self.opt.crop_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_42": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_230": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "str(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_312": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opt.fid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_314": {
                "*size": {
                    "value": "self.opt.fid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/egan_model.py": {
        "torch": {
            "mean_263": {
                "variable": {
                    "value": "Fq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_268": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "eval_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_D_fake + eval_D_real",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones(eval_D.size()).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Categorical_82": {
                "variable": {
                    "value": "self.CatDis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_115": {
                "variable": {
                    "value": "self.z_fixed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N * self.N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_135": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "self.evalimgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.evalimgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_187": {
                "variable": {
                    "value": "shuffle_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.evalimgs.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(self.opt.cat_num) / self.opt.cat_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_269": {
                "*size": {
                    "value": "eval_D.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "self.evaly",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "[allgrad, grad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_117": {
                "*size": {
                    "value": "self.N * self.N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_137": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_275": {
                "input": {
                    "value": "torch.norm(allgrad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_263": {
                "input": {
                    "value": "eval_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.netD(eval_fake_imgs) if not self.opt.cgan else self.netD(eval_fake_imgs, eval_fake_y)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "norm_275": {
                "input": {
                    "value": "allgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad if i == 0 else torch.cat([allgrad, grad])",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "LambdaLR_52": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "DCGANGenerator_cifar10(z_dim, ngf=ngf, output_nc=output_nc, norm_layer=norm_layer)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "DCGANDiscriminator_cifar10(ndf, input_nc, norm_layer)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_327": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(interpolatesv)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolatesv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_data",
                            "variable"
                        ],
                        [
                            "fake_data",
                            "variable"
                        ],
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_518": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_520": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_522": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_551": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_601": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_633": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "StepLR_54": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_195": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_450": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_526": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_56": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_189": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_197": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_362": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_365": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_387": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_388": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_435": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_435": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_448": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_533": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_540": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_557": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_580": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_580": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_595": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_597": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_600": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_626": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_627": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_628": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_630": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_631": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_58": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "opt.niter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_270": {
                "variable": {
                    "value": "loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_271": {
                "variable": {
                    "value": "loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_319": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_328": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_370": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_372": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_381": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_386": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_427": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_437": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_441": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_587": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_589": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_225": {
                "input": {
                    "value": "Dreal",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_226": {
                "input": {
                    "value": "Dfake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_240": {
                "variable": {
                    "value": "loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_241": {
                "variable": {
                    "value": "loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_258": {
                "input": {
                    "value": "Dreal",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_259": {
                "input": {
                    "value": "Dfake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_429": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_443": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_547": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/template_model.py": {
        "torch": {
            "L1Loss_64": {
                "variable": {
                    "value": "self.criterionLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/two_player_gan_model.py": {
        "torch": {
            "Categorical_75": {
                "variable": {
                    "value": "self.CatDis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor(probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_89": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_96": {
                "variable": {
                    "value": "self.z_fixed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N * self.N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_112": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(self.opt.cat_num) / self.opt.cat_num",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_98": {
                "*size": {
                    "value": "self.N * self.N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opt.batch_size if batch_size is None else batch_size",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "options/base_options.py": {
        "torch": {
            "set_device_143": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "util/image_pool.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(return_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "zeros_151": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "blank_img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, input_nc, (fineSize + 1) * N + 1, (fineSize + 1) * N + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_135": {
                "*size": {
                    "value": "G_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_z",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "*size": {
                    "value": "G_batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_42": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_42": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}