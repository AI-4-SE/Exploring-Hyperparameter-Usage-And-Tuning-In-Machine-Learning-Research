{
    "data/base.py": {
        "torch": {
            "from_numpy_101": {
                "ndarray": {
                    "value": "np.array(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data/cityscapes_loader.py": {
        "torch": {
            "from_numpy_184": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.imread(img_path)",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "m.imresize(img, (self.img_size[0], self.img_size[1]))",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img - self.mean",
                            "BinOp"
                        ],
                        [
                            "img.astype(float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.imread(lbl_path)",
                            "Call"
                        ],
                        [
                            "np.array(lbl, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.encode_segmap(lbl)",
                            "Call"
                        ],
                        [
                            "lbl.astype(float)",
                            "Call"
                        ],
                        [
                            "m.imresize(lbl, (self.img_size[0], self.img_size[1]), 'nearest', mode='F')",
                            "Call"
                        ],
                        [
                            "lbl.astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lbl).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/cityscapes_loader16.py": {
        "torch": {
            "from_numpy_179": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.imread(img_path)",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "m.imresize(img, (self.img_size[0], self.img_size[1]))",
                            "Call"
                        ],
                        [
                            "img[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "img.astype(np.float64)",
                            "Call"
                        ],
                        [
                            "img - self.mean",
                            "BinOp"
                        ],
                        [
                            "img.astype(float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.imread(lbl_path)",
                            "Call"
                        ],
                        [
                            "np.array(lbl, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "self.encode_segmap(lbl)",
                            "Call"
                        ],
                        [
                            "lbl.astype(float)",
                            "Call"
                        ],
                        [
                            "m.imresize(lbl, (self.img_size[0], self.img_size[1]), 'nearest', mode='F')",
                            "Call"
                        ],
                        [
                            "lbl.astype(int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lbl).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/gta5_dataset.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GTA5DataSet('./data', is_transform=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/preproccess_dataset.py": {
        "torch": {}
    },
    "data/synthia_dataset.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GTA5DataSet('./data', is_transform=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluateUDA.py": {
        "torch": {
            "load_260": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader(data_path, img_size=input_size, img_mean=IMG_MEAN, is_transform=True, split='val')",
                            "Call"
                        ],
                        [
                            "data_loader(data_path, img_size=input_size, img_mean=IMG_MEAN, is_transform=True, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_192": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 1024)",
                            "Tuple"
                        ],
                        [
                            "(512, 1024)",
                            "Tuple"
                        ],
                        [
                            "(512",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader(data_path, img_size=input_size, img_mean=IMG_MEAN, is_transform=True, split='val')",
                            "Call"
                        ],
                        [
                            "data_loader(data_path, img_size=input_size, img_mean=IMG_MEAN, is_transform=True, split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_201": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 1024)",
                            "Tuple"
                        ],
                        [
                            "(512, 1024)",
                            "Tuple"
                        ],
                        [
                            "(512",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_266": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Res_Deeplab(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_279": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/deeplabv2.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_134": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_135": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_101": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX + YY - XY - YX",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_252": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_396": {
                "variable": {
                    "value": "targetloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "target_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_loader(target_path, is_transform=True, augmentations=data_aug, img_size=input_size, img_mean=IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['batch_size']",
                            "Subscript"
                        ],
                        [
                            "int(source.size()[0])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_414": {
                "variable": {
                    "value": "sourceloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_loader(source_path, list_path='./data/gta5_list/train.txt', augmentations=data_aug, img_size=(1280, 720), mean=IMG_MEAN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['batch_size']",
                            "Subscript"
                        ],
                        [
                            "int(source.size()[0])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['num_workers']",
                            "Subscript"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_442": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[0], input_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_108": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "CrossEntropy2d(ignore_label=ignore_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "IMG_MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mean.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_tensors_192": {
                "variable": {
                    "value": "(IMG_MEAN, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "IMG_MEAN.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_195": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor + IMG_MEAN",
                            "BinOp"
                        ],
                        [
                            "(tensor / 255).float()",
                            "Call"
                        ],
                        [
                            "torch.flip(tensor, (0,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_356": {
                "variable": {
                    "value": "saved_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "restore_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'http://vllab1.ucmerced.edu/~whung/adv-semi-seg/resnet101COCO-41f33a49.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "exp_87": {
                "input": {
                    "value": "-L2_distance / bandwidth_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_142": {
                "variable": {
                    "value": "ema_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ema_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Res_Deeplab(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "convert_model(ema_model)",
                            "Call"
                        ],
                        [
                            "DataParallelWithCallback(ema_model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(ema_model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "create_ema_model(model)",
                            "Call"
                        ],
                        [
                            "ema_model.cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "update_ema_variables(ema_model=ema_model, model=model, alpha_teacher=alpha_teacher, iteration=i_iter)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_238": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'iteration': iteration, 'optimizer': optimizer.state_dict(), 'config': config}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'checkpoint-iter{iteration}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, f'{miou}best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_243": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'iteration': iteration, 'optimizer': optimizer.state_dict(), 'config': config}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'checkpoint-iter{iteration}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, f'{miou}best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_335": {
                "variable": {
                    "value": "unlabeled_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "MSELoss2d()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_378": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['model']",
                            "Subscript"
                        ],
                        [
                            "Res_Deeplab(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "convert_model(model)",
                            "Call"
                        ],
                        [
                            "DataParallelWithCallback(model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpus)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_427": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.module.optim_parameters(learning_rate_object)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['momentum']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_430": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.optim_parameters(learning_rate_object)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['momentum']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_536": {
                "variable": {
                    "value": "pseudo_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_u_w.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_537": {
                "variable": {
                    "value": "(max_probs, targets_u_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits_u_w.detach(), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_591": {
                "variable": {
                    "value": "inputs_u_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_u_s0, inputs_u_s1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_592": {
                "variable": {
                    "value": "inputs_t_s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_t_s0, inputs_t_s1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_596": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_617": {
                "variable": {
                    "value": "targets_u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_u0, targets_u1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_618": {
                "variable": {
                    "value": "targets_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_t0, targets_t1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_632": {
                "variable": {
                    "value": "onesWeights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pixelWiseWeight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "L2_distance.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "ndarray": {
                    "value": "IMG_MEAN.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "ndarray": {
                    "value": "IMG_MEAN.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(image1.unsqueeze(0), image2.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "(label1.unsqueeze(0), label2.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_320": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_321": {
                "variable": {
                    "value": "class_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "mixdata",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img.unsqueeze(0), in_img.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "mixtarget",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lbl.unsqueeze(0), in_lbl.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_341": {
                "variable": {
                    "value": "unlabeled_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "CrossEntropyLoss2dPixelWiseWeighted(ignore_index=ignore_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)[:args.gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_434": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.module.optim_parameters(learning_rate_object)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['momentum']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_437": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.optim_parameters(learning_rate_object)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_719": {
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_542": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_mix[image_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_557": {
                "variable": {
                    "value": "MixMask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs_u_w.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_625": {
                "input": {
                    "value": "max_probs.ge(0.968).long() == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_626": {
                "*size": {
                    "value": "max_probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_630": {
                "variable": {
                    "value": "pixelWiseWeight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_634": {
                "tensors": {
                    "value": "(onesWeights[0].unsqueeze(0), pixelWiseWeight[0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_636": {
                "tensors": {
                    "value": "(onesWeights[1].unsqueeze(0), pixelWiseWeight[1].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_642": {
                "input": {
                    "value": "max_probs.ge(0.968).long() == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_638": {
                "tensors": {
                    "value": "(pixelWiseWeight0, pixelWiseWeight1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_639": {
                "tensors": {
                    "value": "(pixelWiseWeight0, pixelWiseWeight1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_547": {}
        }
    },
    "utils/helpers.py": {
        "torch": {
            "from_numpy_34": {
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((in_channels, out_channels, kernel_size, kernel_size), dtype=np.float64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "softmax_58": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_31": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_38": {
                "variable": {
                    "value": "self.CE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_42": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * pixelWiseWeight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_48": {
                "variable": {
                    "value": "self.MSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none'",
                            "Method Argument"
                        ],
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_61": {
                "input": {
                    "value": "torch.max(soft, multihotmask * (soft * multihotmask).sum(1, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(inp, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_141": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "class_weights.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/misce.py": {
        "torch": {
            "cat_90": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX + YY - XY - YX",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_126": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "CrossEntropy2d(ignore_label=ignore_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "IMG_MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mean.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_tensors_253": {
                "variable": {
                    "value": "(IMG_MEAN, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "IMG_MEAN.unsqueeze(1).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_256": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor + IMG_MEAN",
                            "BinOp"
                        ],
                        [
                            "(tensor / 255).float()",
                            "Call"
                        ],
                        [
                            "torch.flip(tensor, (0,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_106": {
                "input": {
                    "value": "-L2_distance / bandwidth_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_160": {
                "variable": {
                    "value": "ema_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ema_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Res_Deeplab(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "convert_model(ema_model)",
                            "Call"
                        ],
                        [
                            "DataParallelWithCallback(ema_model, device_ids=gpus)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(ema_model, device_ids=gpus)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'iteration': iteration, 'optimizer': optimizer.state_dict(), 'config': config}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'checkpoint-iter{iteration}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, f'{miou}best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_217": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'iteration': iteration, 'optimizer': optimizer.state_dict(), 'config': config}",
                            "Dict"
                        ],
                        [
                            "torch.load(resume_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f'checkpoint-iter{iteration}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, f'{miou}best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_355": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_356": {
                "variable": {
                    "value": "lbl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_357": {
                "variable": {
                    "value": "class_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "mixdata",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img.unsqueeze(0), in_img)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "mixtarget",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lbl.unsqueeze(0), in_lbl)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "IMG_MEAN.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "IMG_MEAN.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "(img_temp, image_src.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "(img_temp, image_tar.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "(label_temp, label_src.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(label_temp, label_tar.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "L2_distance.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_66": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "utils/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transformmasks.py": {
        "torch": {
            "broadcast_tensors_57": {
                "variable": {
                    "value": "(pred, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "pred.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transformsgpu.py": {
        "torch": {
            "broadcast_tensors_44": {
                "variable": {
                    "value": "(stackedMask, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "broadcast_tensors_49": {
                "variable": {
                    "value": "(stackedMask, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "broadcast_tensors_59": {
                "variable": {
                    "value": "(stackedMask0, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mask[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "broadcast_tensors_62": {
                "variable": {
                    "value": "(stackedMask0, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "mask[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flip_36": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(data + img_mean) / 255",
                            "BinOp"
                        ],
                        [
                            "seq(data)",
                            "Call"
                        ],
                        [
                            "(data * 255 - img_mean).float()",
                            "Call"
                        ],
                        [
                            "seq(data)",
                            "Call"
                        ],
                        [
                            "torch.flip(data, (3,))",
                            "Call"
                        ],
                        [
                            "(stackedMask * torch.cat((data[::2], data[::2])) + (1 - stackedMask) * torch.cat((data[1::2], data[1::2]))).float()",
                            "Call"
                        ],
                        [
                            "(stackedMask0 * data[0] + (1 - stackedMask0) * data[1]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "((data - MEAN) / STD).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_38": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(target, (2,))",
                            "Call"
                        ],
                        [
                            "(stackedMask * torch.cat((target[::2], target[::2])) + (1 - stackedMask) * torch.cat((target[1::2], target[1::2]))).float()",
                            "Call"
                        ],
                        [
                            "(stackedMask0 * target[0] + (1 - stackedMask0) * target[1]).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_71": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_72": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_tensors_73": {
                "variable": {
                    "value": "(STD, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "STD",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "broadcast_tensors_74": {
                "variable": {
                    "value": "(MEAN, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "MEAN",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "broadcast_tensors_13": {
                "variable": {
                    "value": "(img_mean, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "img_mean.unsqueeze(0).unsqueeze(2).unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "kornia.augmentation.ColorJitter(brightness=s, contrast=s, saturation=s, hue=s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "kornia.filters.GaussianBlur2d(kernel_size=kernel_size, sigma=(sigma, sigma))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "(data[1::2], data[1::2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "(target[1::2], target[1::2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}