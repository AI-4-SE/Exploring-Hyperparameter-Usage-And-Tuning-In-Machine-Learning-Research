{
    "codes/SDTS_test.py": {
        "tensorflow": {
            "ConfigProto_290": {
                "variable": {
                    "value": "configProt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_294": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "configProt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_297": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, patch_size, patch_size, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_298": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, patch_size, patch_size, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_299": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, patch_size, patch_size, Channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_307": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codes/SDTS_train.py": {
        "tensorflow": {
            "DEFINE_integer_12": {
                "name": {
                    "value": "img_width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "input image width.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_13": {
                "name": {
                    "value": "img_height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "input image width.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_15": {
                "name": {
                    "value": "img_channel",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of image channel.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_17": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "batch size for training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_19": {
                "name": {
                    "value": "seq_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "total input and output length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "max_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "max num of steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.img_height, FLAGS.img_width, FLAGS.img_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.img_height, FLAGS.img_width, FLAGS.img_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.img_height, FLAGS.img_width, FLAGS.img_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "x2_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.batch_size, FLAGS.img_height, FLAGS.img_width, FLAGS.img_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_66": {
                "variable": {
                    "value": "l2_loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1to2 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_67": {
                "variable": {
                    "value": "l2_loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x3to2 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_69": {
                "variable": {
                    "value": "l2_loss_3",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "enhanced_image - x2_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_74": {
                "variable": {
                    "value": "configProt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_78": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "configProt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "AdamOptimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_82": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_85": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_87": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[val for val in var if 'easyflow' in val.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_91": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_124": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codes/flow.py": {
        "tensorflow": {
            "variable_scope_9": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'easyflow'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_18": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[imga, imgb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "flow_inp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([imga, imgb], 3, name='flow_inp')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "c1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_20": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 24, [5, 5], stride=2, scope='c1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "c2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_21": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(c1, 24, [3, 3], scope='c2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "c3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(c2, 24, [5, 5], stride=2, scope='c3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "c4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_23": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(c3, 24, [3, 3], scope='c4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "c5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "c5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(c4, 32, [3, 3], activation_fn=tf.nn.tanh, scope='c5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, int(h / 4), int(w / 4), 2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_25": {
                "variable": {
                    "value": "c5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "c5_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(c5, [n, int(h / 4), int(w / 4), 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c5_hr, [0, 1, 4, 2, 5, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5_hr, [n, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 2, 5, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "c5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c5_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(c5, [n, int(h / 4), int(w / 4), 2, 4, 4])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c5_hr, [0, 1, 4, 2, 5, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(c5_hr, [n, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, h, w, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_30": {
                "variable": {
                    "value": "c5_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, c5_hr, img_warp1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "cat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "variable": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c5_pack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([inputs, c5_hr, img_warp1], 3, name='cat')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "s1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(c5_pack, 24, [5, 5], stride=2, scope='s1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "s2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "variable": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(s1, 24, [3, 3], scope='s2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "s3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(s2, 24, [3, 3], scope='s3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "s4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_35": {
                "variable": {
                    "value": "s5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(s3, 24, [3, 3], scope='s4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "s5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "s5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "s5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(s4, 8, [3, 3], activation_fn=tf.nn.tanh, scope='s5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, int(h / 2), int(w / 2), 2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "variable": {
                    "value": "s5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "s5_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(s5, [n, int(h / 2), int(w / 2), 2, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(s5_hr, [0, 1, 4, 2, 5, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(s5_hr, [n, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 2, 5, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "s5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "s5_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(s5, [n, int(h / 2), int(w / 2), 2, 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(s5_hr, [0, 1, 4, 2, 5, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(s5_hr, [n, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, h, w, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "s5_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, uv, img_warp2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "cat2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s5_pack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([inputs, uv, img_warp2], 3, name='cat2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "a1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(s5_pack, 24, [3, 3], scope='a1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "a2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "a3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(a1, 24, [3, 3], scope='a2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "a3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "a4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(a2, 24, [3, 3], scope='a3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "a4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "a5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(a3, 24, [3, 3], scope='a4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "a5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "a5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(a4, 2, [3, 3], activation_fn=tf.nn.tanh, scope='a5')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, h, w, 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "a5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a5_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(a5, [n, h, w, 2, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(a5_hr, [0, 1, 4, 2, 5, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a5_hr, [n, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 2, 5, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "a5_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a5_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(a5, [n, h, w, 2, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(a5_hr, [0, 1, 4, 2, 5, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a5_hr, [n, h, w, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, h, w, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_12": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_15": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "codes/func.py": {
        "tensorflow": {
            "split_122": {
                "variable": {
                    "value": "(dx, dy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_7": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_9": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_10": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_15": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_16": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(x, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.matmul(rep, tf.reshape(x, (1, -1)))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(_repeat2(tf.range(0, width), height * num_batch), 'float32') + x * 64",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(_repeat2(_repeat(tf.range(0, height), width), num_batch), 'float32') + y * 64",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "height_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_31": {
                "variable": {
                    "value": "width_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_44": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_47": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_48": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_49": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_50": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_66": {
                "variable": {
                    "value": "Ia",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_67": {
                "variable": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_68": {
                "variable": {
                    "value": "Ic",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_69": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_72": {
                "variable": {
                    "value": "x0_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_73": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "y0_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_75": {
                "variable": {
                    "value": "y1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_77": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "variable": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_80": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_94": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_95": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat, ones]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_105": {
                "variable": {
                    "value": "height_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_106": {
                "variable": {
                    "value": "width_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "x_s_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "y_s_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_interpolate(input_dim, x_s_flat, y_s_flat, out_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([batch, out_height, out_width, chan])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SpatialTransformer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_11": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.matmul(rep, tf.reshape(x, (1, -1)))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(_repeat2(tf.range(0, width), height * num_batch), 'float32') + x * 64",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.matmul(rep, tf.reshape(x, (1, -1)))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(_repeat2(tf.range(0, width), height * num_batch), 'float32') + x * 64",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "_interpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "_meshgrid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_8": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_10": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.matmul(rep, tf.reshape(x, (1, -1)))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(_repeat2(tf.range(0, width), height * num_batch), 'float32') + x * 64",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_15": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.matmul(rep, tf.reshape(x, (1, -1)))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(_repeat2(tf.range(0, width), height * num_batch), 'float32') + x * 64",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_23": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_24": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_25": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_38": {
                "x": {
                    "value": "_repeat2(tf.range(0, width), height * num_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_39": {
                "x": {
                    "value": "_repeat2(_repeat(tf.range(0, height), width), num_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "floor_42": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.matmul(rep, tf.reshape(x, (1, -1)))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(_repeat2(tf.range(0, width), height * num_batch), 'float32') + x * 64",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_44": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "tf.cast(_repeat2(_repeat(tf.range(0, height), width), num_batch), 'float32') + y * 64",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_64": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_86": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_89": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_100": {
                "input": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_102": {
                "input": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_118": {
                "values": {
                    "value": "[batch, out_height, out_width, chan]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_8": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_88": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_15": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_86": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_87": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(input_dim)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_89": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_8": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "codes/net.py": {
        "tensorflow": {
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'enhanced_Net'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_29": {
                "variable": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(image1, 64, [3, 3], 1, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image1, 64, [3, 3], 1, scope='conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(image1, 64, [3, 3], 1, scope='conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image1, 64, [3, 3], 1, scope='conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "variable": {
                    "value": "image2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(image2, 64, [3, 3], 1, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image2, 64, [3, 3], 1, scope='conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_32": {
                "variable": {
                    "value": "image2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(image2, 64, [3, 3], 1, scope='conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image2, 64, [3, 3], 1, scope='conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_33": {
                "variable": {
                    "value": "image3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(image3, 64, [3, 3], 1, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image3, 64, [3, 3], 1, scope='conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "image3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(image3, 64, [3, 3], 1, scope='conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image3, 64, [3, 3], 1, scope='conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_36": {
                "variable": {
                    "value": "image_1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image1, image2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_37": {
                "variable": {
                    "value": "image_1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([image1, image2], axis=3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image_1_2, 64, [3, 3], 1, scope='conv_1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv_1_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_39": {
                "variable": {
                    "value": "image_2_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image2, image3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "image_2_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_2_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([image2, image3], axis=3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image_2_3, 64, [3, 3], 1, scope='conv_2_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv_2_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "image_1_2_3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[image_1_2, image_2_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "image_1_2_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_1_2_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([image_1_2, image_2_3], axis=3)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(image_1_2_3, 64, [3, 3], 1, scope='conv_1_2_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv_1_2_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'enhanced_Net'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_58": {
                "variable": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "split1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv_3_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_59": {
                "variable": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(split1, 48, [3, 3], 1, scope='conv_3_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_60": {
                "variable": {
                    "value": "(slice1_1, slice1_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "conv3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(conv3_1, 48, [3, 3], 1, scope='conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[16, 32]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "conv3_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slice1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "conv3_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(slice1_2, 48, [3, 3], scope='conv3_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_63": {
                "variable": {
                    "value": "(slice2_1, slice2_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "conv3_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(conv3_3, 64, [3, 3], scope='conv3_4')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[16, 48]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "conv3_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slice2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv3_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(slice2_2, 48, [3, 3], 1, scope='conv3_5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3_6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[split1_1, slice1_1, slice2_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "down1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat1 + conv3_6",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "down1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'enhanced_Net'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image1_2_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre_convolution(image1, image2, image3, name=name)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "down3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_block(input=down2, name='conv5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_97": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(down3, 64, [3, 3], 1, scope='conv7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_102": {
                "variable": {
                    "value": "conv8_out",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "conv8_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv8 + image2",
                            "BinOp"
                        ],
                        [
                            "conv8 + image2",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(conv8_out, 0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}