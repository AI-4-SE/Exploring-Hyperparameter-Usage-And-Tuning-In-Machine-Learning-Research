{
    "GIDataSet.py": {
        "sklearn": {
            "normalize_73": {
                "variable": {
                    "value": "fileData[:self.numPts_, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "fileData[:self.numPts_, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "GIEval.py": {
        "tensorflow": {
            "subtract_31": {
                "variable": {
                    "value": "diffVals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictVals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictVals",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "ptsVals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptsVals",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_32": {
                "variable": {
                    "value": "diffVals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diffVals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(predictVals, ptsVals)",
                            "Call"
                        ],
                        [
                            "tf.square(diffVals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_33": {
                "variable": {
                    "value": "valLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diffVals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(predictVals, ptsVals)",
                            "Call"
                        ],
                        [
                            "tf.square(diffVals)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_34": {
                "variable": {
                    "value": "valLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "valLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(diffVals)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(valLoss)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, testDataSet.get_feature_channels()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "inPts2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "inBatchIds2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "inGI",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, testDataSet.get_label_channels()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_94": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_95": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_98": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_101": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "args.gpuMem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_102": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "inFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, testDataSet.get_feature_channels()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "inFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_102": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.gpuMem, visible_device_list=args.gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GITrainRT.py": {
        "tensorflow": {
            "subtract_31": {
                "variable": {
                    "value": "diffVals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictVals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictVals",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "ptsVals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptsVals",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_32": {
                "variable": {
                    "value": "diffVals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diffVals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(predictVals, ptsVals)",
                            "Call"
                        ],
                        [
                            "tf.square(diffVals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_33": {
                "variable": {
                    "value": "valLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "diffVals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(predictVals, ptsVals)",
                            "Call"
                        ],
                        [
                            "tf.square(diffVals)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_34": {
                "variable": {
                    "value": "valLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "valLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss(predVals, inGI, args.weightDecay)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(diffVals)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(valLoss)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_36": {
                "variable": {
                    "value": "regVariables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "weight_decay_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_42": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningRate",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "learningRateDecay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningRateDecay",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "learningDecayFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learningDecayFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_43": {
                "variable": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_trainning(loss, args.initLearningRate, args.maxLearningRate, args.learningDeacyFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningRateDecay, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, maxLearningRate)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maxLearningRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxLearningRate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_trainning(loss, args.initLearningRate, args.maxLearningRate, args.learningDeacyFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningRateDecay, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, maxLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_45": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exponential_decay_51": {
                "variable": {
                    "value": "bnDecayExp",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "InitBNtDecay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "InitBNtDecay",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "bnDecayRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bnDecayRate",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "bnDecayFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bnDecayFactor",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_52": {
                "variable": {
                    "value": "bnDecayExp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bnDecayExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(InitBNtDecay, global_step, bnDecayRate, bnDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(bnDecayExp, maxBNDecay)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "maxBNDecay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxBNDecay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_139": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_142": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, trainDataSet.get_feature_channels()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "inPts2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "inBatchIds2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "inGI",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, trainDataSet.get_label_channels()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "keepProbConv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "keepProbFull",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_190": {
                "variable": {
                    "value": "learningRateSumm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learninRate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learningRateExp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_trainning(loss, args.initLearningRate, args.maxLearningRate, args.learningDeacyFactor, args.learningDecayRate * numBatchesXEpoch, global_step)",
                            "Call"
                        ],
                        [
                            "tf.train.exponential_decay(learningRate, global_step, learningRateDecay, learningDecayFactor, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learningRateExp, maxLearningRate)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "lossSummaryPH",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_194": {
                "variable": {
                    "value": "lossSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "valLoss + regularizationLoss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_195": {
                "variable": {
                    "value": "valLossSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_Val",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "valLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss(predVals, inGI, args.weightDecay)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(diffVals)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(valLoss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_196": {
                "variable": {
                    "value": "regularizationLossSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_Regularization",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "regularizationLoss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_loss(predVals, inGI, args.weightDecay)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_197": {
                "variable": {
                    "value": "trainingSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[lossSummary, valLossSummary, regularizationLossSummary, learningRateSumm]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_198": {
                "variable": {
                    "value": "metricsTestSummary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Tes_loss_AO",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lossSummaryPH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_201": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_202": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_205": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_208": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "args.gpuMem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_209": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_212": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.logFolder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "inFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, trainDataSet.get_feature_channels()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "inFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_46": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_159": {
                "t": {
                    "value": "(tf.to_float(global_step) - initBRNDecayEpoch) / (endBRNDecayEpoch - initBRNDecayEpoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConfigProto_209": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.gpuMem, visible_device_list=args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_159": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', trainable=False)",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MCGINetworkRT.py": {
        "tensorflow": {
            "batch_normalization_36": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bnMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bnMomentum",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": [
                        [
                            "isTraining",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layerName + '_BN'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "renorm": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "renorm_clipping": {
                    "value": "brnClipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "brnClipping",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm_momentum": {
                    "value": "brnMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "brnMomentum",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_39": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_45": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bnMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bnMomentum",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": [
                        [
                            "isTraining",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layerName + '_BN'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "renorm": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "renorm_clipping": {
                    "value": "brnClipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "brnClipping",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm_momentum": {
                    "value": "brnMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "brnMomentum",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_48": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_100": {
                "variable": {
                    "value": "convFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[poolFeatures1, convFeatures2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "convFeatures3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[poolFeatures2, convFeatures3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_169": {
                "variable": {
                    "value": "upFeatures3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures3, upFeatures3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "upFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures2, upFeatures2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_199": {
                "variable": {
                    "value": "upFeatures1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures1, upFeatures1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_217": {
                "variable": {
                    "value": "finalFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finalFeatures, features2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keepProbConv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keepProbConv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keepProbFull",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keepProbFull",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "feature_channel_scope",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MCGINetworkRTEval.py": {
        "tensorflow": {
            "batch_normalization_36": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bnMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bnMomentum",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": [
                        [
                            "isTraining",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layerName + '_BN'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "renorm": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "renorm_clipping": {
                    "value": "brnClipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "brnClipping",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm_momentum": {
                    "value": "brnMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "brnMomentum",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_39": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_45": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bnMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bnMomentum",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": [
                        [
                            "isTraining",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layerName + '_BN'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "renorm": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "renorm_clipping": {
                    "value": "brnClipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "brnClipping",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm_momentum": {
                    "value": "brnMomentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "brnMomentum",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_48": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_248": {
                "values": {
                    "value": "resultColor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keepProbConv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keepProbConv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbConv)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=bnMomentum, trainable=True, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=brnClipping, renorm_momentum=brnMomentum)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inFeatures, keepProbFull)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keepProbFull",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keepProbFull",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "feature_channel_scope",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "convFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[poolFeatures1, convFeatures2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_152": {
                "variable": {
                    "value": "convFeatures3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[poolFeatures2, convFeatures3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "upFeatures3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures3, upFeatures3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_209": {
                "variable": {
                    "value": "upFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures2, upFeatures2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_224": {
                "variable": {
                    "value": "upFeatures1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures1, upFeatures1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_242": {
                "variable": {
                    "value": "finalFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finalFeatures, inputFeatures2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 3 + i:3 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 6 + i:6 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_73": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 3 + i:3 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 6 + i:6 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 9 + i:9 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_76": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 12:13]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "inputFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures2, features2[:, 3 + i:3 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "inputFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures2, features2[:, 6 + i:6 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "inputFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures2, features2[:, 9 + i:9 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "inputFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures2, features2[:, 12:13]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rt_viewer/TFRealTimeImpFast.py": {
        "tensorflow": {
            "placeholder_53": {
                "variable": {
                    "value": "self.inPoints_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.inBatchIds_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.inFeatures_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, numFeatures]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.inCellIndexs_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.outPoints_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.outBatchIds_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.outInFeatures_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, numInFeatures]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.aabbMin_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.aabbMax_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.inFeatures_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, numInFeatures]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.isTraining_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_150": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_151": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_154": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_157": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_158": {
                "variable": {
                    "value": "self.sess_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_265": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_266": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_268": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_269": {
                "variable": {
                    "value": "initLocal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_276": {
                "variable": {
                    "value": "inPts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_277": {
                "variable": {
                    "value": "inBatchIds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_285": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_normalization_301": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 3])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 6])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=1.0, trainable=False, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=None, renorm_momentum=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "isTraining",
                    "type": "variable",
                    "possible_values": [
                        [
                            "isTraining",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "layerName + '_BN'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "renorm": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "renorm_clipping": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "renorm_momentum": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_304": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 3])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 10])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, 6])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=inFeatures, momentum=1.0, trainable=False, training=isTraining, name=layerName + '_BN', renorm=True, renorm_clipping=None, renorm_momentum=1.0)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(inFeatures)",
                            "Call"
                        ],
                        [
                            "inFeatures",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_475": {
                "variable": {
                    "value": "finalFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[resultAbstractFeatures[0], resultAbstractFeatures[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_476": {
                "variable": {
                    "value": "finalFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finalFeatures, resultAbstractFeatures[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_506": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_Conv_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_507": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_Conv_biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[8]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_508": {
                "variable": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_Conv_weights2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_509": {
                "variable": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Final_Conv_weights2', [2, 4, 4], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights2, [4, 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_510": {
                "variable": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_Conv_biases2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_511": {
                "variable": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "biases2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Final_Conv_biases2', [2, 4], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(biases2, [8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_512": {
                "variable": {
                    "value": "weights3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_Conv_weights3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_513": {
                "variable": {
                    "value": "weights3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Final_Conv_weights3', [2, 4, 4], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights3, [4, 8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[4, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_514": {
                "variable": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_Conv_biases3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_515": {
                "variable": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "biases3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Final_Conv_biases3', [2, 4], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.reshape(biases3, [8])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_518": {
                "variable": {
                    "value": "bn1Mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP1_BN_BN/moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_519": {
                "variable": {
                    "value": "bn1Variance",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP1_BN_BN/moving_variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_520": {
                "variable": {
                    "value": "bn1Gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP1_BN_BN/gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_521": {
                "variable": {
                    "value": "bn1Beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP1_BN_BN/beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_523": {
                "variable": {
                    "value": "weights_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP1_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numExtraParams + numFeatures, numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_524": {
                "variable": {
                    "value": "biases_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP1_biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_526": {
                "variable": {
                    "value": "bn2Mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP2_BN_BN/moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_527": {
                "variable": {
                    "value": "bn2Variance",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP2_BN_BN/moving_variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_528": {
                "variable": {
                    "value": "bn2Gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP2_BN_BN/gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_529": {
                "variable": {
                    "value": "bn2Beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP2_BN_BN/beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_532": {
                "variable": {
                    "value": "weights_f2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP2_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numFeatures, numOutputs]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_533": {
                "variable": {
                    "value": "biases_f2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Final_MLP2_biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numOutputs]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=1.0, mode='FAN_AVG', uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "MyAuxHierarchy_aabbLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_282": {
                "variable": {
                    "value": "inFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "feature_channel_scope",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_368": {
                "variable": {
                    "value": "convFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[poolFeatures1, convFeatures2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_395": {
                "variable": {
                    "value": "convFeatures3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[poolFeatures2, convFeatures3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_437": {
                "variable": {
                    "value": "upFeatures3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures3, upFeatures3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_452": {
                "variable": {
                    "value": "upFeatures2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures2, upFeatures2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_467": {
                "variable": {
                    "value": "upFeatures1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convFeatures1, upFeatures1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_503": {
                "name_or_scope": {
                    "value": "feature_channel_scope",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_158": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.25, visible_device_list='0')",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.1, visible_device_list='0')",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_266": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.25, visible_device_list='0')",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.1, visible_device_list='0')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_321": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 3 + i:3 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_322": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 6 + i:6 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_325": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 9 + i:9 + i + 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_326": {
                "variable": {
                    "value": "inputFeatures",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputFeatures, features[:, 12:13]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}