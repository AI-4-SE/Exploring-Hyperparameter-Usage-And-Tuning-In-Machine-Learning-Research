{
    "autoattack/fab_tf.py": {
        "tensorflow": {},
        "torch": {
            "max_81": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_136": {
                "variable": {
                    "value": "u1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "res_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_325": {
                "variable": {
                    "value": "u1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "res_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_139": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_328": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_483": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_484": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_93": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_229": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_233": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_411": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_422": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_426": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_157": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_346": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_499": {
                "variable": {
                    "value": "acc_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "self.model.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.model.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_168": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_233": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_357": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_426": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_526": {
                "variable": {
                    "value": "acc_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "self.model.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.model.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_91": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_92": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_148": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_229": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_236": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_337": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_398": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_399": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_400": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_422": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_427": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_429": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_210": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_403": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_404": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_405": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_149": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_149": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_217": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_338": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_338": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_408": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_409": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_410": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_158": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_158": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_347": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_347": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_169": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_169": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_358": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_358": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_339": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_159": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_348": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_359": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "autoattack/utils_tf.py": {
        "tensorflow": {
            "sort_91": {
                "variable": {
                    "value": "x_sort",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_92": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sess.run(self.logits, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_99": {
                "variable": {
                    "value": "x_sort",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_100": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sess.run(self.logits, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_101": {
                "variable": {
                    "value": "y_target_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_20": {
                "variable": {
                    "value": "self.xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.la",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.la_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_35": {
                "variable": {
                    "value": "la_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.la",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_36": {
                "variable": {
                    "value": "la_target_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.la_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "variable": {
                    "value": "la_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "la_mask * self.logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "la_target_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "la_target_mask * self.logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_22": {
                "ys": {
                    "value": "self.xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_26": {
                "ys": {
                    "value": "self.dlr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_31": {
                "ys": {
                    "value": "self.dlr_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_40": {
                "ys": {
                    "value": "self.diff_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "x * y_target_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_17": {
                "ys": {
                    "value": "self.logits[:, cl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_46": {
                "ndarray": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.sess.run(self.logits, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "g2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sess.run(self.grads, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "np.moveaxis(np.array(g2), 0, 1)",
                            "Call"
                        ],
                        [
                            "np.transpose(g2, (0, 1, 4, 2, 3))",
                            "Call"
                        ],
                        [
                            "np.transpose(np.array(g2), (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "g2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.sess.run(self.grads, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "np.moveaxis(np.array(g2), 0, 1)",
                            "Call"
                        ],
                        [
                            "np.transpose(g2, (0, 1, 4, 2, 3))",
                            "Call"
                        ],
                        [
                            "np.transpose(np.array(g2), (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "grad_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "grad_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "grad_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "autoattack/utils_tf2.py": {
        "tensorflow": {
            "sort_197": {
                "variable": {
                    "value": "x_sort",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_198": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.__get_logits(x2).numpy()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_205": {
                "variable": {
                    "value": "x_sort",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_206": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.__get_logits(x2).numpy()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_207": {
                "variable": {
                    "value": "y_target_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_56": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tf_model(x_input, training=False)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_106": {
                "variable": {
                    "value": "la_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "la",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_107": {
                "variable": {
                    "value": "la_target_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "la_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_target.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_120": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_129": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_140": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_155": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_156": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y.clone().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_169": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_170": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y.clone().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_183": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_184": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y.clone().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_185": {
                "variable": {
                    "value": "y_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_target.clone().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_51": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "jacobian",
                    "type": "Call",
                    "possible_values": [
                        [
                            "g.batch_jacobian(logits, x_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(jacobian, perm=[0, 1, 4, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "difflogits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(la_target_mask - la_mask) * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_122": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "variable": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "g2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "g.gradient(difflogits, x)",
                            "Call"
                        ],
                        [
                            "self.__get_jacobian(x2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(g2, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "variable": {
                    "value": "grad_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_172": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "variable": {
                    "value": "grad_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_187": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_192": {
                "variable": {
                    "value": "grad_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_44": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_62": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_78": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_94": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_109": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_208": {
                "input_tensor": {
                    "value": "x * y_target_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_126": {
                "ndarray": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.__get_logits(x2).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "g2.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "g2.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "ndarray": {
                    "value": "grad_val.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "grad_val.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "grad_val.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "auto_attack.py": {
        "torch": {
            "stack_90": {
                "variable": {
                    "value": "cfg[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "cfg[targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_120": {
                "variable": {
                    "value": "writter",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "METHOD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'AutoAttack'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "autoattack/autoattack.py": {
        "torch": {
            "zeros_80": {
                "variable": {
                    "value": "robust_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_orig.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x_orig.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "num_robust",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "robust_flags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_107": {
                "variable": {
                    "value": "robust_lin_idcs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "robust_flags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "robust_flags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_172": {
                "variable": {
                    "value": "num_non_robust_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "false_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "~y.eq(output.max(dim=1)[1]).to(robust_flags.device)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_176": {
                "input": {
                    "value": "robust_flags",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "autoattack/autopgd_pt.py": {
        "torch": {
            "zeros_65": {
                "variable": {
                    "value": "loss_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "acc_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "loss_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_284": {
                "variable": {
                    "value": "acc_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_290": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_70": {
                "variable": {
                    "value": "criterion_indiv",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_143": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_like_343": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_355": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_407": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_408": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_60": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_189": {
                "input": {
                    "value": "acc",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_196": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_197": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_277": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_401": {
                "input": {
                    "value": "acc",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "enable_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_221": {
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "enable_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_306": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_328": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_329": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_57": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_120": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_123": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "enable_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_274": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_333": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_336": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "enable_grad_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_84": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_115": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_116": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_297": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_328": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_329": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_114": {
                "input": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad + torch.autograd.grad(loss, [x_adv])[0].detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_115": {
                "input": {
                    "value": "x_adv_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_116": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_137": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_275": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_327": {
                "input": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad + torch.autograd.grad(loss, [x_adv])[0].detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_328": {
                "input": {
                    "value": "x_adv_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_329": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_350": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_278": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_120": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_123": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_333": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_336": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_334": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_337": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "autoattack/autopgd_tf.py": {
        "torch": {
            "zeros_59": {
                "variable": {
                    "value": "loss_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "acc_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_250": {
                "variable": {
                    "value": "loss_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_252": {
                "variable": {
                    "value": "acc_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_257": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_126": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_179": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_305": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_313": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_365": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_366": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_172": {
                "input": {
                    "value": "acc",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "randn_245": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_359": {
                "input": {
                    "value": "acc",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_82": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_104": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_269": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_291": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_292": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_112": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_242": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_296": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_299": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_104": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_105": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_291": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_292": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_103": {
                "input": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad / float(self.eot_iter)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_104": {
                "input": {
                    "value": "x_adv_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_105": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_243": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_290": {
                "input": {
                    "value": "grad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad / float(self.eot_iter)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_291": {
                "input": {
                    "value": "x_adv_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_292": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_109": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_112": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_296": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_299": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_113": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_297": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_300": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "autoattack/fab_projections.py": {
        "torch": {
            "argsort_19": {
                "variable": {
                    "value": "indp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a - t * (2 * a - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_28": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_like_35": {
                "variable": {
                    "value": "ub",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "w.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_71": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_71": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-1000000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1000000000000.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_74": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w).clamp(min=-1000000000000.0, max=1000000000000.0)",
                            "Call"
                        ],
                        [
                            "(1 / w).abs().clamp_max(1000000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_75": {
                "variable": {
                    "value": "rs2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(-w5 * rs[:, 0:1], torch.cumsum((-rs2 + rs) * ws, dim=1) - w5 * rs[:, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_like_91": {
                "variable": {
                    "value": "ub",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "w.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argsort_127": {
                "variable": {
                    "value": "indr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w).clamp(min=-1000000000000.0, max=1000000000000.0)",
                            "Call"
                        ],
                        [
                            "(1 / w).abs().clamp_max(1000000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_128": {
                "variable": {
                    "value": "indr_rev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.argsort(r, dim=1)",
                            "Call"
                        ],
                        [
                            "indr[c2].gather(1, lb2.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_132": {
                "variable": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_132": {
                "variable": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "indr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.argsort(r, dim=1)",
                            "Call"
                        ],
                        [
                            "indr[c2].gather(1, lb2.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "ds2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c.unsqueeze(-1), ds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_134": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((c.unsqueeze(-1), ds), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_like_139": {
                "variable": {
                    "value": "ub",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "s.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "floor_40": {
                "variable": {
                    "value": "counter4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_47": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b_ - b2 > 0",
                            "Compare"
                        ],
                        [
                            "(w * t).sum(1) - b",
                            "BinOp"
                        ],
                        [
                            "(w * t).sum(1) - b",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "counter4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_48": {
                "variable": {
                    "value": "ub",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b_ - b2 > 0",
                            "Compare"
                        ],
                        [
                            "(w * t).sum(1) - b",
                            "BinOp"
                        ],
                        [
                            "(w * t).sum(1) - b",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "ub",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, s.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "counter4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_53": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_96": {
                "variable": {
                    "value": "counter4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_99": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c3",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "(d * w).sum(dim=1) + c > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) + c_ > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "counter4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_100": {
                "variable": {
                    "value": "ub",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c3",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "(d * w).sum(dim=1) + c > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) + c_ > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ub",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, s.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "counter4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_144": {
                "variable": {
                    "value": "counter4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_147": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c3",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "(d * w).sum(dim=1) + c > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) + c_ > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "counter4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ],
                        [
                            "lb.long()",
                            "Call"
                        ],
                        [
                            "torch.zeros(c2.sum(), device=device)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, counter4, lb)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_148": {
                "variable": {
                    "value": "ub",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "c3",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "(d * w).sum(dim=1) + c > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) + c_ > 0",
                            "Compare"
                        ],
                        [
                            "s_.gather(1, counter2).squeeze(1) > 0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ub",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, w.shape[1] - 1)",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ],
                        [
                            "torch.full_like(lb, s.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.where(c3, ub, counter4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "counter4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ],
                        [
                            "torch.floor((lb + ub) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_154": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_155": {
                "variable": {
                    "value": "u2",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ],
                        [
                            "points_to_project.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "u2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_29": {
                "input": {
                    "value": "bs2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-ws * d.gather(1, indp2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_81": {
                "input": {
                    "value": "w3s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(w ** 2).gather(1, indr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_57": {
                "input": {
                    "value": "lmbd_opt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp_min((b[c_l] - sb[c_l, -1]) / -s[c_l, -1], min=0).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp_min((b[c2] - sb[c2, lb]) / -s[c2, lb], min=0).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_57": {
                "input": {
                    "value": "-lmbd_opt",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_84": {
                "input": {
                    "value": "(-rs2 + rs) * ws",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "autoattack/fab_pt.py": {
        "torch": {
            "max_75": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[y.shape[-1], *imgs.size()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "grad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "g2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([y.shape[-1], *imgs.size()]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.transpose(g2, 0, 1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_105": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_153": {
                "variable": {
                    "value": "u1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "res_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_336": {
                "variable": {
                    "value": "u1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_340": {
                "variable": {
                    "value": "res_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_339": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_484": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_489": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_490": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_100": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_236": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_246": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_250": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_419": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_420": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_430": {
                "variable": {
                    "value": "a0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_434": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_174": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_357": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_505": {
                "variable": {
                    "value": "acc_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_185": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_250": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_368": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_434": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_530": {
                "variable": {
                    "value": "acc_curr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_98": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_99": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_165": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_222": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_223": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_224": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_253": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_348": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_406": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_407": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_408": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_430": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_437": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_227": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_229": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_411": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_412": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_413": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_166": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_166": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_233": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_234": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_349": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_349": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_416": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_417": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_418": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_175": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_175": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_358": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_358": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_186": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_186": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_369": {
                "input": {
                    "value": "res2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_369": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_167": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_350": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_176": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_359": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_187": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_370": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "autoattack/square.py": {
        "torch": {
            "cross_entropy_72": {
                "variable": {
                    "value": "xent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(y_pred)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "self.random_target_classes(y_pred, n_classes)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[s, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_113": {
                "input": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.random_int(0, len(l))",
                            "Call"
                        ],
                        [
                            "2 * torch.rand(shape).to(self.device) - 1",
                            "BinOp"
                        ],
                        [
                            "low + (high - low) * torch.rand(shape).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "x.abs().view(x.shape[0], -1).max(1)[0]",
                            "Subscript"
                        ],
                        [
                            "(x ** 2).view(x.shape[0], -1).sum(-1).sqrt()",
                            "Call"
                        ],
                        [
                            "(x ** 2).view(x.shape[0], -1).sum(-1).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_412": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_413": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_155": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_197": {
                "variable": {
                    "value": "x_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.eps * self.random_choice([x.shape[0], c, 1, w])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "n_queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_112": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_116": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "new_deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[c, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_223": {
                "variable": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_new, x_curr - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_225": {
                "variable": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_best_curr + new_deltas",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_new, x_curr - self.eps), x_curr + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_new, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_curr + self.normalize(delta_curr) * self.eps, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_239": {
                "variable": {
                    "value": "idx_improved",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_improved",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ],
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_265": {
                "variable": {
                    "value": "delta_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_278": {
                "variable": {
                    "value": "x_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.normalize(delta_init) * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_281": {
                "variable": {
                    "value": "n_queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "new_deltas_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ],
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_310": {
                "variable": {
                    "value": "new_deltas_mask_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ],
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_314": {
                "variable": {
                    "value": "mask_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_deltas_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(x_curr)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_317": {
                "variable": {
                    "value": "new_deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x_curr.shape[0], c, s, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_332": {
                "variable": {
                    "value": "x_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr + self.normalize(delta_curr) * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_348": {
                "variable": {
                    "value": "idx_improved",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_improved",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ],
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_223": {
                "input": {
                    "value": "x_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x_best_curr + new_deltas",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_new, x_curr - self.eps), x_curr + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_new, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_curr + self.normalize(delta_curr) * self.eps, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_325": {
                "input": {
                    "value": "(self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_327": {
                "input": {
                    "value": "new_deltas",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([c, h, w]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([x_curr.shape[0], c, s, s]).to(self.device)",
                            "Call"
                        ],
                        [
                            "new_deltas + old_deltas",
                            "BinOp"
                        ],
                        [
                            "new_deltas / (1e-12 + (new_deltas ** 2).sum(dim=(-2, -1), keepdim=True).sqrt()) * (torch.max((self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2, torch.zeros_like(new_deltas)) / c + norms_windows ** 2).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_326": {
                "input": {
                    "value": "new_deltas",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros([c, h, w]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([x_curr.shape[0], c, s, s]).to(self.device)",
                            "Call"
                        ],
                        [
                            "new_deltas + old_deltas",
                            "BinOp"
                        ],
                        [
                            "new_deltas / (1e-12 + (new_deltas ** 2).sum(dim=(-2, -1), keepdim=True).sqrt()) * (torch.max((self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2, torch.zeros_like(new_deltas)) / c + norms_windows ** 2).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cifar_c_eval.py": {
        "torch": {
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "linear_adv.py": {
        "torch": {
            "SummaryWriter_220": {
                "variable": {
                    "value": "writter",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "METHOD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'LinearAT'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "linear_std.py": {
        "torch": {
            "SummaryWriter_192": {
                "variable": {
                    "value": "writter",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "METHOD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'LinearSTD'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "linear_trades.py": {
        "torch": {
            "SummaryWriter_223": {
                "variable": {
                    "value": "writter",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "METHOD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'LinearTRADES'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "models/base.py": {
        "torch": {
            "BatchNorm1d_41": {
                "variable": {
                    "value": "self.bn_clean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_42": {
                "variable": {
                    "value": "self.bn_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn_clean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/builder.py": {
        "torch": {
            "normalize_42": {
                "variable": {
                    "value": "self.queue_clean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue_clean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_46": {
                "variable": {
                    "value": "self.queue_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.queue_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_80": {
                "variable": {
                    "value": "query_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.projector_q(self.encoder_q(inputs_q))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_85": {
                "variable": {
                    "value": "key_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.projector_k(self.encoder_k(inputs_k))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_100": {
                "variable": {
                    "value": "key_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.projector_k(self.encoder_k(inputs_k))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos, logits_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos, logits_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos, logits_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos, logits_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos, logits_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos, logits_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "dim_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "K1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "dim_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "K2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_62": {
                "start": {
                    "value": "ptr",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.queue_adv_ptr[0]",
                            "Subscript"
                        ],
                        [
                            "self.queue_clean_ptr[0]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "ptr + batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_67": {
                "start": {
                    "value": "ptr",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.queue_adv_ptr[0]",
                            "Subscript"
                        ],
                        [
                            "self.queue_clean_ptr[0]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "ptr + batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar.py": {
        "torch": {
            "ReLU_40": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "128 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/components.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_feature, dim_mlp)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "dim_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_mlp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "dim_mlp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_head",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "randn_281": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_154": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_162": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_222": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(10, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pre_train.py": {
        "torch": {
            "SummaryWriter_184": {
                "variable": {
                    "value": "writter",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "METHOD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'PreTrain'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "src/attacks.py": {
        "torch": {}
    },
    "src/base.py": {
        "torch": {
            "zeros_59": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs_q.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos, logits_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_q, inputs_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "logits_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos_a, logits_neg_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_q, inputs_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "logits_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos_a, logits_neg_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_q, inputs_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "logits_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos_a, logits_neg_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_q, inputs_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "logits_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos_a, logits_neg_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_q, inputs_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "logits_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos_a, logits_neg_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_q, inputs_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "logits_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos_a, logits_neg_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_q, inputs_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ],
                        [
                            "inputs_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "logits_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_pos_a, logits_neg_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_56": {
                "obj": {
                    "value": "self.model.encoder_q.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_262": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/criteria.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "all_false",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "all_false",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.size(0)",
                            "Call"
                        ],
                        [
                            "logits.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets.py": {
        "torch": {}
    },
    "src/loadopts.py": {
        "torch": {
            "tensor_91": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "MEANS[dataset_type]",
                            "Subscript"
                        ],
                        [
                            "MEANS[dataset_type]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(mean)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "STDS[dataset_type]",
                            "Subscript"
                        ],
                        [
                            "STDS[dataset_type]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(std)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_238": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "new_imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[normalizer(img) for img in imgs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Adam_240": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss_zoo.py": {
        "torch": {
            "log_softmax_19": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_20": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(targets, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_14": {
                "input": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'batchmean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "kl_div_21": {
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(targets, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'batchmean'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "paths",
                            "Name"
                        ],
                        [
                            "path + '/model-optim-lr_sch-epoch.tar'",
                            "BinOp"
                        ],
                        [
                            "path + '/model-optim-lr_sch-epoch.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_101": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path + '/README.md'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path + '/README.md'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_118": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict(), 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "paths",
                            "Name"
                        ],
                        [
                            "path + '/model-optim-lr_sch-epoch.tar'",
                            "BinOp"
                        ],
                        [
                            "path + '/model-optim-lr_sch-epoch.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_143": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_148": {
                "input": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "models",
                            "Name"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transfer_attack.py": {
        "torch": {
            "SummaryWriter_165": {
                "variable": {
                    "value": "writter",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "METHOD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'Transfer'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "white_box_attack.py": {
        "torch": {
            "linspace_90": {
                "variable": {
                    "value": "epsilons",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "opts.epsilon_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "opts.epsilon_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "opts.epsilon_times",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_147": {
                "variable": {
                    "value": "writter",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename_suffix": {
                    "value": "METHOD",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'WhiteBox'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    }
}