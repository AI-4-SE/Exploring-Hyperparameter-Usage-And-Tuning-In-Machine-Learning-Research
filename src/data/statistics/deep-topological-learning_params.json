{
    "cola/_utils.py": {
        "sklearn": {
            "TSNE_82": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_126": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_182": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Variable_12": {
                "variable": {
                    "value": "input_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmin_14": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "input_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_219": {
                "variable": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(A), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_norms_A, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_222": {
                "variable": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(B), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_norms_B, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_13": {
                "a": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_51": {
                "a": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ],
                        [
                            "P",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_219": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_222": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argsort_52": {
                "values": {
                    "value": "D.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_225": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/clustering.py": {
        "sklearn": {
            "make_circles_24": {
                "variable": {
                    "value": "noisy_circles",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_moons_26": {
                "variable": {
                    "value": "noisy_moons",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_blobs_27": {
                "variable": {
                    "value": "blobs",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_blobs_30": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "170",
                            "int"
                        ]
                    ]
                }
            },
            "make_blobs_34": {
                "variable": {
                    "value": "varied",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "cluster_std": {
                    "value": "[1.0, 2.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "170",
                            "int"
                        ]
                    ]
                }
            },
            "load_digits_49": {
                "variable": {
                    "value": "(x_digits, y_digits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_87": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "MobileNet_80": {
                "variable": {
                    "value": "base_model",
                    "type": "variable",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "IMG_SHAPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(32, 32, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/data_fusion.py": {
        "sklearn": {
            "StandardScaler_58": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/dimensionality.py": {
        "sklearn": {
            "make_classification_96": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples",
                            "variable"
                        ]
                    ]
                },
                "n_features": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "progress_bar_2",
                            "variable"
                        ]
                    ]
                },
                "class_sep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "ni2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(nf * ni)",
                            "Call"
                        ]
                    ]
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "hypercube": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "progress_bar_3",
                            "variable"
                        ]
                    ]
                }
            },
            "StandardScaler_100": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_173": {
                "variable": {
                    "value": "model_km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(has_samples)",
                            "Call"
                        ]
                    ]
                },
                "init": {
                    "value": "random",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "progress_bar_3",
                            "variable"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Input_108": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nf,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.002",
                            "float"
                        ]
                    ]
                }
            },
            "Input_138": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nf,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "Input_155": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nf,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_deep_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.002",
                            "float"
                        ]
                    ]
                }
            },
            "set_seed_95": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "progress_bar_3",
                            "variable"
                        ]
                    ]
                }
            },
            "clear_session_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/dimensionality_old.py": {
        "sklearn": {
            "make_classification_139": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples",
                            "variable"
                        ]
                    ]
                },
                "n_features": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "progress_bar_2",
                            "variable"
                        ]
                    ]
                },
                "class_sep": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "ni2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(nf * ni)",
                            "Call"
                        ]
                    ]
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "hypercube": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(N)",
                            "Call"
                        ],
                        [
                            "progress_bar_3",
                            "variable"
                        ]
                    ]
                }
            },
            "StandardScaler_142": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_176": {
                "variable": {
                    "value": "model_km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(ns / 20)",
                            "Call"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "init": {
                    "value": "random",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(N)",
                            "Call"
                        ],
                        [
                            "progress_bar_3",
                            "variable"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "reduce_sum_24": {
                "variable": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(A), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_norms_A, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_27": {
                "variable": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(B), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_norms_B, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmin_35": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_24": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_27": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_34": {
                "initial_value": {
                    "value": "model.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_178": {
                "variable": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_squared_dist(tf.Variable(X), tf.Variable(model.cluster_centers_))",
                            "Call"
                        ],
                        [
                            "_squared_dist(tf.Variable(X), tf.Variable(model_km.cluster_centers_))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_179": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_30": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_177": {
                "initial_value": {
                    "value": "model_km.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/dimensionality_samples.py": {
        "sklearn": {
            "make_classification_92": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "progress_bar_2",
                            "variable"
                        ]
                    ]
                },
                "n_features": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "variable"
                        ]
                    ]
                },
                "class_sep": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "ni2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(nf * ni)",
                            "Call"
                        ]
                    ]
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "hypercube": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "progress_bar_3",
                            "variable"
                        ]
                    ]
                }
            },
            "StandardScaler_95": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_155": {
                "variable": {
                    "value": "model_km",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(has_samples)",
                            "Call"
                        ]
                    ]
                },
                "init": {
                    "value": "random",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "progress_bar_3",
                            "variable"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Input_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nf,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.008",
                            "float"
                        ]
                    ]
                }
            },
            "Input_125": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nf,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / ns",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Input_139": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nf,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / ns",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clear_session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/exp_cole.py": {
        "sklearn": {
            "make_circles_32": {
                "variable": {
                    "value": "noisy_circles",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "int"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_moons_33": {
                "variable": {
                    "value": "noisy_moons",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "int"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_blobs_34": {
                "variable": {
                    "value": "blobs",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "int"
                        ]
                    ]
                },
                "centers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_blobs_37": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "170",
                            "int"
                        ]
                    ]
                }
            },
            "make_blobs_41": {
                "variable": {
                    "value": "varied",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "int"
                        ]
                    ]
                },
                "cluster_std": {
                    "value": "[1.0, 2.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "170",
                            "int"
                        ]
                    ]
                }
            },
            "load_digits_66": {
                "variable": {
                    "value": "(x_digits, y_digits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_130": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Input_158": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(d,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_165": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.008",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/nonstationary.py": {
        "sklearn": {
            "StandardScaler_61": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "experiments/theory_validation.py": {
        "sklearn": {
            "make_circles_45": {
                "variable": {
                    "value": "noisy_circles",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_moons_47": {
                "variable": {
                    "value": "noisy_moons",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_blobs_48": {
                "variable": {
                    "value": "blobs",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_blobs_51": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "170",
                            "int"
                        ]
                    ]
                }
            },
            "make_blobs_55": {
                "variable": {
                    "value": "varied",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "cluster_std": {
                    "value": "[1.0, 2.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "170",
                            "int"
                        ]
                    ]
                }
            },
            "make_classification_74": {
                "variable": {
                    "value": "(Xl, yl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "n_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "class_sep": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "hypercube": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_classification_77": {
                "variable": {
                    "value": "(Xh, yh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "int"
                        ]
                    ]
                },
                "n_features": {
                    "value": "3000",
                    "type": "int",
                    "possible_values": []
                },
                "class_sep": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "2990",
                    "type": "int",
                    "possible_values": []
                },
                "hypercube": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_digits_81": {
                "variable": {
                    "value": "(x_digits, y_digits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_101": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "reduce_sum_26": {
                "variable": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_norms_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(A), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_norms_A, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_29": {
                "variable": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "row_norms_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(B), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(row_norms_B, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_29": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_129": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nf,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.008",
                            "float"
                        ]
                    ]
                }
            },
            "Input_154": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nf,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_156": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8e-06",
                            "float"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_cola.py": {
        "sklearn": {
            "make_circles_25": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StandardScaler_26": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Input_35": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(d,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_vanilla",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.008",
                            "float"
                        ]
                    ]
                }
            },
            "Input_58": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(d,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8e-05",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "cola/_base.py": {
        "tensorflow": {
            "MeanAbsoluteError_7": {
                "variable": {
                    "value": "mae_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_8": {
                "variable": {
                    "value": "loss_tracker",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_15": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_features,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_22": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input(shape=(n_features,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Dense(k_prototypes, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(k_prototypes, use_bias=False)(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "units": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_21": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cola/_basex.py": {
        "tensorflow": {
            "MeanAbsoluteError_7": {
                "variable": {
                    "value": "mae_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_8": {
                "variable": {
                    "value": "loss_tracker",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_15": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_features,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_23": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input(shape=(n_features,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Dense(k_prototypes, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(k_prototypes, activation='relu', use_bias=False)(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "softm",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.base_model(y_latent, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_37": {
                "variable": {
                    "value": "maxd",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "softm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.softmax(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(1 / maxd) * maxd",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dense_17": {
                "units": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_20": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_38": {
                "x": {
                    "value": "1 / maxd",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cola/_dual.py": {
        "tensorflow": {
            "MeanAbsoluteError_9": {
                "variable": {
                    "value": "mae_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_10": {
                "variable": {
                    "value": "loss_tracker",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_17": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_24": {
                "variable": {
                    "value": "self.dual_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input(shape=(n_samples,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Dense(k_prototypes)(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(k_prototypes)(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_20": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_21": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_23": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientTape_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_37": {
                "a": {
                    "value": "y_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(x, training=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cola/_dualx.py": {
        "tensorflow": {
            "MeanAbsoluteError_7": {
                "variable": {
                    "value": "mae_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mae",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_8": {
                "variable": {
                    "value": "loss_tracker",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_15": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_23": {
                "variable": {
                    "value": "self.dual_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input(shape=(n_samples,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Dense(k_prototypes)(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(k_prototypes, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(self.dual_model.weights[-1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_min_34": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.dual_model.weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_35": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Dense(k_prototypes)(x)",
                            "Call"
                        ],
                        [
                            "layers.Dense(k_prototypes, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(self.dual_model.weights[-1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_17": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_18": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_19": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNormalization_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_22": {
                "units": {
                    "value": "k_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cola/_loss.py": {
        "tensorflow": {
            "reduce_min_10": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_11": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_12": {
                "variable": {
                    "value": "prototype_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_13": {
                "variable": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_min_25": {
                "variable": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_26": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_33": {
                "variable": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_34": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_131": {
                "variable": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(1, Z)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(v, [Z2.shape[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[Z2.shape[1], v.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(v, [Z2.shape[1]]), [Z2.shape[1], v.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v2)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_136": {
                "variable": {
                    "value": "Zh",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(1, Z)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(v, [Z2.shape[1]]), [Z2.shape[1], v.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_137": {
                "variable": {
                    "value": "Ph",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Zh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(Z2, v2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "Ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Zh)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_165": {
                "variable": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ],
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_176": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "adjacency_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((N, N))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_177": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_min(D, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_178": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(adjacency_matrix, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.norm(E, 2)",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_16": {
                "variable": {
                    "value": "ai",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_points - input[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_17": {
                "variable": {
                    "value": "maxi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ai",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(cluster_points - input[i], ord=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_18": {
                "variable": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.add(si, (b[i] - ai) / maxi)",
                            "Call"
                        ],
                        [
                            "-tf.divide(si, N)",
                            "UnaryOp"
                        ],
                        [
                            "s[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "(b[i] - ai) / maxi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_9": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "divide_19": {
                "x": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.add(si, (b[i] - ai) / maxi)",
                            "Call"
                        ],
                        [
                            "-tf.divide(si, N)",
                            "UnaryOp"
                        ],
                        [
                            "s[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_24": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_32": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_130": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_134": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(Z2, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[Z2.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_145": {
                "tensor": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist(input, tf.transpose(output))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_164": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_145": {
                "a": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(output, Ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "argsort_166": {
                "values": {
                    "value": "D.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}