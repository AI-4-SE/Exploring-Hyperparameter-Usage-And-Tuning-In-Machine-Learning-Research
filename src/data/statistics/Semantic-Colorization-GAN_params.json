{
    "evaluation/indexes_traditional.py": {
        "sklearn": {
            "precision_score_81": {
                "variable": {
                    "value": "pscore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "scr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_94": {
                "variable": {
                    "value": "rscore",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "scr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_107": {
                "variable": {
                    "value": "f1score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "scr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(srcpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(srcpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(scr, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(scr / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "scr.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "io.imread(dstpath)",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE) / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ],
                        [
                            "cv2.imread(dstpath, cv2.IMREAD_GRAYSCALE)",
                            "Call"
                        ],
                        [
                            "cv2.resize(dst, (scale, scale))",
                            "Call"
                        ],
                        [
                            "np.round(dst / 255.0).astype(np.int)",
                            "Call"
                        ],
                        [
                            "dst.flatten()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "global feature network pre-train/dataset.py": {
        "torch": {
            "from_numpy_55": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(imgpath).convert('RGB')",
                            "Call"
                        ],
                        [
                            "Image.open('temp.jpg').convert('RGB')",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "img + noise",
                            "BinOp"
                        ],
                        [
                            "np.clip(img, 0, 255)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "img[rand_h:rand_h + self.opt.crop_size, rand_w:rand_w + self.opt.crop_size, :]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(img, (self.opt.train_size, self.opt.train_size), interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "(img.astype(np.float32) - 128.0) / 128.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "img[[0], :, :] * 0.299 + img[[1], :, :] * 0.587 + img[[2], :, :] * 0.114",
                            "BinOp"
                        ],
                        [
                            "img[[0], :, :] * 0.299 + img[[1], :, :] * 0.587 + img[[2], :, :] * 0.114",
                            "BinOp"
                        ],
                        [
                            "img * (1 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((img, mask), 0)",
                            "Call"
                        ],
                        [
                            "img * (1 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((img, mask), 0)",
                            "Call"
                        ],
                        [
                            "Image.open(imgpath).convert('RGB')",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "img[rand_h:rand_h + self.opt.crop_size, rand_w:rand_w + self.opt.crop_size, :]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(img, (self.opt.train_size, self.opt.train_size), interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "(img.astype(np.float32) - 128.0) / 128.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "img[[0], :, :] * 0.299 + img[[1], :, :] * 0.587 + img[[2], :, :] * 0.114",
                            "BinOp"
                        ],
                        [
                            "img[[0], :, :] * 0.299 + img[[1], :, :] * 0.587 + img[[2], :, :] * 0.114",
                            "BinOp"
                        ],
                        [
                            "img * (1 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((img, mask), 0)",
                            "Call"
                        ],
                        [
                            "img * (1 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((img, mask), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_55": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(imgpath).convert('RGB')",
                            "Call"
                        ],
                        [
                            "Image.open('temp.jpg').convert('RGB')",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "img + noise",
                            "BinOp"
                        ],
                        [
                            "np.clip(img, 0, 255)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "img[rand_h:rand_h + self.opt.crop_size, rand_w:rand_w + self.opt.crop_size, :]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(img, (self.opt.train_size, self.opt.train_size), interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "(img.astype(np.float32) - 128.0) / 128.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "img[[0], :, :] * 0.299 + img[[1], :, :] * 0.587 + img[[2], :, :] * 0.114",
                            "BinOp"
                        ],
                        [
                            "img[[0], :, :] * 0.299 + img[[1], :, :] * 0.587 + img[[2], :, :] * 0.114",
                            "BinOp"
                        ],
                        [
                            "img * (1 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((img, mask), 0)",
                            "Call"
                        ],
                        [
                            "img * (1 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((img, mask), 0)",
                            "Call"
                        ],
                        [
                            "Image.open(imgpath).convert('RGB')",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, (W_out, H_out))",
                            "Call"
                        ],
                        [
                            "img[rand_h:rand_h + self.opt.crop_size, rand_w:rand_w + self.opt.crop_size, :]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(img, (self.opt.train_size, self.opt.train_size), interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ],
                        [
                            "(img.astype(np.float32) - 128.0) / 128.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img).permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "img[[0], :, :] * 0.299 + img[[1], :, :] * 0.587 + img[[2], :, :] * 0.114",
                            "BinOp"
                        ],
                        [
                            "img[[0], :, :] * 0.299 + img[[1], :, :] * 0.587 + img[[2], :, :] * 0.114",
                            "BinOp"
                        ],
                        [
                            "img * (1 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((img, mask), 0)",
                            "Call"
                        ],
                        [
                            "img * (1 - mask) + mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat((img, mask), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_202": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scalarlist[index]",
                            "Subscript"
                        ],
                        [
                            "int(target) - 1",
                            "BinOp"
                        ],
                        [
                            "np.array(target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ],
                        [
                            "self.targetlist[index]",
                            "Subscript"
                        ],
                        [
                            "int(target) - 1",
                            "BinOp"
                        ],
                        [
                            "np.array(target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_82": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_215": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_217": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=1)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox2mask(shape=self.opt.train_size, margin=self.opt.margin, bbox_shape=self.opt.bbox_shape, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "self.random_ff_mask(shape=self.opt.train_size, max_angle=self.opt.max_angle, max_len=self.opt.max_len, max_width=self.opt.max_width, times=self.opt.mask_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).contiguous()",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((height, width), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_229": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scalarlist[index]",
                            "Subscript"
                        ],
                        [
                            "int(target) - 1",
                            "BinOp"
                        ],
                        [
                            "np.array(target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ],
                        [
                            "self.targetlist[index]",
                            "Subscript"
                        ],
                        [
                            "int(target) - 1",
                            "BinOp"
                        ],
                        [
                            "np.array(target)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "global feature network pre-train/network_ResNet.py": {
        "torch": {
            "randn_212": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_213": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_221": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_147": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_183": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_157": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "global feature network pre-train/network_VGG.py": {
        "torch": {
            "MaxPool2d_52": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_67": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_111": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_115": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_119": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_123": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_164": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_167": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_171": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_175": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_179": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_282": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_182": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_235": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_236": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_238": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_241": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_283": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_284": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_286": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_287": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_289": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_331": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_332": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_334": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_335": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_337": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "global feature network pre-train/network_module.py": {
        "torch": {
            "interpolate_172": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, style)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, style)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x * var",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, style)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, style)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x * var",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dLayer(in_channels, out_channels, kernel_size, stride, padding, dilation, pad_type, activation, norm, sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_279": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_280": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_283": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_345": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, style)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, style)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x * var",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x, style)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x, style)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "x - mean",
                            "BinOp"
                        ],
                        [
                            "x * var",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_347": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_15": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_73": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_122": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_134": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_199": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_307": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).uniform_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_308": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_17": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_27": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_39": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_75": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_88": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_124": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_136": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_201": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ZeroPad2d_19": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_41": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ZeroPad2d_77": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_90": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_138": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_203": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mv_257": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_258": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_43": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SELU_92": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SELU_140": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SELU_205": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_257": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_45": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_94": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_142": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_207": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_96": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_144": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_209": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "global feature network pre-train/trainer.py": {
        "torch": {
            "device_count_22": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_47": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ImageNetTrainSet(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ImageNetValSet(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_38": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_network(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_network(opt)",
                            "Call"
                        ],
                        [
                            "net.eval()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_129": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_network(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_network(opt)",
                            "Call"
                        ],
                        [
                            "net.eval()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "torch.softmax(output, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "net.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, modelname)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_folder, modelname)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "global feature network pre-train/utils.py": {
        "torch": {
            "load_207": {
                "variable": {
                    "value": "pretrained_net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.finetune_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train on multispectral images/dataset.py": {
        "torch": {
            "randn_123": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b, b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_128": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "lwir_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lwir_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(lwir_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(lwir_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "lwir_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(lwir_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cv2.imread(lwir_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(lwir_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "lwir_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(lwir_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_66": {
                "variable": {
                    "value": "lwir_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "visible_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "visible_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(visible_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(visible_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "visible_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(visible_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cv2.imread(visible_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(visible_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "visible_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(visible_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_67": {
                "variable": {
                    "value": "visible_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "lwir_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lwir_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(lwir_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(lwir_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "lwir_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(lwir_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cv2.imread(lwir_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(lwir_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "lwir_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(lwir_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_112": {
                "variable": {
                    "value": "lwir_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "visible_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "visible_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(visible_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(visible_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "visible_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(visible_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cv2.imread(visible_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(visible_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "visible_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(visible_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_113": {
                "variable": {
                    "value": "visible_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "saliency_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "saliency_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(saliency_path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(saliency_img, (self.opt.crop_size, self.opt.crop_size))",
                            "Call"
                        ],
                        [
                            "saliency_img.astype(np.float) / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(saliency_img).float().permute(2, 0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_114": {
                "variable": {
                    "value": "saliency_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train on multispectral images/network.py": {
        "torch": {
            "randn_324": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_328": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "down6_with_gf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down6, global_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "up1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down8, up1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down7, up2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "up3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down6, up3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "up4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down5, up4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "up5_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down4, up5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "up6_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down3, up6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "up7_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down2, up7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down1, up8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "down6_with_gf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down6, global_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "up1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down8, up1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down7, up2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "up3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down6, up3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "up4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down5, up4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "up5_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down4, up5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "up6_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down3, up6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "up7_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down2, up7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down1, up8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_A, img_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_277": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_279": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_281": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_284": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_286": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_287": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_289": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train on multispectral images/network_module.py": {
        "torch": {
            "randn_495": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv * gated_mask",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dLayer(in_channels, latent_channels, kernel_size, stride, padding, dilation, pad_type, activation, norm, sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.path2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResConv2dLayer(in_channels=in_channels, latent_channels=latent_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, pad_type=pad_type, activation=activation, norm=norm, sn=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.path3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResConv2dLayer(in_channels=in_channels, latent_channels=latent_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, pad_type=pad_type, activation=activation, norm=norm, sn=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_171": {
                "variable": {
                    "value": "path0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv * gated_mask",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "self.path2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResConv2dLayer(in_channels=in_channels, latent_channels=latent_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, pad_type=pad_type, activation=activation, norm=norm, sn=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "self.path3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResConv2dLayer(in_channels=in_channels, latent_channels=latent_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, pad_type=pad_type, activation=activation, norm=norm, sn=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_194": {
                "variable": {
                    "value": "path0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv * gated_mask",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "variable": {
                    "value": "self.Gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "stacked_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_, prev_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_238": {
                "variable": {
                    "value": "in_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(in_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_239": {
                "variable": {
                    "value": "remember_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "remember_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(remember_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_240": {
                "variable": {
                    "value": "out_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_243": {
                "variable": {
                    "value": "cell_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(cell_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_326": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_327": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_330": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_351": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_353": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_354": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_355": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_371": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_377": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_391": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_392": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_394": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_410": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_416": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_476": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_15": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_262": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).uniform_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_263": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_431": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_441": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_453": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_474": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_475": {
                "variable": {
                    "value": "self.mask_conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReplicationPad2d_17": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_27": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_39": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_247": {
                "input": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "remember_gate * prev_cell + in_gate * cell_gate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_354": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_433": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_443": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_455": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ZeroPad2d_19": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_41": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mv_304": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_305": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_435": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_457": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_471": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_472": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_43": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_304": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SELU_459": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_45": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_461": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.hidden_size] + list(spatial_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.hidden_size] + list(spatial_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sigmoid_463": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train on multispectral images/trainer.py": {
        "torch": {
            "device_count_27": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_33": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_204": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_210": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_211": {
                "variable": {
                    "value": "criterion_MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_232": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_233": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_285": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_392": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_398": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_419": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_420": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_472": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_473": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_570": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_576": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_597": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_598": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_650": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_with_Sal_dataset(opt, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_651": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ],
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_220": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_222": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_224": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_407": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_409": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_411": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_585": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_587": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_589": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_120": {
                "variable": {
                    "value": "true_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_sal, true_sal, true_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "fake_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_sal, fake_sal, fake_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "true_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_sal, true_sal, true_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "fake_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_sal, fake_sal, fake_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_490": {
                "variable": {
                    "value": "true_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_sal, true_sal, true_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "fake_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_sal, fake_sal, fake_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_693": {
                "variable": {
                    "value": "true_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_sal, true_sal, true_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_725": {
                "variable": {
                    "value": "fake_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_sal, fake_sal, fake_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_673": {
                "outputs": {
                    "value": "d_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(input_samples, interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(alpha * real_samples + (1 - alpha) * fake_samples).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tensor(np.zeros((true_L.shape[0], 1, 30, 30)))",
                            "Call"
                        ],
                        [
                            "Variable(Tensor(real_samples.shape[0], 1, 30, 30).fill_(1.0), requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_506": {
                "input": {
                    "value": "true_scalar_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_530": {
                "input": {
                    "value": "fake_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_736": {
                "input": {
                    "value": "fake_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_75": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_79": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_88": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_258": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_262": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_267": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_445": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_449": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_454": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_458": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_623": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_627": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_632": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_636": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_712": {
                "input": {
                    "value": "true_scalar_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train on multispectral images/utils.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.perceptual_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_151": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_157": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred.clone().data.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "pred[0]",
                            "Subscript"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target, dim=0)",
                            "Call"
                        ],
                        [
                            "target.clone().data.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "target[0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_159": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "target - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_19": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.global_feature_network_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_152": {
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(target - pred, target - pred)",
                            "Call"
                        ],
                        [
                            "torch.mul(target - pred, target - pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_160": {
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(target - pred, target - pred)",
                            "Call"
                        ],
                        [
                            "torch.mul(target - pred, target - pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train on multispectral images/validation.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.NIR_Colorization_dataset(opt, 'val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/dataset.py": {
        "torch": {
            "randn_102": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b, b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_60": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "sal",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sal / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "sal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "grayimg / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "variable": {
                    "value": "grayimg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_93": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/network.py": {
        "torch": {
            "randn_324": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_328": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(a)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "down6_with_gf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down6, global_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "up1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down8, up1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down7, up2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "up3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down6, up3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "up4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down5, up4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "up5_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down4, up5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "up6_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down3, up6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "up7_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down2, up7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down1, up8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "down6_with_gf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down6, global_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "up1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down8, up1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down7, up2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "up3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down6, up3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "up4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down5, up4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "up5_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down4, up5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "up6_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down3, up6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "up7_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down2, up7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(down1, up8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_A, img_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_277": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_279": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_281": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_284": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_286": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_287": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_289": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/network_module.py": {
        "torch": {
            "randn_495": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv * gated_mask",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2dLayer(in_channels, latent_channels, kernel_size, stride, padding, dilation, pad_type, activation, norm, sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.path2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResConv2dLayer(in_channels=in_channels, latent_channels=latent_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, pad_type=pad_type, activation=activation, norm=norm, sn=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.path3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResConv2dLayer(in_channels=in_channels, latent_channels=latent_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, pad_type=pad_type, activation=activation, norm=norm, sn=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_171": {
                "variable": {
                    "value": "path0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv * gated_mask",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "self.path2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResConv2dLayer(in_channels=in_channels, latent_channels=latent_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, pad_type=pad_type, activation=activation, norm=norm, sn=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "self.path3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResConv2dLayer(in_channels=in_channels, latent_channels=latent_channels, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, pad_type=pad_type, activation=activation, norm=norm, sn=sn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_194": {
                "variable": {
                    "value": "path0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.scale_factor, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv2d(x)",
                            "Call"
                        ],
                        [
                            "(x - mean) / (std + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv * gated_mask",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "variable": {
                    "value": "self.Gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "stacked_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_, prev_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_238": {
                "variable": {
                    "value": "in_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(in_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_239": {
                "variable": {
                    "value": "remember_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "remember_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(remember_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_240": {
                "variable": {
                    "value": "out_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_243": {
                "variable": {
                    "value": "cell_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(cell_gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_326": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_327": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_330": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_351": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_353": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_354": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_355": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_371": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_377": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_390": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_391": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_392": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim // latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_394": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_410": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(batchsize, -1, height * width).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_416": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ],
                        [
                            "self.value_conv(x).view(batchsize, -1, height * width)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_476": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_15": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_262": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features).uniform_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_263": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_431": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_441": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_453": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_474": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_475": {
                "variable": {
                    "value": "self.mask_conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReplicationPad2d_17": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_27": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_39": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_247": {
                "input": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "remember_gate * prev_cell + in_gate * cell_gate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_354": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_433": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_443": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_455": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ZeroPad2d_19": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_41": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mv_304": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_305": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_435": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_457": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_471": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_472": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_43": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_304": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SELU_459": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_45": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_461": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.hidden_size] + list(spatial_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, self.hidden_size] + list(spatial_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sigmoid_463": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/trainer.py": {
        "torch": {
            "device_count_27": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_33": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_169": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_175": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_176": {
                "variable": {
                    "value": "criterion_MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_198": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_248": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_354": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_360": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_381": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_382": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_432": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_529": {
                "variable": {
                    "value": "gpu_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_535": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_556": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_557": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.b1, opt.b2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_607": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ],
                        [
                            "dataset.ColorizationDataset(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_185": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_187": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_189": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_369": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_371": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_373": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_544": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_generator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator.cuda()",
                            "Call"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ],
                        [
                            "generator",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_546": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_discriminator(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ],
                        [
                            "discriminator.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_548": {
                "variable": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "perceptualnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "utils.create_perceptualnet(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(perceptualnet)",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ],
                        [
                            "perceptualnet.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "true_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_sal, true_sal, true_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "fake_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_sal, fake_sal, fake_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "true_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_sal, true_sal, true_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "fake_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_sal, fake_sal, fake_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "true_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_sal, true_sal, true_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_478": {
                "variable": {
                    "value": "fake_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_sal, fake_sal, fake_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_649": {
                "variable": {
                    "value": "true_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_sal, true_sal, true_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_681": {
                "variable": {
                    "value": "fake_sal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fake_sal, fake_sal, fake_sal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_629": {
                "outputs": {
                    "value": "d_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D(input_samples, interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(alpha * real_samples + (1 - alpha) * fake_samples).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Tensor(np.zeros((true_L.shape[0], 1, 30, 30)))",
                            "Call"
                        ],
                        [
                            "Variable(Tensor(real_samples.shape[0], 1, 30, 30).fill_(1.0), requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_465": {
                "input": {
                    "value": "true_scalar_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_489": {
                "input": {
                    "value": "fake_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_692": {
                "input": {
                    "value": "fake_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, fake_RGB)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_75": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_79": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_88": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_223": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_227": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_232": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_236": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_407": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_411": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_416": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_420": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_582": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_586": {
                "obj": {
                    "value": "generator.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_591": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_595": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_path, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_668": {
                "input": {
                    "value": "true_scalar_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ],
                        [
                            "discriminator(true_L, true_RGB)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/utils.py": {
        "torch": {
            "load_31": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.perceptual_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_19": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.global_feature_network_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.load_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/validation.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ColorizationDataset_Val(opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}