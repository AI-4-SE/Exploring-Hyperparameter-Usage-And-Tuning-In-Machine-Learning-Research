{
    "demos/TransferLearning/TransferLearningDemo.py": {
        "tensorflow": {
            "SGD_31": {
                "variable": {
                    "value": "SGD",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_file_71": {
                "variable": {
                    "value": "zip_file",
                    "type": "variable",
                    "possible_values": []
                },
                "origin": {
                    "value": "https://github.com/plaidml/depot/raw/master/datasets/cats_and_dogs_filtered.zip",
                    "type": "str",
                    "possible_values": []
                },
                "fname": {
                    "value": "cats_and_dogs_filtered.zip",
                    "type": "str",
                    "possible_values": []
                },
                "extract": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ResNet50_162": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pooling": {
                    "value": "self.RESNET50_POOLING_AVERAGE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.base_model, keras.layers.Dense(self.NUM_CLASSES, activation=self.DENSE_LAYER_ACTIVATION)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MobileNetV2_170": {
                "variable": {
                    "value": "self.base_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "self.IMAGE_SHAPE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[self.base_model, keras.layers.GlobalAveragePooling2D(), keras.layers.Dense(self.NUM_CLASSES, activation=self.DENSE_LAYER_ACTIVATION)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_167": {
                "units": {
                    "value": "self.NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.DENSE_LAYER_ACTIVATION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_176": {
                "units": {
                    "value": "self.NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.DENSE_LAYER_ACTIVATION",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "demos/TransferLearning/TransferLearningGui.py": {
        "tensorflow": {}
    },
    "mlperf/backend_tf.py": {
        "tensorflow": {
            "ConfigProto_39": {
                "variable": {
                    "value": "infer_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_47": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_62": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GraphDef()",
                            "Call"
                        ],
                        [
                            "optimized_graph_def",
                            "variable"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_63": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.import_graph_def(graph_def, name='')",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "infer_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_48": {
                "name": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mlperf/backend_tflite.py": {
        "tensorflow": {
            "Interpreter_43": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_path": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mlperf/models/convert_tf_weights.py": {
        "tensorflow": {
            "Session_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_121": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_120": {
                "name": {
                    "value": "frozen_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frozen_model",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_123": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "as_tensor_105": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[orig]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(weight, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "weight.permute(*p).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plaidbench/plaidbench/frontend_ops.py": {
        "tensorflow": {
            "Session_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "synchronize_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "emit_nvtx_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "plaidbench/plaidbench/networks/ops/conv2d.py": {
        "tensorflow": {
            "Variable_85": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.bs, self.h, self.w, self.ci])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.i, self.j, self.ci, self.co])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_93": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.bs, self.h, self.w, self.ci]))",
                            "Call"
                        ],
                        [
                            "self.get_dataset()",
                            "Call"
                        ],
                        [
                            "tvm.placeholder((self.bs, self.ci, self.h, self.w), name='I')",
                            "Call"
                        ],
                        [
                            "self.create_dataset_tvm()",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.i, self.j, self.ci, self.co]))",
                            "Call"
                        ],
                        [
                            "self.get_dataset()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "randn_59": {
                "*size": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.ci",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_60": {
                "*size": {
                    "value": "self.co",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.ci",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plaidbench/plaidbench/networks/ops/dense.py": {
        "tensorflow": {
            "constant_96": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.bs * self.i, self.k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_97": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.k, self.j]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "a": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([self.bs * self.i, self.k])",
                            "Call"
                        ],
                        [
                            "self.get_dataset()",
                            "Call"
                        ],
                        [
                            "tvm.placeholder((self.bs * self.i, self.k), name='I')",
                            "Call"
                        ],
                        [
                            "self.create_dataset_tvm()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([self.k, self.j])",
                            "Call"
                        ],
                        [
                            "self.get_dataset()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_93": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "randn_64": {
                "*size": {
                    "value": "self.bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plaidml/bridge/keras/backend_test.py": {
        "tensorflow": {
            "set_verbosity_31": {
                "level": {
                    "value": "tensorflow.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_209": {
                "variable": {
                    "value": "tf_session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_1773": {
                "variable": {
                    "value": "tf_session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_124": {
                "variable": {
                    "value": "tf_session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_157": {
                "variable": {
                    "value": "tf_session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mlperf/backend_pytorch.py": {
        "torch": {
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mlperf/backend_pytorch_native.py": {
        "torch": {
            "load_27": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "feed[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "feed[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mlperf/models/anchor_generator.py": {
        "torch": {
            "as_tensor_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "xgrid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_exp_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expanded_shape(x.shape, 0, y.dim())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "ygrid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(y)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "y_exp_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expanded_shape(y.shape, y.dim(), x.dim())",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_81": {
                "variable": {
                    "value": "aspect_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "aspect_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(aspect_ratios, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "zip(*box_spec)",
                            "Call"
                        ],
                        [
                            "aspect_ratios",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_82": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(scales, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[min_scale + (max_scale - min_scale) * i / (num_layers - 1) for i in range(num_layers)] + [1.0]",
                            "BinOp"
                        ],
                        [
                            "scales + [1.0]",
                            "BinOp"
                        ],
                        [
                            "zip(*box_spec)",
                            "Call"
                        ],
                        [
                            "scales",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_84": {
                "variable": {
                    "value": "ratio_sqrts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aspect_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(aspect_ratios, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "zip(*box_spec)",
                            "Call"
                        ],
                        [
                            "aspect_ratios",
                            "Method Argument"
                        ],
                        [
                            "(1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_89": {
                "variable": {
                    "value": "y_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "grid_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_height",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_91": {
                "variable": {
                    "value": "x_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "grid_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_width",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "bbox_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_centers_grid, x_centers_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "bbox_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[heights_grid, widths_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "bbox_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([y_centers_grid, x_centers_grid], dim=3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bbox_centers, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "bbox_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([heights_grid, widths_grid], dim=3)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bbox_sizes, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "base_anchor_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "base_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1.0, 1.0]",
                            "List"
                        ],
                        [
                            "torch.tensor(base_anchor_size, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([256, 256], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[scale_height * self._base_anchor_size[0], scale_width * self._base_anchor_size[1]]",
                            "List"
                        ],
                        [
                            "base_anchor_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "[centers - 0.5 * sizes, centers + 0.5 * sizes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "base_anchor_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[256, 256]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_376": {
                "*size": {
                    "value": "num_anchors_in_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tiled_anchors)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mlperf/models/base_model_r34.py": {
        "torch": {
            "load_101": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "src_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(rn18.children())[:6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(rn18.children())[6:7]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(rn34.children())[:6]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(rn34.children())[6:7]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([scale] * chan_num).view(1, chan_num, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "tgt_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tgt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tgt_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SmoothL1Loss_157": {
                "variable": {
                    "value": "self.sl1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.dboxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dboxes(order='xywh').transpose(0, 1).unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_162": {
                "variable": {
                    "value": "self.con_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_199": {
                "variable": {
                    "value": "neg_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3 * pos_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "mask.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_199": {
                "variable": {
                    "value": "neg_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "(gxy, gwh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_130": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mlperf/models/ssd_mobilenet_v1.py": {
        "torch": {
            "ModuleList_212": {
                "variable": {
                    "value": "extras",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(1024, 256, 512), Block(512, 128, 256), Block(256, 128, 256), Block(256, 64, 128)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_219": {
                "variable": {
                    "value": "predictors",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PredictionHead(in_channels, num_classes, num_anchors) for (in_channels, num_anchors) in zip((512, 1024, 512, 256, 256, 128), (3, 6, 6, 6, 6, 6))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "OrderedDict([('0', Conv2d_tf(inp, oup, 3, stride, padding='SAME', bias=False)), ('0/BatchNorm', BiasAdd(oup)), ('0/ReLU', nn.ReLU6(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "OrderedDict([('depthwise', Conv2d_tf(inp, inp, 3, stride, padding='SAME', groups=inp, bias=False)), ('depthwise/BatchNorm', BatchNorm2d(inp)), ('depthwise/ReLU', nn.ReLU6(inplace=True)), ('pointwise', nn.Conv2d(inp, oup, 1, 1, 0, bias=False)), ('pointwise/BatchNorm', BiasAdd(oup)), ('pointwise/ReLU', nn.ReLU6(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.classification",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.regression",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "self.coder_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(10, 10, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classification(x)",
                            "Call"
                        ],
                        [
                            "class_logits.permute(0, 2, 3, 1).reshape(bs, -1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "list(zip(*results))",
                            "Call"
                        ],
                        [
                            "torch.cat(class_logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "box_regression",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_regression",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.regression(x)",
                            "Call"
                        ],
                        [
                            "box_regression.permute(0, 2, 3, 1).reshape(bs, -1, 4)",
                            "Call"
                        ],
                        [
                            "list(zip(*results))",
                            "Call"
                        ],
                        [
                            "torch.cat(box_regression, 1)",
                            "Call"
                        ],
                        [
                            "box_regression.squeeze(0)",
                            "Call"
                        ],
                        [
                            "box_regression[None]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_140": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classification(x)",
                            "Call"
                        ],
                        [
                            "class_logits.permute(0, 2, 3, 1).reshape(bs, -1, self.num_classes)",
                            "Call"
                        ],
                        [
                            "list(zip(*results))",
                            "Call"
                        ],
                        [
                            "torch.cat(class_logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_181": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "selected_box_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "selected_box_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(selected_box_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_147": {
                "variable": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_ssd_anchors()._generate(shapes)",
                            "Call"
                        ],
                        [
                            "torch.cat(priors, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "box_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subset_boxes, probs.reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU6_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU6_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_196": {
                "size": {
                    "value": "(box_probs.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "class_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_index in range(1, scores.size(1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU6_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mlperf/models/ssd_r34.py": {
        "torch": {
            "max_116": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "be1[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_117": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "be1[:, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "self.scale_xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dboxes.scale_xy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "self.scale_wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dboxes.scale_wh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "self.dboxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.default_boxes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_263": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_336": {
                "variable": {
                    "value": "self.additional_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.additional_blocks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "input": {
                    "value": "scores_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_in.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "scores_in",
                            "Method Argument"
                        ],
                        [
                            "scores_in",
                            "Method Argument"
                        ],
                        [
                            "scores_in",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "bboxes_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(bboxes_out, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "labels_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels_out, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores_out, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_278": {
                "*args": {
                    "value": "nn.Conv2d(input_channels[idx], 256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "*args": {
                    "value": "nn.Conv2d(input_channels[idx], 256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "*args": {
                    "value": "nn.Conv2d(input_channels[idx], 128, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_319": {
                "*args": {
                    "value": "nn.Conv2d(input_channels[idx], 128, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_329": {
                "*args": {
                    "value": "nn.Conv2d(input_channels[idx], 128, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_357": {
                "tensors": {
                    "value": "confs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(zip(*ret))",
                            "Call"
                        ],
                        [
                            "torch.cat(confs, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.bbox_view(src, self.loc, self.conf, extract_shapes=self.extract_shapes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_258": {
                "in_channels": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.num_defaults, self.out_chan)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nd * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.num_defaults, self.out_chan)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nd * label_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "in_channels": {
                    "value": "input_channels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_286": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_292": {
                "in_channels": {
                    "value": "input_channels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_293": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_294": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_306": {
                "in_channels": {
                    "value": "input_channels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_307": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_308": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_320": {
                "in_channels": {
                    "value": "input_channels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_321": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.strides[5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_323": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_330": {
                "in_channels": {
                    "value": "input_channels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_331": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_332": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_channels[idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_333": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mlperf/models/utils.py": {
        "torch": {
            "clamp_98": {
                "variable": {
                    "value": "hw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_bottom - left_top",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_112": {
                "variable": {
                    "value": "overlap_left_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes0[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_113": {
                "variable": {
                    "value": "overlap_right_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes0[..., 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_ctr_x - 0.5 * pred_w, pred_ctr_y - 0.5 * pred_h, pred_ctr_x + 0.5 * pred_w, pred_ctr_y + 0.5 * pred_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_75": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, [0, cols_odd, 0, rows_odd])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, cols_odd, 0, rows_odd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_77": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, [0, cols_odd, 0, rows_odd])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding_rows // 2, padding_cols // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_184": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, :, 3].unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "dw / ww",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_185": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, :, 2].unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "dh / wh",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_15": {
                "*size": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out",
                            "Method Argument"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_63": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, [0, cols_odd, 0, rows_odd])",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plaidml/bridge/pytorch/models_test.py": {
        "torch": {
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_175": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_180": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, (1, -1))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_336": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_339": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_340": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_351": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_378": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "unsqueeze_402": {
                "input": {
                    "value": "torch.Tensor(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "plaidml/bridge/pytorch/ops_test.py": {
        "torch": {
            "randn_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_23": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_48": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 512, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(64, 64)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "rand_49": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_kernels, shape[1], kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "rand_79": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 512, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(64, 64)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "rand_80": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "rand_103": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 512, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(64, 64)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "rand_104": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "rand_127": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 512, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(64, 64)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "rand_128": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "rand_151": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 512, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(64, 64)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "rand_152": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_kernels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "rand_172": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 512, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(64, 64)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "rand_173": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_174": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_175": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_176": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_187": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 64, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_202": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 512, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_225": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 512, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_241": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 64, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_260": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_261": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_262": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_272": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(512, 512, 3)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(1, 64, 56, 56)",
                            "Tuple"
                        ],
                        [
                            "(1, 128, 28, 28)",
                            "Tuple"
                        ],
                        [
                            "(64, 64)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "allclose_41": {
                "input": {
                    "value": "jit_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_56": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_62": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_86": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_110": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_134": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_158": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_182": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_194": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_208": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_214": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_231": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_247": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_253": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_268": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_284": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_290": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_296": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_337": {
                "variable": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "batch_norm_338": {
                "variable": {
                    "value": "bn_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(input, weights_1, stride=(2, 2), padding=(3, 3))",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "bn_mean_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_mean_1",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "bn_var_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_var_1",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "bn_weight_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_weight_1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bn_bias_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_bias_1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_339": {
                "variable": {
                    "value": "relu_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.batch_norm(conv_1, bn_mean_1, bn_var_1, weight=bn_weight_1, bias=bn_bias_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_340": {
                "variable": {
                    "value": "pool_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relu_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(bn_1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_344": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_358": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "x7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x7",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "batch_norm_359": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(512, 512, 3)",
                            "Call"
                        ],
                        [
                            "torch.randn(512)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x1, x7, stride=(1, 1), padding=(1, 1))",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x, x8, x9, weight=x10, bias=x11)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "x8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x8",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "x9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x9",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "x10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x10",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "x11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x11",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "allclose_365": {
                "input": {
                    "value": "ref_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pml_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._run_both(foo, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(mul, [x, y, z])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv_bias, [X, W, bias])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(conv, [X, W])",
                            "Call"
                        ],
                        [
                            "self._run_both(batch_norm, [a, b, c, d, e])",
                            "Call"
                        ],
                        [
                            "self._run_both(relu, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(avg_pool2d_strides, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(adaptive_avg_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(max_pool2d_strides_padding, [X])",
                            "Call"
                        ],
                        [
                            "self._run_both(linear, [X, W, B])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(reshape, [input])",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ],
                        [
                            "self._run_both(model, args)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_53": {
                "input": {
                    "value": "a + a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_59": {
                "input": {
                    "value": "a + a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_83": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_131": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_155": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "batch_norm_179": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_190": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_205": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_211": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_228": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_250": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_265": {
                "input": {
                    "value": "a + a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape[1])",
                            "Call"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_281": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(shape[0], 1, 1, shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_328": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_329": {
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_330": {
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_331": {
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_332": {
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_333": {
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_349": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_350": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_351": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_352": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_353": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_354": {
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_244": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(shape)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "plaidml/bridge/pytorch/test_utils.py": {
        "torch": {
            "trace_16": {
                "variable": {
                    "value": "trace_jit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trace_35": {
                "variable": {
                    "value": "trace_jit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trace_24": {
                "variable": {
                    "value": "trace_pml",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trace_49": {
                "variable": {
                    "value": "trace_pml",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ],
                        [
                            "func",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "profile_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}