{
    "lib/data.py": {
        "torch": {
            "from_numpy_753": {
                "variable": {
                    "value": "common",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(str(common_file), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "phashes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "phashes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_279": {
                "variable": {
                    "value": "batch_graphlet_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "remapped_graphlet_ids.flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes[cl]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_377": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_422": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_498": {
                "seed": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_528": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_583": {
                "seed": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_594": {
                "seed": {
                    "value": "conf.seed + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_639": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_714": {
                "seed": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_725": {
                "seed": {
                    "value": "conf.seed + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[phash]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[phash]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "variable": {
                    "value": "common",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(lambda x: mapping.get(x, -100), common))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_339": {
                "datasets": {
                    "value": "train_per_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_340": {
                "datasets": {
                    "value": "val_per_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_361": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_left, train_right]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_384": {
                "tensors": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SyntheticDataset2(str(dataset_path / ('test' if f is not None else 'test_original')), pre_transform=f, sizes=sizes_test, num_samples=num_samples, **kwargs)",
                            "Call"
                        ],
                        [
                            "SyntheticDataset3(str(dataset_path / ('test' if f is not None else 'test_original')), pre_transform=f, sizes=sizes_test, feat_probs=probs_test, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_395": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(str(split_dir / f'train_idx.txt'), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_396": {
                "variable": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(str(split_dir / f'val_idx.txt'), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_397": {
                "variable": {
                    "value": "self.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(str(split_dir / f'test_idx.txt'), dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_470": {
                "variable": {
                    "value": "data[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(G), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_471": {
                "variable": {
                    "value": "data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_481": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_504": {
                "obj": {
                    "value": "id2graphlet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{c: id2graphlet[c] for c in common.numpy()}",
                            "DictComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "id2graphlet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_506": {
                "variable": {
                    "value": "id2graphlet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "id2graphlet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_551": {
                "variable": {
                    "value": "data[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "variable": {
                    "value": "data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_562": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_606": {
                "obj": {
                    "value": "id2graphlet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{c: id2graphlet[c] for c in common.numpy()}",
                            "DictComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "id2graphlet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_608": {
                "variable": {
                    "value": "id2graphlet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "id2graphlet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_664": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(sum(block_sizes), self.n_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "data[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_685": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_737": {
                "obj": {
                    "value": "id2graphlet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{c: id2graphlet[c] for c in common.numpy()}",
                            "DictComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "id2graphlet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_739": {
                "variable": {
                    "value": "id2graphlet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "id2graphlet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_821": {
                "obj": {
                    "value": "id2graphlet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ],
                        [
                            "{c: id2graphlet[c] for c in common.numpy()}",
                            "DictComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(id2graphlet_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "id2graphlet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_823": {
                "variable": {
                    "value": "id2graphlet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "id2graphlet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ],
                        [
                            "str(dataset_path / 'id2graphlet')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "(graphlet_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[[], []]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.tensor(pstat['node_labels'])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_node_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'PROTEINS': 3, 'DD': 89, 'ENZYMES': 3, 'MUTAG': 7, 'PTC_FM': 18, 'PTC_FR': 19, 'PTC_MM': 20, 'PTC_MR': 18, 'NCI1': 37, 'NCI109': 38, 'deezer_ego_nets': 0, 'twitch_egos': 0, 'IMDB-BINARY': 0}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_207": {
                "variable": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pstat['edge_list']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_207": {
                "variable": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "e1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_list[0], edge_list[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_list[1], edge_list[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_210": {
                "variable": {
                    "value": "edge_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e1, e2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_406": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_772": {
                "ndarray": {
                    "value": "train_idxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(str(split_path / f'train_idx.txt'), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_773": {
                "ndarray": {
                    "value": "val_idxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(str(split_path / f'val_idx.txt'), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_774": {
                "ndarray": {
                    "value": "test_idxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(str(split_path / f'test_idx.txt'), dtype=np.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_860": {
                "variable": {
                    "value": "test_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "99",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(5,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "(graphlet_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "estimates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[0.0]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "data": {
                    "value": "estimates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[0.0]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_318": {
                "tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_319": {
                "tensors": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_333": {
                "condition": {
                    "value": "dataset.data.y == cl",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_509": {
                "tensors": {
                    "value": "[splits['train'], splits['valid']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "(graphlet_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "[[], []]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "*size": {
                    "value": "(graphlet_size, num_node_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "[[], []]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_892": {
                "variable": {
                    "value": "test_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "max_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "data": {
                    "value": "pstat['node_labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_890": {
                "seed": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/graphlets_edge_lists.py": {
        "torch": {
            "tensor_421": {
                "data": {
                    "value": "graphlet[k][name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_421": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "shapes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "shapes[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "*h_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.gcn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "gcn_layers_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "batch_norms_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_91": {
                "variable": {
                    "value": "h_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "torch.cat(h_v, dim=1)",
                            "Call"
                        ],
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "torch.cat(h_v, dim=1)",
                            "Call"
                        ],
                        [
                            "self.node_embedder.forward(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.node_embedder.forward(new_x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.pna_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "pna_layers_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "batch_norms_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_206": {
                "variable": {
                    "value": "self.gin_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "gin_layers_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "batch_norms_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_228": {
                "variable": {
                    "value": "h_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "torch.cat(h_v, dim=1)",
                            "Call"
                        ],
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "torch.cat(h_v, dim=1)",
                            "Call"
                        ],
                        [
                            "self.node_embedder.forward(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.node_embedder.forward(new_x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_312": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1) + self.fixed_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "*args": {
                    "value": "nn.Dropout(p=dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim if i < n_hidden - 1 else o_dim",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "h_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "torch.cat(h_v, dim=1)",
                            "Call"
                        ],
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "[o]",
                            "List"
                        ],
                        [
                            "torch.cat(h_v, dim=1)",
                            "Call"
                        ],
                        [
                            "self.node_embedder.forward(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.node_embedder.forward(new_x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_301": {
                "n": {
                    "value": "self.fixed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_317": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "graph_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_indices.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_323": {
                "variable": {
                    "value": "new_x[node_indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[node_indices], permuted_node_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_43": {
                "num_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "num_features": {
                    "value": "vertex_embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_123": {
                "num_features": {
                    "value": "vertex_embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_204": {
                "num_features": {
                    "value": "vertex_embed_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_313": {
                "input": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/subgraph_models.py": {
        "torch": {
            "Parameter_103": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(len(order_dict), o_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(o_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_59": {
                "n": {
                    "value": "graphlet_sz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_104": {
                "*size": {
                    "value": "len(order_dict)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "o_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_106": {
                "*size": {
                    "value": "o_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_71": {
                "n": {
                    "value": "self.graphlet_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[batch.x, permuted_node_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randperm(self.graphlet_sz) for _ in range(num_graphlets)]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "lightning_modules.py": {
        "torch": {
            "zeros_333": {
                "variable": {
                    "value": "deg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_deg + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_458": {
                "variable": {
                    "value": "best_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "trainer.checkpoint_callback.best_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "self.conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_133": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_206": {
                "dataset": {
                    "value": "self.train_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "Batcher(self.train_id2graphlet, common_file=common_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bincount_336": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "degree(data.edge_index[1], num_nodes=data.num_nodes, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "minlength": {
                    "value": "deg.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "batch_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "model.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "conf.batch_norm.affine",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_199": {
                "seed": {
                    "value": "self.conf.seed + epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_217": {
                "dataset": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "Batcher(id2graphlet, common_file=common_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_228": {
                "dataset": {
                    "value": "test_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.conf.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "Batcher(id2graphlet, common_file=common_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_49": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graphlets_repr - perturbed_graphlets_repr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_49": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_124": {
                "variable": {
                    "value": "(_, sizes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_71": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "batch.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'NCI1': [1 / 0.623, 1 / 0.377], 'NCI109': [1 / 0.6204, 1 / 0.3796], 'PROTEINS': [1 / 0.4197, 1 / 0.5803], 'DD': [1 / 0.3547, 1 / 0.6453], 'deezer_ego_nets': [1 / 0.5521, 1 / 0.4479], 'twitch_egos': [1 / 0.3905, 1 / 0.6095], 'IMDB-BINARY': [1 / 0.4899, 1 / 0.5101]}",
                            "Dict"
                        ],
                        [
                            "torch.tensor(self.weight).to(out.device) if self.weight is not None else None",
                            "IfExp"
                        ],
                        [
                            "{'NCI1': [1 / 0.623, 1 / 0.377], 'NCI109': [1 / 0.6204, 1 / 0.3796], 'PROTEINS': [1 / 0.4197, 1 / 0.5803], 'DD': [1 / 0.3547, 1 / 0.6453], 'deezer_ego_nets': [1 / 0.5521, 1 / 0.4479], 'twitch_egos': [1 / 0.3905, 1 / 0.6095], 'IMDB-BINARY': [1 / 0.4899, 1 / 0.5101]}",
                            "Dict"
                        ],
                        [
                            "torch.tensor(self.weight).to(out.device) if self.weight is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "true_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.log_softmax(dim=self.dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_90": {
                "input": {
                    "value": "torch.sum(-true_dist * pred, dim=self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "out.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_118": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'NCI1': [1 / 0.623, 1 / 0.377], 'NCI109': [1 / 0.6204, 1 / 0.3796], 'PROTEINS': [1 / 0.4197, 1 / 0.5803], 'DD': [1 / 0.3547, 1 / 0.6453], 'deezer_ego_nets': [1 / 0.5521, 1 / 0.4479], 'twitch_egos': [1 / 0.3905, 1 / 0.6095], 'IMDB-BINARY': [1 / 0.4899, 1 / 0.5101]}",
                            "Dict"
                        ],
                        [
                            "torch.tensor(self.weight).to(out.device) if self.weight is not None else None",
                            "IfExp"
                        ],
                        [
                            "{'NCI1': [1 / 0.623, 1 / 0.377], 'NCI109': [1 / 0.6204, 1 / 0.3796], 'PROTEINS': [1 / 0.4197, 1 / 0.5803], 'DD': [1 / 0.3547, 1 / 0.6453], 'deezer_ego_nets': [1 / 0.5521, 1 / 0.4479], 'twitch_egos': [1 / 0.3905, 1 / 0.6095], 'IMDB-BINARY': [1 / 0.4899, 1 / 0.5101]}",
                            "Dict"
                        ],
                        [
                            "torch.tensor(self.weight).to(out.device) if self.weight is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_120": {
                "input": {
                    "value": "grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unique_132": {
                "input": {
                    "value": "envs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sizes > self.cutoff if self.cutoff is not None else sizes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cross_entropy_50": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "batch.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "-true_dist * pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_33": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_119": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(out * scale, target, weight=weight)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[scale]",
                    "type": "List",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_135": {
                "input": {
                    "value": "out[has_env]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "batch.y[has_env]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'NCI1': [1 / 0.623, 1 / 0.377], 'NCI109': [1 / 0.6204, 1 / 0.3796], 'PROTEINS': [1 / 0.4197, 1 / 0.5803], 'DD': [1 / 0.3547, 1 / 0.6453], 'deezer_ego_nets': [1 / 0.5521, 1 / 0.4479], 'twitch_egos': [1 / 0.3905, 1 / 0.6095], 'IMDB-BINARY': [1 / 0.4899, 1 / 0.5101]}",
                            "Dict"
                        ],
                        [
                            "torch.tensor(self.weight).to(out.device) if self.weight is not None else None",
                            "IfExp"
                        ],
                        [
                            "{'NCI1': [1 / 0.623, 1 / 0.377], 'NCI109': [1 / 0.6204, 1 / 0.3796], 'PROTEINS': [1 / 0.4197, 1 / 0.5803], 'DD': [1 / 0.3547, 1 / 0.6453], 'deezer_ego_nets': [1 / 0.5521, 1 / 0.4479], 'twitch_egos': [1 / 0.3905, 1 / 0.6095], 'IMDB-BINARY': [1 / 0.4899, 1 / 0.5101]}",
                            "Dict"
                        ],
                        [
                            "torch.tensor(self.weight).to(out.device) if self.weight is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}