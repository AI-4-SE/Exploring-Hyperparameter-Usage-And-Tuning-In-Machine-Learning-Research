{
    "evaluation/auxiliaries.py": {
        "sklearn": {
            "normalized_mutual_info_score_223": {
                "variable": {
                    "value": "NMI",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "model_generated_cluster_labels.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "target_labels.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "randn_775": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_448": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'opt': opt, 'progress': progress_saver}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.save_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_cache_862": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_277": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_img.to(device))",
                            "Call"
                        ],
                        [
                            "model(input_img.to(device))",
                            "Call"
                        ],
                        [
                            "out[0]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(out, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "model(input_img.to(device))",
                            "Call"
                        ],
                        [
                            "out[0]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(out, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size()[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_293": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_img.to(device))",
                            "Call"
                        ],
                        [
                            "model(input_img.to(device))",
                            "Call"
                        ],
                        [
                            "out[0]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(out, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "model(input_img.to(device))",
                            "Call"
                        ],
                        [
                            "out[0]",
                            "Subscript"
                        ],
                        [
                            "F.normalize(out, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size()[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_811": {
                "variable": {
                    "value": "op1",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_812": {
                "obj": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/dists.py": {
        "sklearn": {
            "normalize_38": {
                "variable": {
                    "value": "com",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.mean(features[loc], axis=0).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "normalize_45": {
                "variable": {
                    "value": "com",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(features[loc], dim=0).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "coms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_47": {
                "input": {
                    "value": "torch.cat(coms, dim=0).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "features[loc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/nmi.py": {
        "sklearn": {
            "normalized_mutual_info_score_9": {
                "variable": {
                    "value": "NMI",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "computed_cluster_labels.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "target_labels.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/rho_spectrum.py": {
        "sklearn": {
            "TruncatedSVD_22": {
                "variable": {
                    "value": "svd",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.embed_dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "svd_19": {
                "variable": {
                    "value": "(_, s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/bninception.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.model.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model.last_linear.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_28": {
                "variable": {
                    "value": "self.pool_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_44": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.last_linear(y.view(len(x), -1))",
                            "Call"
                        ],
                        [
                            "F.normalize(z, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.out_adjust(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_29": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/googlenet.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(gmodel.children())[:-3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/group_layers.py": {
        "torch": {
            "AdaptiveAvgPool2d_11": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.linear_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['in_channel']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['out_channel']",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_26": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.mul_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_per * self.k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_44": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.share_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channel // self.reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.indep_cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mul_linear(x).view(-1, self.k, self.dim_per)",
                            "Call"
                        ],
                        [
                            "torch.cat(embs, 1).view(-1, self.k, self.dim_per)",
                            "Call"
                        ],
                        [
                            "torch.cat(embs, 1).view(-1, self.k, self.dim_per)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(masks, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_71": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.SE_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mul_linear(x).view(-1, self.k, self.dim_per)",
                            "Call"
                        ],
                        [
                            "torch.cat(embs, 1).view(-1, self.k, self.dim_per)",
                            "Call"
                        ],
                        [
                            "torch.cat(embs, 1).view(-1, self.k, self.dim_per)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "att_wei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_wei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(att_wei, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_94": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channel // self.reduction",
                            "BinOp"
                        ],
                        [
                            "self.in_channel // self.reduction",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.val_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.que_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "out_att_wei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_att_wei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out_att_wei, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out_att_wei, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channel // self.reduction",
                            "BinOp"
                        ],
                        [
                            "self.in_channel // self.reduction",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.val_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_per",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_160": {
                "variable": {
                    "value": "self.que_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "out_att_wei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_att_wei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out_att_wei, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out_att_wei, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "att_weight_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight.reshape([n, -1, h * w])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "att_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(att_weight.reshape([n, -1, h * w]), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weight.reshape([n, -1, h * w]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value.reshape(n, -1, h * w).permute([0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_172": {
                "variable": {
                    "value": "att_weight_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight.reshape([n, -1, h * w])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "att_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(att_weight.reshape([n, -1, h * w]), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weight.reshape([n, -1, h * w]), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value.reshape(n, -1, h * w).permute([0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "self.in_channel // self.reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "c_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channel // self.reduction",
                            "BinOp"
                        ],
                        [
                            "self.in_channel // self.reduction",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "c_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channel // self.reduction",
                            "BinOp"
                        ],
                        [
                            "self.in_channel // self.reduction",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/resnet50.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(rmodel.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "batchminer/distance.py": {
        "torch": {
            "exp_55": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_67": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_55": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/diva_shared_distance_an.py": {
        "torch": {
            "exp_44": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_56": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/diva_shared_distance_apn.py": {
        "torch": {
            "exp_45": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_57": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_45": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/intra_random.py": {
        "torch": {}
    },
    "batchminer/lifted.py": {
        "torch": {}
    },
    "batchminer/npair.py": {
        "torch": {}
    },
    "batchminer/parametric.py": {
        "torch": {
            "mm_59": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "batchminer/random.py": {
        "torch": {}
    },
    "batchminer/random_distance.py": {
        "torch": {
            "exp_46": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_58": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_43": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/rho_distance.py": {
        "torch": {
            "exp_58": {
                "variable": {
                    "value": "q_d_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_q_d_inv - torch.max(log_q_d_inv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_70": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "1.0 - 0.25 * dists.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_58": {
                "input": {
                    "value": "log_q_d_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 - float(dim)) * torch.log(dists) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dists.pow(2))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "batchminer/semihard.py": {
        "torch": {
            "mm_44": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "batchminer/softhard.py": {
        "torch": {
            "mm_51": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/binomial_deviance.py": {
        "torch": {
            "matmul_13": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_fea1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "n_fea2.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eq_28": {
                "variable": {
                    "value": "pos_pair_lab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cla_lab1.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cla_lab2.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_39": {
                "variable": {
                    "value": "neg_cla_pair_lab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cla_lab1.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cla_lab2.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(torch.exp(act) + 1.0) * norm_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eq_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pro_lab1.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pro_lab2.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_56": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_12": {
                "input": {
                    "value": "fea2",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "torch.exp(act) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_19": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-05, dtype=data_type).to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_20": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1e-05, dtype=data_type).to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_35": {
                "*size": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_35": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cla_lab1.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_58": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_19": {
                "input": {
                    "value": "pos_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_pair_lab.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_20": {
                "input": {
                    "value": "neg_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(1, dtype=data_type) - neg_cla_pair_lab",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_21": {
                "input": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta1 * (sim - beta2) * cons",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "criteria/contrastive.py": {
        "torch": {
            "mean_35": {
                "variable": {
                    "value": "pos_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(nn.PairwiseDistance(p=2)(batch[anchors, :], batch[positives, :]) - self.pos_margin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_37": {
                "variable": {
                    "value": "neg_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.neg_margin - nn.PairwiseDistance(p=2)(batch[anchors, :], batch[negatives, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_44": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(batch, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "nn.PairwiseDistance(p=2)(batch[anchors, :], batch[positives, :]) - self.pos_margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "self.neg_margin - nn.PairwiseDistance(p=2)(batch[anchors, :], batch[negatives, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PairwiseDistance_36": {
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PairwiseDistance_38": {
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/div_bd.py": {
        "torch": {
            "tensor_24": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/diversity.py": {
        "torch": {
            "zeros_12": {
                "variable": {
                    "value": "pos_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n, n]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_13": {
                "variable": {
                    "value": "neg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "criteria/margin.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "loss_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(opt.k, opt.n_classes) * opt.loss_margin_beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_ap - beta + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta - d_an + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "pair_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pos_loss > 0.0) + (neg_loss > 0.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.beta[i][labels[triplet[0]]] for triplet in sampled_triplets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_loss + neg_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_65": {
                "tensors": {
                    "value": "d_an",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "opt.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "pos_loss + neg_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "datasampler/class_random_sampler.py": {
        "torch": {}
    },
    "datasampler/random_sampler.py": {
        "torch": {}
    },
    "datasampler/samplers.py": {
        "torch": {
            "mm_104": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_110": {
                "variable": {
                    "value": "coreset_anchor_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdistsq(A)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_135": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist - torch.max(dist)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "new_search_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coreset_anchor_dists.unsqueeze(-1), sample_anchor_dists]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_collect",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(embed_collect, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coreset_anchor_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(dist_matrix, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.min(new_search_dists, dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_138": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdistsq(A).clamp(min=0.5)",
                            "Call"
                        ],
                        [
                            "(2.0 - float(dim)) * torch.log(dist) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dist.pow(2))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(dist - torch.max(dist))",
                            "Call"
                        ],
                        [
                            "dist / torch.sum(dist)",
                            "BinOp"
                        ],
                        [
                            "dist.flatten().detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "dist / np.sum(dist)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_122": {
                "input": {
                    "value": "new_search_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([coreset_anchor_dists.unsqueeze(-1), sample_anchor_dists], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "1.0 - 0.25 * dist.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_135": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdistsq(A).clamp(min=0.5)",
                            "Call"
                        ],
                        [
                            "(2.0 - float(dim)) * torch.log(dist) - float(dim - 3) / 2 * torch.log(1.0 - 0.25 * dist.pow(2))",
                            "BinOp"
                        ],
                        [
                            "torch.exp(dist - torch.max(dist))",
                            "Call"
                        ],
                        [
                            "dist / torch.sum(dist)",
                            "BinOp"
                        ],
                        [
                            "dist.flatten().detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "dist / np.sum(dist)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.image_list[idx][-1] for idx in subset]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/__init__.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "dataloaders[training]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['training']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_data_sampler",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "dataloaders[evaluation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['evaluation']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.BS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "dataloaders[validation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['validation']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.BS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "dataloaders[testing]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['testing']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.BS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "dataloaders[testing_query]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['testing_query']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.BS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "dataloaders[testing_gallery]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['testing_gallery']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.BS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/basic_dataset_scaffold.py": {
        "torch": {}
    },
    "evaluation/__init__.py": {
        "torch": {
            "save_127": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'opt': save_opt, 'progress': progress_saver, 'aux': aux}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_135": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataParallel_40": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "archs.select(args.arch, args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_59": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "to_optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outline.set_lr(model, args)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_60": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(to_optim)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/__init__.py": {
        "torch": {
            "empty_cache_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(feature_colls[evaltype]).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).to(self.pars.device)",
                            "Call"
                        ],
                        [
                            "np.vstack(feature_colls[evaltype]).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).to(self.pars.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_152": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_img.to(device))",
                            "Call"
                        ],
                        [
                            "F.normalize(out, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "model(input_img.to(device))",
                            "Call"
                        ],
                        [
                            "out.view(out.size()[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_212": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack(feature_colls[evaltype]).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).to(self.pars.device)",
                            "Call"
                        ],
                        [
                            "np.vstack(feature_colls[evaltype]).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(features).to(self.pars.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/f1.py": {
        "torch": {}
    },
    "metrics/mAP.py": {
        "torch": {}
    },
    "outline.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_17": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/misc.py": {
        "torch": {
            "DataParallel_37": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "output_device": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}