{
    "FAD_evaluation/frechet_audio_distance/audioset_model.py": {
        "tensorflow": {
            "Session_43": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FAD_evaluation/frechet_audio_distance/create_embeddings_beam.py": {
        "tensorflow": {
            "Feature_288": {
                "variable": {
                    "value": "feature[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[name.encode('utf-8')])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_41": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_46": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_128": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_290": {
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_204": {
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_259": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_41": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FloatList_46": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BytesList_289": {
                "value": {
                    "value": "[name.encode('utf-8')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_290": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{feature_key: _float_feature(samples)}",
                            "Dict"
                        ],
                        [
                            "{'embedding_count': _int64_feature([sample_count]), 'embedding_length': _int64_feature([self._embedding_dim])}",
                            "Dict"
                        ],
                        [
                            "{'cos': _float_feature([cos_dis]), 'num_samples': _float_feature([float(dist_samples.shape[0])])}",
                            "Dict"
                        ],
                        [
                            "{'embedding': _float_feature(embedding_vector), 'embedding_count': _int64_feature([1]), 'embedding_length': _int64_feature([self._embedding_dim])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_128": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{feature_key: _float_feature(samples)}",
                            "Dict"
                        ],
                        [
                            "{'embedding_count': _int64_feature([sample_count]), 'embedding_length': _int64_feature([self._embedding_dim])}",
                            "Dict"
                        ],
                        [
                            "{'cos': _float_feature([cos_dis]), 'num_samples': _float_feature([float(dist_samples.shape[0])])}",
                            "Dict"
                        ],
                        [
                            "{'embedding': _float_feature(embedding_vector), 'embedding_count': _int64_feature([1]), 'embedding_length': _int64_feature([self._embedding_dim])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_204": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{feature_key: _float_feature(samples)}",
                            "Dict"
                        ],
                        [
                            "{'embedding_count': _int64_feature([sample_count]), 'embedding_length': _int64_feature([self._embedding_dim])}",
                            "Dict"
                        ],
                        [
                            "{'cos': _float_feature([cos_dis]), 'num_samples': _float_feature([float(dist_samples.shape[0])])}",
                            "Dict"
                        ],
                        [
                            "{'embedding': _float_feature(embedding_vector), 'embedding_count': _int64_feature([1]), 'embedding_length': _int64_feature([self._embedding_dim])}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Features_259": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{feature_key: _float_feature(samples)}",
                            "Dict"
                        ],
                        [
                            "{'embedding_count': _int64_feature([sample_count]), 'embedding_length': _int64_feature([self._embedding_dim])}",
                            "Dict"
                        ],
                        [
                            "{'cos': _float_feature([cos_dis]), 'num_samples': _float_feature([float(dist_samples.shape[0])])}",
                            "Dict"
                        ],
                        [
                            "{'embedding': _float_feature(embedding_vector), 'embedding_count': _int64_feature([1]), 'embedding_length': _int64_feature([self._embedding_dim])}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "FAD_evaluation/frechet_audio_distance/fad_utils.py": {
        "tensorflow": {
            "Example_38": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tf_record_iterator_37": {
                "path": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/vggish/vggish_export_tfhub.py": {
        "tensorflow": {
            "NewCheckpointReader_33": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "wrap_function_73": {
                "variable": {
                    "value": "self._vggish_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fn": {
                    "value": "vggish_definer(self._variables, checkpoint_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "signature": {
                    "value": "(tf.TensorSpec(shape=[None], dtype=tf.float32),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "function_77": {
                "input_signature": {
                    "value": "(tf.TensorSpec(shape=[None], dtype=tf.float32),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "vggish",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGish(vggish_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "vggish_tfhub_export_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Graph_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorSpec_77": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_75": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/vggish/vggish_inference_demo.py": {
        "tensorflow": {
            "SequenceExample_130": {
                "variable": {
                    "value": "seq_example",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_lists": {
                    "value": "tf.train.FeatureLists(feature_list={vggish_params.AUDIO_EMBEDDING_FEATURE_NAME: tf.train.FeatureList(feature=[tf.train.Feature(bytes_list=tf.train.BytesList(value=[embedding.tobytes()])) for embedding in postprocessed_batch])})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_105": {
                "path": {
                    "value": "FLAGS.tfrecord_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FeatureLists_131": {
                "feature_list": {
                    "value": "{vggish_params.AUDIO_EMBEDDING_FEATURE_NAME: tf.train.FeatureList(feature=[tf.train.Feature(bytes_list=tf.train.BytesList(value=[embedding.tobytes()])) for embedding in postprocessed_batch])}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FeatureList_134": {
                "feature": {
                    "value": "[tf.train.Feature(bytes_list=tf.train.BytesList(value=[embedding.tobytes()])) for embedding in postprocessed_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Feature_136": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[embedding.tobytes()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_137": {
                "value": {
                    "value": "[embedding.tobytes()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/vggish/vggish_slim.py": {
        "tensorflow": {
            "Saver_134": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vggish_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if v.name in vggish_var_names]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "vggish_load_pretrained",
                    "type": "str",
                    "possible_values": []
                },
                "write_version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, params.NUM_FRAMES, params.NUM_BANDS), name='input_features')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, params.NUM_FRAMES, params.NUM_BANDS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "vggish",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "features_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, params.NUM_FRAMES, params.NUM_BANDS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_106": {
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(features_tensor, [-1, params.NUM_FRAMES, params.NUM_BANDS, 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.fully_connected, 4096, scope='fc1')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, params.EMBEDDING_SIZE, scope='fc2', activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_71": {
                "stddev": {
                    "value": "params.INIT_STDDEV",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/vggish/vggish_smoke_test.py": {
        "tensorflow": {
            "Graph_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/vggish/vggish_train_demo.py": {
        "tensorflow": {
            "run_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "mymodel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc, _NUM_CLASSES, activation_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "create_global_step_149": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "labels_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, _NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_157": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(fc, _NUM_CLASSES, activation_fn=None, scope='logits')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, _NUM_CLASSES), name='labels')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=labels_input, name='xent')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "vggish_params.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "vggish_params.ADAM_EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_139": {
                "features": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vggish_slim.define_vggish_slim(training=FLAGS.train_vggish)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_160": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(xent, name='loss_op')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/yamnet/export.py": {
        "tensorflow": {
            "load_151": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "saved_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(export_dir, 'saved_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "Interpreter_166": {
                "variable": {
                    "value": "interpreter",
                    "type": "variable",
                    "possible_values": []
                },
                "model_path": {
                    "value": "tflite_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(export_dir, 'yamnet.tflite')",
                            "Call"
                        ]
                    ]
                }
            },
            "Asset_52": {
                "variable": {
                    "value": "self._class_map_asset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "path": {
                    "value": "yamnet_class_map.csv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "function_58": {
                "input_signature": {
                    "value": "(tf.TensorSpec(shape=[None], dtype=tf.float32),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "yamnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "YAMNet(weights_path, params)",
                            "Call"
                        ],
                        [
                            "YAMNet(weights_path, params)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "export_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "export_dir",
                            "Method Argument"
                        ],
                        [
                            "export_dir",
                            "Method Argument"
                        ],
                        [
                            "export_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_146": {
                "obj": {
                    "value": "yamnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "YAMNet(weights_path, params)",
                            "Call"
                        ],
                        [
                            "YAMNet(weights_path, params)",
                            "Call"
                        ]
                    ]
                },
                "export_dir": {
                    "value": "saved_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(export_dir, 'saved_model')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorSpec_58": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/yamnet/features.py": {
        "tensorflow": {
            "cast_90": {
                "variable": {
                    "value": "min_num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_waveform_seconds * params.sample_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_92": {
                "variable": {
                    "value": "num_padding_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "min_num_samples - num_samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_97": {
                "variable": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(waveform)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(num_samples, min_num_samples)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(min_waveform_seconds * params.sample_rate, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_99": {
                "variable": {
                    "value": "hop_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params.patch_hop_seconds * params.sample_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "num_hops_after_first_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.ceil(tf.cast(num_samples_after_first_patch, tf.float32) / tf.cast(hop_samples, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_106": {
                "variable": {
                    "value": "padded_waveform",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "waveform",
                            "Method Argument"
                        ],
                        [
                            "waveform",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, num_padding_samples]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "frame_161": {
                "variable": {
                    "value": "framed_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "signal": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signal",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "frame_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_length",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "frame_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_to_mel_weight_matrix_50": {
                "variable": {
                    "value": "linear_to_mel_weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "num_mel_bins": {
                    "value": "params.mel_bands",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_spectrogram_bins": {
                    "value": "num_spectrogram_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fft_length // 2 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "sample_rate": {
                    "value": "params.sample_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lower_edge_hertz": {
                    "value": "params.mel_min_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upper_edge_hertz": {
                    "value": "params.mel_max_hz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "mel_spectrogram",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "magnitude_spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tflite_stft_magnitude(signal=waveform, frame_length=window_length_samples, frame_step=hop_length_samples, fft_length=fft_length)",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.signal.stft(signals=waveform, frame_length=window_length_samples, frame_step=hop_length_samples, fft_length=fft_length))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "linear_to_mel_weight_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.linear_to_mel_weight_matrix(num_mel_bins=params.mel_bands, num_spectrogram_bins=num_spectrogram_bins, sample_rate=params.sample_rate, lower_edge_hertz=params.mel_min_hz, upper_edge_hertz=params.mel_max_hz)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_58": {
                "variable": {
                    "value": "log_mel_spectrogram",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mel_spectrogram + params.log_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "frame_72": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "signal": {
                    "value": "log_mel_spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(mel_spectrogram + params.log_offset)",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "patch_window_length_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(spectrogram_sample_rate * params.patch_window_seconds))",
                            "Call"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "patch_hop_length_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(spectrogram_sample_rate * params.patch_hop_seconds))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_136": {
                "variable": {
                    "value": "real_dft_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.real(complex_dft_matrix_kept_values).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "real_dft_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_139": {
                "variable": {
                    "value": "imag_dft_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.imag(complex_dft_matrix_kept_values).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "imaginary_dft_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_144": {
                "variable": {
                    "value": "padded_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "framed_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.frame(signal, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "framed_signal",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [half_pad, fft_length - signal_frame_length - half_pad]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "real_stft",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "padded_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(framed_signal, [[0, 0], [half_pad, fft_length - signal_frame_length - half_pad]], mode='CONSTANT', constant_values=0.0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "real_dft_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.real(complex_dft_matrix_kept_values).astype(np.float32), name='real_dft_matrix')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "variable": {
                    "value": "imag_stft",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "padded_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(framed_signal, [[0, 0], [half_pad, fft_length - signal_frame_length - half_pad]], mode='CONSTANT', constant_values=0.0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "imag_dft_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.imag(complex_dft_matrix_kept_values).astype(np.float32), name='imaginary_dft_matrix')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_24": {
                "name": {
                    "value": "log_mel_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_42": {
                "variable": {
                    "value": "magnitude_spectrogram",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.signal.stft(signals=waveform, frame_length=window_length_samples, frame_step=hop_length_samples, fft_length=fft_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "waveform",
                            "Method Argument"
                        ],
                        [
                            "waveform",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ceil_100": {
                "x": {
                    "value": "tf.cast(num_samples_after_first_patch, tf.float32) / tf.cast(hop_samples, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "tensor": {
                    "value": "tf.constant((0.5 - 0.5 * np.cos(2 * np.pi * np.arange(0, 1.0, 1.0 / frame_length))).astype(np.float32), name='hann_window')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, frame_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_159": {
                "x": {
                    "value": "tf.add(real * real, imag * imag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "(0.5 - 0.5 * np.cos(2 * np.pi * np.arange(0, 1.0, 1.0 / frame_length))).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hann_window",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "framed_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.frame(signal, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "framed_signal",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_159": {
                "x": {
                    "value": "real * real",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "imag * imag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stft_42": {
                "signals": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "waveform",
                            "Method Argument"
                        ],
                        [
                            "waveform",
                            "Method Argument"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "window_length_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(params.sample_rate * params.stft_window_seconds))",
                            "Call"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(params.sample_rate * params.stft_hop_seconds))",
                            "Call"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "fft_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** int(np.ceil(np.log(window_length_samples) / np.log(2.0)))",
                            "BinOp"
                        ],
                        [
                            "fft_length",
                            "Method Argument"
                        ],
                        [
                            "fft_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_101": {
                "x": {
                    "value": "num_samples_after_first_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples - min_num_samples",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "hop_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(params.patch_hop_seconds * params.sample_rate, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/yamnet/inference.py": {
        "tensorflow": {}
    },
    "FAD_evaluation/tensorflow_models/audioset/yamnet/yamnet.py": {
        "tensorflow": {
            "Input_120": {
                "variable": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_125": {
                "variable": {
                    "value": "frames_model",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "yamnet_frames",
                    "type": "str",
                    "possible_values": []
                },
                "inputs": {
                    "value": "waveform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input(batch_shape=(None,), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "[predictions, embeddings, log_mel_spectrogram]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_133": {
                "x": {
                    "value": "class_map_csv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_map_csv.numpy()",
                            "Call"
                        ],
                        [
                            "class_map_csv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Reshape_97": {
                "target_shape": {
                    "value": "(params.patch_frames, params.patch_bands, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(params.patch_frames, params.patch_bands)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_103": {
                "units": {
                    "value": "params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Activation_104": {
                "activation": {
                    "value": "params.classifier_activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNormalization_29": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "center": {
                    "value": "params.batchnorm_center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "params.batchnorm_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "params.batchnorm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "name": {
                    "value": "'{}/conv'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "params.conv_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "name": {
                    "value": "'{}/relu'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DepthwiseConv2D_54": {
                "name": {
                    "value": "'{}/depthwise_conv'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "params.conv_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "name": {
                    "value": "'{}/depthwise_conv/relu'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_63": {
                "name": {
                    "value": "'{}/pointwise_conv'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "params.conv_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "name": {
                    "value": "'{}/pointwise_conv/relu'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "FAD_evaluation/tensorflow_models/audioset/yamnet/yamnet_test.py": {
        "tensorflow": {
            "main_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "self.input_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(config.batch_size, config.sample_len, config.rhyfeats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_placeholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "self.cond_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(config.batch_size, config.input_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "cond_placeholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "self.output_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(config.batch_size, 29538, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "output_placeholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_31": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_32": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_37": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.config.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_44": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_65": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_90": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_137": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "Perc_Synth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules_tf.py": {
        "tensorflow": {
            "batch_normalization_8": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(tf.layers.conv2d(inputs, num_filters * 2 ** int(layer_num / 2), (filter_len, 1), strides=(2, 1), padding='same', name='G_' + str(layer_num)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'GBN_' + str(layer_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_16": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(tf.layers.conv2d(deconv, layer.shape[-1], (filter_len, 1), strides=(1, 1), padding='same', name='D_' + str(layer_num)))",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'DBN_' + str(layer_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_19": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[deconv, layer]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_53": {
                "variable": {
                    "value": "conds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(condsi, [-1, 1, config.input_features])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, config.sample_len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conds, env]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([conds, env], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, config.sample_len, 1, config.input_features + config.rhyfeats])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.batch_normalization(tf.layers.dense(inputs, config.filters, name='S_in'), training=is_train), name='S_in_BN')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, config.sample_len, 1, config.input_features + config.rhyfeats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.batch_normalization(tf.layers.dense(inputs, config.filters, name='S_in'), training=is_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "S_in_BN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_64": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(output, config.output_features, name='Fu_F')",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(tf.nn.relu(tf.layers.conv2d(inputs, num_filters * 2 ** int(layer_num / 2), (filter_len, 1), strides=(2, 1), padding='same', name='G_' + str(layer_num))), training=is_train, name='GBN_' + str(layer_num))",
                            "Call"
                        ],
                        [
                            "encoder_decoder_archi(inputs, is_train, config)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(tf.layers.dense(output, config.output_features, name='Fu_F'), training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, config.sample_len, config.output_features])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, config.sample_len, config.output_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_8": {
                "features": {
                    "value": "tf.layers.conv2d(inputs, num_filters * 2 ** int(layer_num / 2), (filter_len, 1), strides=(2, 1), padding='same', name='G_' + str(layer_num))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_16": {
                "features": {
                    "value": "tf.layers.conv2d(deconv, layer.shape[-1], (filter_len, 1), strides=(1, 1), padding='same', name='D_' + str(layer_num))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "condsi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condsi",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, config.input_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_59": {
                "x": {
                    "value": "tf.layers.dense(inputs, config.filters, name='S_in')",
                    "type": "Call",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ],
                        [
                            "is_train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_64": {
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(tf.nn.relu(tf.layers.conv2d(inputs, num_filters * 2 ** int(layer_num / 2), (filter_len, 1), strides=(2, 1), padding='same', name='G_' + str(layer_num))), training=is_train, name='GBN_' + str(layer_num))",
                            "Call"
                        ],
                        [
                            "encoder_decoder_archi(inputs, is_train, config)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(tf.layers.dense(output, config.output_features, name='Fu_F'), training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, config.sample_len, config.output_features])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.output_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Fu_F",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_8": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([conds, env], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, config.sample_len, 1, config.input_features + config.rhyfeats])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.batch_normalization(tf.layers.dense(inputs, config.filters, name='S_in'), training=is_train), name='S_in_BN')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters * 2 ** int(layer_num / 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'G_' + str(layer_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_16": {
                "input": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(inputs, size=(layer.shape[1], 1), method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(tf.nn.relu(tf.layers.conv2d(deconv, layer.shape[-1], (filter_len, 1), strides=(1, 1), padding='same', name='D_' + str(layer_num))), training=is_train, name='DBN_' + str(layer_num))",
                            "Call"
                        ],
                        [
                            "tf.concat([deconv, layer], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "layer.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'D_' + str(layer_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_59": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([conds, env], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, config.sample_len, 1, config.input_features + config.rhyfeats])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.layers.batch_normalization(tf.layers.dense(inputs, config.filters, name='S_in'), training=is_train), name='S_in_BN')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "config.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_in",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}