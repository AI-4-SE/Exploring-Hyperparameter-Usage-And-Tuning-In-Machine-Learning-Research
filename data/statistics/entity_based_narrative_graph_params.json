{
    "bin/step3_sample_negative_png.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_124": {
                "variable": {
                    "value": "sample_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sample_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGDataset(dataset_inputs)",
                            "Call"
                        ],
                        [
                            "PNGDataset(*_inputs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "sample_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sample_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGDataset(dataset_inputs)",
                            "Call"
                        ],
                        [
                            "PNGDataset(*_inputs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "edge_src",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_src'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "edge_dest",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_dest'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "edge_types",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_types'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "edge_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_norms'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_106": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_108": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "bin/step5_pretrain_png.py": {
        "sklearn": {
            "confusion_matrix_230": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[idxs]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cat_284": {
                "variable": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[te[:, 1, :].flatten() for te in target_edges]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(rels, dim=0)",
                            "Call"
                        ],
                        [
                            "rels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_417": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGPretrainDataset(train_inputs[0], train_inputs[1], args.task, is_train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_train_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_train_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, num_replicas=args.n_gpus, rank=local_rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['input_ids'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['input_mask'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['token_type_ids'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "input_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp_sample[sid]['input_edges'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "pos_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp_sample[sid]['pos_edges'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "neg_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp_sample[sid]['neg_edges'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_398": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGPretrainDataset(dev_inputs[0], dev_inputs[1], args.task, is_train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_dev_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_dev_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_408": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGPretrainDataset(train_inputs[0], train_inputs[1], args.task, is_train=True)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.n_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank",
                            "variable"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_435": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RGCNNaivePsychologyLinkPredict.from_pretrained(target_dir)",
                            "Call"
                        ],
                        [
                            "RGCNNaivePsychologyLinkPredict(**mconfig)",
                            "Call"
                        ],
                        [
                            "get_model(args.from_checkpoint, args.weight_name, args.freeze_lm)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu_id)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[args.gpu_id], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu_id]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_559": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_579": {
                "variable": {
                    "value": "args.n_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_edges, pos_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_389": {
                "device": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_561": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__514": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bin/step5_pretrain_sentiment_png.py": {
        "sklearn": {
            "confusion_matrix_181": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[idxs]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[idxs]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cat_148": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[sid]['sentiment'][:])",
                            "Call"
                        ],
                        [
                            "labels.unsquzze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGPretrainDataset(train_inputs[0], args.task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "my_train_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_train_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, num_replicas=args.n_gpus, rank=local_rank)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['input_ids'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['input_mask'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['token_type_ids'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "edge_src",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_src'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "edge_dest",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_dest'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "edge_types",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_types'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "edge_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_norms'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "label_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[sid]['sentiment'][:])",
                            "Call"
                        ],
                        [
                            "labels.unsquzze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_253": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGPretrainDataset(train_inputs[0], args.task)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.n_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank",
                            "variable"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_277": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RGCNNaivePsychology.from_pretrained(target_dir)",
                            "Call"
                        ],
                        [
                            "RGCNNaivePsychology(**mconfig)",
                            "Call"
                        ],
                        [
                            "get_model(args.from_checkpoint, args.weight_name, args.freeze_lm)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu_id)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[args.gpu_id], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu_id]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_285": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "weight": {
                    "value": "pos_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_pos_weights(train_dataset)",
                            "Call"
                        ],
                        [
                            "pos_weights.cuda(args.gpu_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_287": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_382": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_397": {
                "variable": {
                    "value": "args.n_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_244": {
                "device": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_384": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__348": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bin/step6_train_baseline.py": {
        "sklearn": {
            "precision_recall_fscore_support_262": {
                "variable": {
                    "value": "(prec, recall, f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(score >= 0.5).long()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "stack_212": {
                "variable": {
                    "value": "s_wemb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_wemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(s_wemb, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid]['sentence_word_embeddings'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_214": {
                "variable": {
                    "value": "s_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(s_attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(self.fp[exid]['sentence_attention_mask'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_217": {
                "variable": {
                    "value": "c_wemb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_wemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(c_wemb, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid]['context_word_embeddings'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_219": {
                "variable": {
                    "value": "c_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(c_attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(self.fp[exid]['context_attention_mask'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid][self.task]['labels'][:])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid][self.task]['labels'][:])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid]['{}_labels'.format(self.task)][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_402": {
                "variable": {
                    "value": "bce1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_403": {
                "variable": {
                    "value": "bce2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "wemb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wemb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(wemb, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid][self.task]['word_embeddings'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_181": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(self.fp[exid][self.task]['attention_mask'][:])",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(self.fp[exid][self.task]['attention_mask'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid][self.task]['labels'][:])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid][self.task]['labels'][:])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid]['{}_labels'.format(self.task)][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_193": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(self.fp[exid][self.task]['input_ids'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(self.fp[exid][self.task]['attention_mask'][:])",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(self.fp[exid][self.task]['attention_mask'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(self.fp[exid][self.task]['token_type_ids'][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.stack(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid][self.task]['labels'][:])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid][self.task]['labels'][:])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[exid]['{}_labels'.format(self.task)][:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_242": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_255": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dir_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_257": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dir_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_ys, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_preds, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_317": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetClass(dinputs, args.task, use_lm=not args.not_use_lm)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "label_corelation_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_corelation_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_244": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_324": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetClass(dinputs, args.task, use_lm=not args.not_use_lm)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self_attention_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self_attention_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__455": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bin/step6_train_png.py": {
        "sklearn": {
            "precision_recall_fscore_support_177": {
                "variable": {
                    "value": "(prec, recall, f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(score >= 0.5).long()",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_160": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(self.fp[sid][self.task]['labels'][:])",
                            "Call"
                        ],
                        [
                            "labels.unsquzze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_245": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGDataset(test_inputs[0], test_inputs[1], args.task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_324": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGDataset(train_inputs[0], train_inputs[1], args.task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_331": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PNGDataset(dev_inputs[0], dev_inputs[1], args.task)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "my_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_collate",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['input_ids'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['input_mask'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][self.task]['token_type_ids'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "edge_src",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_src'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "edge_dest",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_dest'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "edge_types",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_types'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "edge_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid]['edge_norms'][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_ys, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_scores, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_365": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(config['class_weight'][self.task])",
                            "Call"
                        ],
                        [
                            "pos_weight.cuda(args.gpu_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_367": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_467": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_469": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__416": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bin/step6_train_simple.py": {
        "sklearn": {
            "confusion_matrix_202": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_276": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimpleLMDataset(test_inputs[0], test_inputs[1], test_examples)",
                            "Call"
                        ],
                        [
                            "SimpleFFNDataset(test_inputs[0], test_inputs[1], test_examples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_312": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimpleLMDataset(train_inputs[0], train_inputs[1], train_examples)",
                            "Call"
                        ],
                        [
                            "SimpleFFNDataset(train_inputs[0], train_inputs[1], train_examples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_318": {
                "variable": {
                    "value": "dev_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimpleLMDataset(dev_inputs[0], dev_inputs[1], dev_examples)",
                            "Call"
                        ],
                        [
                            "SimpleFFNDataset(dev_inputs[0], dev_inputs[1], dev_examples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_339": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "word_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[sid][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_191": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dir_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dir_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "all_y_maslow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_y_maslow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_y_maslow, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "all_y_reiss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_y_reiss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_y_reiss, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "all_y_plutchik",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_y_plutchik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_y_plutchik, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "all_pred_maslow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_pred_maslow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pred_maslow, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "all_pred_reiss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_pred_reiss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pred_reiss, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "all_pred_plutchik",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_pred_plutchik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pred_plutchik, dim=0).cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_180": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_437": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__393": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_441": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "bin/step1_create_splits.py": {
        "torch": {}
    },
    "bin/step2_parse_doc.py": {
        "torch": {}
    },
    "bin/step4_prepare_baseline_inputs.py": {
        "torch": {
            "zeros_99": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(wemb.shape[0], n_paddings, wemb.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "wemb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wemb, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bin/step4_prepare_png_inputs.py": {
        "torch": {
            "from_numpy_97": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bin/step4_prepare_simple_inputs.py": {
        "torch": {
            "from_numpy_104": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_input_ids[sid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_input_mask[sid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "englib/common/utils.py": {
        "torch": {
            "Adam_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "adam_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adam_epsilon",
                            "Method Argument"
                        ],
                        [
                            "adam_epsilon",
                            "Method Argument"
                        ],
                        [
                            "adam_epsilon",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "adam_betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adam_betas",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_157": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dir_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(dir_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_233": {
                "variable": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, log_fname) if log_fname else os.path.join(log_dir, 'log')",
                            "IfExp"
                        ],
                        [
                            "os.path.join(target_dir, 'optimizer.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'optimizer.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'scheduler.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_181": {
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, log_fname) if log_fname else os.path.join(log_dir, 'log')",
                            "IfExp"
                        ],
                        [
                            "os.path.join(target_dir, 'optimizer.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'optimizer.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'scheduler.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_199": {
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, log_fname) if log_fname else os.path.join(log_dir, 'log')",
                            "IfExp"
                        ],
                        [
                            "os.path.join(target_dir, 'optimizer.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'optimizer.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'scheduler.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_220": {
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, log_fname) if log_fname else os.path.join(log_dir, 'log')",
                            "IfExp"
                        ],
                        [
                            "os.path.join(target_dir, 'optimizer.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'optimizer.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'scheduler.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(target_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "englib/models/bert_rgcn.py": {
        "torch": {
            "gather_48": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_idxs.view(-1, 1).unsqueeze(2).repeat(1, 1, emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(node_embeddings, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_rels, self.in_feat, self.out_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_245": {
                "variable": {
                    "value": "self.w_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_output_rels, h_dim, h_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_249": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_271": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding[target_edges[0]].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.distance_to_similarity(e)",
                            "Call"
                        ],
                        [
                            "self.out_l1(h)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(self.out_l1(h))",
                            "Call"
                        ],
                        [
                            "self.out_l1(h)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(self.out_l1(h))",
                            "Call"
                        ],
                        [
                            "sum(self.bigram[tok1].values())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_relation[target_edges[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_271": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_385": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_relation.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_399": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_421": {
                "variable": {
                    "value": "self.w_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_output_rels, h_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_433": {
                "variable": {
                    "value": "self._loss_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_434": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "p_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p_score, dim=0)",
                            "Call"
                        ],
                        [
                            "self.pn_scoring(emb, te)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_520": {
                "variable": {
                    "value": "n_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "n_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(n_score, dim=0)",
                            "Call"
                        ],
                        [
                            "self.pn_scoring(emb, te)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_531": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_embs + r_embs - d_embs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "self.distance_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_541": {
                "variable": {
                    "value": "p_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "n_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "n_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(n_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(n_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y_pred, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_556": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_574": {
                "variable": {
                    "value": "self.arg_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_dim if idx == 0 else self.h_dim",
                            "IfExp"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_579": {
                "variable": {
                    "value": "self.arg_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_584": {
                "variable": {
                    "value": "self.event_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "h_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_589": {
                "variable": {
                    "value": "self.event_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_594": {
                "variable": {
                    "value": "self.event_l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_599": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_602": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([n_negs])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_664": {
                "variable": {
                    "value": "arg_h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e1_arg_h2, e2_arg_h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_676": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_677": {
                "variable": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_ys, dim=0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_ys, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_688": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_689": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_logits, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_690": {
                "variable": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_ys, dim=0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_ys, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_712": {
                "variable": {
                    "value": "self.mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_714": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_719": {
                "variable": {
                    "value": "self.attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(h_dim, 1, bias=False) if i < n_steps - 1 else nn.Linear(h_dim, 1) for i in range(self.n_steps)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_724": {
                "variable": {
                    "value": "self.score_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(h_dim, 1, bias=False) if i < n_steps - 1 else nn.Linear(h_dim, 1) for i in range(self.n_steps)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "BCELoss_731": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_736": {
                "variable": {
                    "value": "attn_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(attn_ws, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_738": {
                "variable": {
                    "value": "h_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_ws.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "rnn_out[:, :self.n_steps - 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_754": {
                "variable": {
                    "value": "attn_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(attn_ws, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_764": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._energe(emb, edges)",
                            "Call"
                        ],
                        [
                            "[F.sigmoid(score_logits[i] + score_logits[-1]) for i in range(self.n_steps - 1)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_scores(rnn_out)",
                            "Call"
                        ],
                        [
                            "self.get_scores(rnn_out)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.metric_euclid(v0s, v1s).view(batch_size, choices.shape[1], context.shape[1])",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_798": {
                "variable": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_858": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_864": {
                "variable": {
                    "value": "self.out_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_871": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_879": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_e, h_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_916": {
                "variable": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_974": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_979": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_980": {
                "variable": {
                    "value": "self.out_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_987": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1007": {
                "variable": {
                    "value": "attn_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(attn_ws, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1009": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._energe(emb, edges)",
                            "Call"
                        ],
                        [
                            "[F.sigmoid(score_logits[i] + score_logits[-1]) for i in range(self.n_steps - 1)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.get_scores(rnn_out)",
                            "Call"
                        ],
                        [
                            "self.get_scores(rnn_out)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, dim=1)",
                            "Call"
                        ],
                        [
                            "self.metric_euclid(v0s, v1s).view(batch_size, choices.shape[1], context.shape[1])",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1049": {
                "variable": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_1117": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_1118": {
                "variable": {
                    "value": "self.adj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((h_dim,), dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1122": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_1125": {
                "variable": {
                    "value": "self.softmax_d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_1127": {
                "variable": {
                    "value": "self._loss_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_1128": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1144": {
                "variable": {
                    "value": "pred_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_idxs.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1154": {
                "variable": {
                    "value": "adj_m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(k, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_1173": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v0 - v1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1221": {
                "variable": {
                    "value": "all_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_hs, dim=0).view(self.num_layers, -1, self.h_dim)",
                            "Call"
                        ],
                        [
                            "self.rnn(all_as, all_hs)",
                            "Call"
                        ],
                        [
                            "all_hs.view(-1, n, self.h_dim)",
                            "Call"
                        ],
                        [
                            "all_hs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1222": {
                "variable": {
                    "value": "all_as",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_as",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_as, dim=0).view(-1, 1, self.h_dim)",
                            "Call"
                        ],
                        [
                            "self.rnn(all_as, all_hs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1267": {
                "variable": {
                    "value": "v0s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v0s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(v0s, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1268": {
                "variable": {
                    "value": "v1s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v1s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(v1s, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1283": {
                "variable": {
                    "value": "p_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(p_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1284": {
                "variable": {
                    "value": "n_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "n_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(n_scores, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(n_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.h_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.loop_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_feat, out_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.gate_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_rels, self.in_feat, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dgl_utils.bmm_maybe_select(edges.src['h'], self.gate_weight, edges.data['rel_type']).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_196": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "self.class_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(class_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_383": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_396": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.bmm(s, r), o).squeeze()",
                            "Call"
                        ],
                        [
                            "score.view(1)",
                            "Call"
                        ],
                        [
                            "self.calc_score(emb, te)",
                            "Call"
                        ],
                        [
                            "self.calc_score(emb, te)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_512": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_edge, neg_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_745": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_v - v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_789": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coref_nids[i][-1].view(-1), neg_coref_nids[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_793": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context, choices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_806": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weighted_scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_841": {
                "obj": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ],
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ],
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_883": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_l1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_907": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coref_nids[i][-1].view(-1), neg_coref_nids[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_911": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context, choices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_922": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_957": {
                "obj": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ],
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ],
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_995": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_i, h_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "hardtanh_997": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1040": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coref_nids[i][-1].view(-1), neg_coref_nids[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1044": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context, choices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1056": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weighted_scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_1091": {
                "obj": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ],
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ],
                        [
                            "model_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1203": {
                "variable": {
                    "value": "choices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coref_nids[i][-1].view(-1), neg_coref_nids[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1208": {
                "variable": {
                    "value": "ev_nids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(context, choices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_202": {
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(d, 'model.pt')",
                            "Call"
                        ],
                        [
                            "fpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_377": {
                "variable": {
                    "value": "predicted_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.bmm(s, r), o).squeeze()",
                            "Call"
                        ],
                        [
                            "score.view(1)",
                            "Call"
                        ],
                        [
                            "self.calc_score(emb, te)",
                            "Call"
                        ],
                        [
                            "self.calc_score(emb, te)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(score)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "te[3].float()",
                            "Call"
                        ],
                        [
                            "te[3]",
                            "Subscript"
                        ],
                        [
                            "te[3]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.class_weights[te[1]]",
                            "Subscript"
                        ],
                        [
                            "F.hardtanh(self.attn(h))",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_380": {
                "variable": {
                    "value": "predicted_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.bmm(s, r), o).squeeze()",
                            "Call"
                        ],
                        [
                            "score.view(1)",
                            "Call"
                        ],
                        [
                            "self.calc_score(emb, te)",
                            "Call"
                        ],
                        [
                            "self.calc_score(emb, te)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(score)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "te[3].float()",
                            "Call"
                        ],
                        [
                            "te[3]",
                            "Subscript"
                        ],
                        [
                            "te[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_456": {
                "input": {
                    "value": "ne",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings[masked_idxs].mean(0)",
                            "Call"
                        ],
                        [
                            "self.bert_ng.merge_node_representations(instance_embs[start:end], nid2rows[i])",
                            "Call"
                        ],
                        [
                            "self.bert_ng.merge_node_representations(instance_embs[start:end], nid2rows[i])",
                            "Call"
                        ],
                        [
                            "self.bert_ng.merge_node_representations(instance_embs[start:end], nid2rows[i])",
                            "Call"
                        ],
                        [
                            "self.bert_ng.merge_node_representations(instance_embs[start:end], nid2rows[i])",
                            "Call"
                        ],
                        [
                            "self.bert_ng.merge_node_representations(instance_embs[start:end], nid2rows[i])",
                            "Call"
                        ],
                        [
                            "self.bert_ng.merge_node_representations(instance_embs[start:end], nid2rows[i])",
                            "Call"
                        ],
                        [
                            "self.bert_ng.merge_node_representations(instance_embs[start:end], nid2rows[i])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "hardtanh_657": {
                "input": {
                    "value": "self.arg_l1(e1_embs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hardtanh_658": {
                "input": {
                    "value": "self.arg_l1(e2_embs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hardtanh_660": {
                "input": {
                    "value": "self.arg_l2(e1_arg_h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hardtanh_661": {
                "input": {
                    "value": "self.arg_l2(e2_arg_h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hardtanh_665": {
                "input": {
                    "value": "self.event_l1(arg_h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hardtanh_666": {
                "input": {
                    "value": "self.event_l2(event_h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hardtanh_735": {
                "input": {
                    "value": "attn_logits[i] + attn_logits[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_736": {
                "tensors": {
                    "value": "attn_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.hardtanh(attn_logits[i] + attn_logits[-1]) for i in range(self.n_steps - 1)]",
                            "ListComp"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ],
                        [
                            "[F.hardtanh(attn_logits[i] + v_logits) for i in range(self.n_steps - 1)]",
                            "ListComp"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "hardtanh_753": {
                "input": {
                    "value": "attn_logits[i] + v_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_754": {
                "tensors": {
                    "value": "attn_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.hardtanh(attn_logits[i] + attn_logits[-1]) for i in range(self.n_steps - 1)]",
                            "ListComp"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ],
                        [
                            "[F.hardtanh(attn_logits[i] + v_logits) for i in range(self.n_steps - 1)]",
                            "ListComp"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_763": {
                "input": {
                    "value": "score_logits[i] + score_logits[-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_816": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weighted_scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_932": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_1004": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_l1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1007": {
                "tensors": {
                    "value": "attn_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.hardtanh(attn_logits[i] + attn_logits[-1]) for i in range(self.n_steps - 1)]",
                            "ListComp"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ],
                        [
                            "[F.hardtanh(attn_logits[i] + v_logits) for i in range(self.n_steps - 1)]",
                            "ListComp"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(torch.cat(attn_ws, dim=1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1066": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weighted_scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1118": {
                "*size": {
                    "value": "(h_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1249": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weighted_scores.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_282": {
                "input": {
                    "value": "instance_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_ng(input_ids, input_masks, token_type_ids, target_idxs)",
                            "Call"
                        ],
                        [
                            "self.dropout1(F.relu(instance_embs))",
                            "Call"
                        ],
                        [
                            "self.bert_ng(input_ids, input_masks, token_type_ids, target_idxs)",
                            "Call"
                        ],
                        [
                            "self.bert_ng(input_ids, input_masks, token_type_ids, target_idxs)",
                            "Call"
                        ],
                        [
                            "self.bert_ng(input_ids, input_masks, token_type_ids, target_idxs)",
                            "Call"
                        ],
                        [
                            "self.bert_ng(input_ids, input_masks, token_type_ids, target_idxs)",
                            "Call"
                        ],
                        [
                            "self.bert_ng(input_ids, input_masks, token_type_ids, target_idxs)",
                            "Call"
                        ],
                        [
                            "self.bert_ng(input_ids, input_masks, token_type_ids, target_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1216": {
                "input": {
                    "value": "adj_m.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ev_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ne[ev_nids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "norm_214": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parameters()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_216": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parameters()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_719": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_720": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_724": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_725": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1271": {
                "tensors": {
                    "value": "(v0s, v1s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "englib/models/naive_psych.py": {
        "torch": {
            "cat_1347": {
                "variable": {
                    "value": "png_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_src.view(1, -1), edge_types.view(1, -1), edge_dest.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1368": {
                "variable": {
                    "value": "neg_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, n_neg_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_1479": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1480": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['input_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1481": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bert_inputs['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_199": {
                "variable": {
                    "value": "(_, unsorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unsorted_seq_lengths.sort(0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_202": {
                "variable": {
                    "value": "packed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_word_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.index_select(0, sorted_idx)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unsorted_seq_lengths.sort(0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_204": {
                "variable": {
                    "value": "(unpacked_out, input_sizes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_layer(packed_input)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "orig_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_emb.shape[1] if pad_total_length else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Parameter_535": {
                "variable": {
                    "value": "self.w_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_rtypes, self.lm_dim, self.lm_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_565": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['input_ids'])",
                            "Call"
                        ],
                        [
                            "input_ids.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "input_ids.view(-1, w)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_566": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['input_mask'])",
                            "Call"
                        ],
                        [
                            "attention_mask.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_567": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['token_type_ids'])",
                            "Call"
                        ],
                        [
                            "token_type_ids.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_642": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_relation.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_651": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(p)",
                            "Call"
                        ],
                        [
                            "(random.randint(0, n_nodes - 1), e[1], e[2])",
                            "Tuple"
                        ],
                        [
                            "(e[0], e[1], random.randint(0, n_nodes - 1))",
                            "Tuple"
                        ],
                        [
                            "(e[0], random.randint(0, n_rtypes - 1), e[2])",
                            "Tuple"
                        ],
                        [
                            "label_sentence_map[label]",
                            "Subscript"
                        ],
                        [
                            "embedding[target_edges[0]].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r in enumerate(edge_types.tolist())",
                            "Call"
                        ],
                        [
                            "self.w_relation[target_edges[1]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_651": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_734": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['input_ids'])",
                            "Call"
                        ],
                        [
                            "input_ids.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "input_ids.view(-1, w)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_735": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['input_mask'])",
                            "Call"
                        ],
                        [
                            "attention_mask.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_736": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['token_type_ids'])",
                            "Call"
                        ],
                        [
                            "token_type_ids.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_777": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['input_ids'])",
                            "Call"
                        ],
                        [
                            "input_ids.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "input_ids.view(-1, w)",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_778": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['input_mask'])",
                            "Call"
                        ],
                        [
                            "attention_mask.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(attention_mask, dim=0)",
                            "Call"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ],
                        [
                            "attention_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_779": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(bert_inputs['token_type_ids'])",
                            "Call"
                        ],
                        [
                            "token_type_ids.cuda(gpu_id)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(token_type_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ],
                        [
                            "token_type_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_819": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(input_ids, attention_mask, token_type_ids, labels, edge_src, edge_dest, edge_types, edge_norms)",
                            "Call"
                        ],
                        [
                            "self.no_lm_forward(wemb, attention_mask, labels)",
                            "Call"
                        ],
                        [
                            "self.lm_forward(input_ids, attention_mask, token_type_ids, labels)",
                            "Call"
                        ],
                        [
                            "self.out2(self.d4(h1))",
                            "Call"
                        ],
                        [
                            "self.forward(s_wemb, s_attention_mask, c_wemb, c_attention_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_831": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_832": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_833": {
                "variable": {
                    "value": "self.d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_835": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h1_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_836": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_837": {
                "variable": {
                    "value": "self.lout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h2_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_843": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(self.d1(h_e))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_844": {
                "variable": {
                    "value": "h_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(self.d2(h_1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_942": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(input_ids, attention_mask, token_type_ids, labels, edge_src, edge_dest, edge_types, edge_norms)",
                            "Call"
                        ],
                        [
                            "self.no_lm_forward(wemb, attention_mask, labels)",
                            "Call"
                        ],
                        [
                            "self.lm_forward(input_ids, attention_mask, token_type_ids, labels)",
                            "Call"
                        ],
                        [
                            "self.out2(self.d4(h1))",
                            "Call"
                        ],
                        [
                            "self.forward(s_wemb, s_attention_mask, c_wemb, c_attention_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_947": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(input_ids, attention_mask, token_type_ids, labels, edge_src, edge_dest, edge_types, edge_norms)",
                            "Call"
                        ],
                        [
                            "self.no_lm_forward(wemb, attention_mask, labels)",
                            "Call"
                        ],
                        [
                            "self.lm_forward(input_ids, attention_mask, token_type_ids, labels)",
                            "Call"
                        ],
                        [
                            "self.out2(self.d4(h1))",
                            "Call"
                        ],
                        [
                            "self.forward(s_wemb, s_attention_mask, c_wemb, c_attention_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_960": {
                "variable": {
                    "value": "self.s_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.lm_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_961": {
                "variable": {
                    "value": "self.c_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.lm_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_964": {
                "variable": {
                    "value": "self.s_attn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "w_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_965": {
                "variable": {
                    "value": "self.s_attn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_966": {
                "variable": {
                    "value": "self.c_attn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "w_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_967": {
                "variable": {
                    "value": "self.c_attn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_969": {
                "variable": {
                    "value": "self.out1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_dim * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_970": {
                "variable": {
                    "value": "self.out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_972": {
                "variable": {
                    "value": "self.d1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_973": {
                "variable": {
                    "value": "self.d2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_974": {
                "variable": {
                    "value": "self.d3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_975": {
                "variable": {
                    "value": "self.d4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_991": {
                "variable": {
                    "value": "s_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.s_attn1(self.d1(s_lstm_out.view(-1, dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_995": {
                "variable": {
                    "value": "s_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_attn2(self.d2(s_a))",
                            "Call"
                        ],
                        [
                            "s_v.view(batch_size, n_steps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_998": {
                "variable": {
                    "value": "c_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c_attn1(self.d1(c_lstm_out.view(-1, dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1002": {
                "variable": {
                    "value": "c_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_attn2(self.d2(c_a))",
                            "Call"
                        ],
                        [
                            "c_v.view(batch_size, n_steps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1006": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_x, c_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_1008": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out1(self.d3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1014": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(input_ids, attention_mask, token_type_ids, labels, edge_src, edge_dest, edge_types, edge_norms)",
                            "Call"
                        ],
                        [
                            "self.no_lm_forward(wemb, attention_mask, labels)",
                            "Call"
                        ],
                        [
                            "self.lm_forward(input_ids, attention_mask, token_type_ids, labels)",
                            "Call"
                        ],
                        [
                            "self.out2(self.d4(h1))",
                            "Call"
                        ],
                        [
                            "self.forward(s_wemb, s_attention_mask, c_wemb, c_attention_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1054": {
                "variable": {
                    "value": "self.context_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1113": {
                "variable": {
                    "value": "pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_sent_emb.unsqueeze(1).expand(b, n_context, dim), context_embs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "hardtanh_1120": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.context_attn(pair_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1122": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.hardtanh(self.context_attn(pair_emb)).view(b, n_context)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=1)",
                            "Call"
                        ],
                        [
                            "F.hardtanh(self.context_attn(pair_emb)).view(b, n_context)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1131": {
                "variable": {
                    "value": "h_e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_s, h_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1143": {
                "variable": {
                    "value": "maslow_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maslow_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maslow_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids, input_mask, sent_idxs)",
                            "Call"
                        ],
                        [
                            "self.maslow_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(word_emb, input_mask, sent_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1144": {
                "variable": {
                    "value": "reiss_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reiss_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reiss_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids, input_mask, sent_idxs)",
                            "Call"
                        ],
                        [
                            "self.reiss_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(word_emb, input_mask, sent_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1145": {
                "variable": {
                    "value": "plutchik_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plutchik_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.plutchik_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids, input_mask, sent_idxs)",
                            "Call"
                        ],
                        [
                            "self.plutchik_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(word_emb, input_mask, sent_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1189": {
                "variable": {
                    "value": "self.context_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1288": {
                "variable": {
                    "value": "maslow_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maslow_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.maslow_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids, input_mask, sent_idxs)",
                            "Call"
                        ],
                        [
                            "self.maslow_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(word_emb, input_mask, sent_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1289": {
                "variable": {
                    "value": "reiss_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reiss_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reiss_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids, input_mask, sent_idxs)",
                            "Call"
                        ],
                        [
                            "self.reiss_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(word_emb, input_mask, sent_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1290": {
                "variable": {
                    "value": "plutchik_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plutchik_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.plutchik_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids, input_mask, sent_idxs)",
                            "Call"
                        ],
                        [
                            "self.plutchik_classifier(h_e)",
                            "Call"
                        ],
                        [
                            "self.forward(word_emb, input_mask, sent_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_184": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_540": {
                "variable": {
                    "value": "self.cw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(class_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_616": {
                "variable": {
                    "value": "target_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pe, ne)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_637": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_878": {
                "variable": {
                    "value": "self.corelation_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_classes, self.n_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_885": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.lm_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_927": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.view(batch_size, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dgl.DGLGraph()",
                            "Call"
                        ],
                        [
                            "dgl.unbatch(bg)",
                            "Call"
                        ],
                        [
                            "dgl.DGLGraph()",
                            "Call"
                        ],
                        [
                            "dgl.unbatch(bg)",
                            "Call"
                        ],
                        [
                            "dgl.DGLGraph()",
                            "Call"
                        ],
                        [
                            "self.corelation_m.unsqueeze(0).expand(batch_size, self.n_classes, self.n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_928": {
                "variable": {
                    "value": "yp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels.view(batch_size, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dgl.DGLGraph()",
                            "Call"
                        ],
                        [
                            "dgl.unbatch(bg)",
                            "Call"
                        ],
                        [
                            "dgl.DGLGraph()",
                            "Call"
                        ],
                        [
                            "dgl.unbatch(bg)",
                            "Call"
                        ],
                        [
                            "dgl.DGLGraph()",
                            "Call"
                        ],
                        [
                            "self.corelation_m.unsqueeze(0).expand(batch_size, self.n_classes, self.n_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_930": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.corelation_m.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_1048": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.lm.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_1182": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.lm_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1257": {
                "variable": {
                    "value": "pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_sent_emb.unsqueeze(1).expand(b, n_context, dim), context_embs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "hardtanh_1264": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.context_attn(pair_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_1266": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.hardtanh(self.context_attn(pair_emb)).view(b, n_context)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=1)",
                            "Call"
                        ],
                        [
                            "F.hardtanh(self.context_attn(pair_emb)).view(b, n_context)",
                            "Call"
                        ],
                        [
                            "torch.softmax(alpha, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1275": {
                "variable": {
                    "value": "h_e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_s, h_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_173": {
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model_config.json')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_632": {
                "variable": {
                    "value": "predicted_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_score(emb, target_edges)",
                            "Call"
                        ],
                        [
                            "zip(all_scores, all_ys, all_rtypes, all_embs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.bmm(s, r), o).squeeze()",
                            "Call"
                        ],
                        [
                            "score.view(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_scores, all_ys, all_rtypes, all_embs)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cw[rtypes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_635": {
                "variable": {
                    "value": "predicted_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_score(emb, target_edges)",
                            "Call"
                        ],
                        [
                            "zip(all_scores, all_ys, all_rtypes, all_embs)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.bmm(s, r), o).squeeze()",
                            "Call"
                        ],
                        [
                            "score.view(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(all_scores, all_ys, all_rtypes, all_embs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_661": {
                "tensors": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.forward(input_ids, attention_mask, token_type_ids, input_edges, edge_types, edge_norms, pos_edges, neg_edges)",
                            "Call"
                        ],
                        [
                            "all_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_662": {
                "tensors": {
                    "value": "all_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.forward(input_ids, attention_mask, token_type_ids, input_edges, edge_types, edge_norms, pos_edges, neg_edges)",
                            "Call"
                        ],
                        [
                            "all_ys",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_663": {
                "tensors": {
                    "value": "all_rtypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.forward(input_ids, attention_mask, token_type_ids, input_edges, edge_types, edge_norms, pos_edges, neg_edges)",
                            "Call"
                        ],
                        [
                            "all_rtypes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1221": {
                "variable": {
                    "value": "sent_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left_right_last, right_left_last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "englib/narrative/dataset.py": {
        "torch": {
            "ones_284": {
                "variable": {
                    "value": "all_nid2rows",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(sum(n_nids), max_col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_509": {
                "variable": {
                    "value": "all_target_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_target_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_target_edges, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_510": {
                "variable": {
                    "value": "all_input_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_input_edges, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_518": {
                "variable": {
                    "value": "neg_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, n_missing_edges * n_neg_per_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "bert_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_inputs'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "bert_target_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_target_idxs'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "bert_nid2rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_nid2rows'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "ng_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ng_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fp[gn]['ng_edges'][:].astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ng_edges)",
                            "Call"
                        ],
                        [
                            "self.fp[gn]['ng_edges'][:].astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ng_edges)",
                            "Call"
                        ],
                        [
                            "ng_edges",
                            "Method Argument"
                        ],
                        [
                            "ng_edges",
                            "Method Argument"
                        ],
                        [
                            "ng_edges",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "coref_nids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coref_nids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fp[gn]['coref_nids'][:].astype('int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(coref_nids)",
                            "Call"
                        ],
                        [
                            "[cnids.cuda(gpu) for cnids in batch['coref_nids']]",
                            "ListComp"
                        ],
                        [
                            "coref_nids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "bert_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_inputs'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "bert_target_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_target_idxs'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "bert_nid2rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_nid2rows'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "ng_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ng_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fp[gn]['ng_edges'][:].astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ng_edges)",
                            "Call"
                        ],
                        [
                            "self.fp[gn]['ng_edges'][:].astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ng_edges)",
                            "Call"
                        ],
                        [
                            "ng_edges",
                            "Method Argument"
                        ],
                        [
                            "ng_edges",
                            "Method Argument"
                        ],
                        [
                            "ng_edges",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "bert_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_inputs'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "bert_target_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_target_idxs'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "bert_nid2rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.fp[gn]['bert_nid2rows'][:].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "edge_types",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edges[1].astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_208": {
                "variable": {
                    "value": "edge_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edges[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_208": {
                "variable": {
                    "value": "edge_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "target_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_edges.astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_503": {
                "variable": {
                    "value": "new_pos_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, n_missing_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "target_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_pos_edges, neg_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "neg_coref_nids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "neg_coref_nids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fp[gn]['negative_coref_nids'][:].astype('int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(neg_coref_nids)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "batch['neg_coref_nids']",
                            "Subscript"
                        ],
                        [
                            "[ncn.cuda(gpu) for ncn in neg_coref_nids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "target_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((new_pos_edges, neg_edges), dim=1)",
                            "Call"
                        ],
                        [
                            "self.fp[gn]['target_edges'][:].astype('int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_edges)",
                            "Call"
                        ],
                        [
                            "[te.cuda(gpu) for te in batch['target_edges']]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.fp[gn]['schema_edges'][:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target_edges.astype('int64'))",
                            "Call"
                        ],
                        [
                            "[te.cuda(gpu) for te in batch['target_edges']]",
                            "ListComp"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "input_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fp[gn]['input_edges'][:].astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input_edges)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_260": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bi[0] for bi in bert_inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bi[1] for bi in bert_inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bi[2] for bi in bert_inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "tidxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bert_target_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.fp[gn]['bert_target_idxs'][:].astype('int64'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.fp[gn]['bert_target_idxs'][:].astype('int64'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.fp[gn]['bert_target_idxs'][:].astype('int64'))",
                            "Call"
                        ],
                        [
                            "map(list, zip(*samples))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "englib/narrative/narrative_graph.py": {
        "torch": {
            "from_numpy_628": {
                "variable": {
                    "value": "nid2rows",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pad_nid2rows(bert_inputs['nid2rows'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_640": {
                "variable": {
                    "value": "edge_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "edge_types",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(edge_types)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "edge_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(edge_norms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "englib/narrative/psychology_narrative_graph.py": {
        "torch": {}
    }
}