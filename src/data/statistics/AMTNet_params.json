{
    "AMTNet.py": {
        "torch": {
            "MaxPool2d_32": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "vgg(basemodel[str(size)], input_frames * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.extras",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "add_extras(extras[str(size)], 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "head_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inpd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmd[i] * seq_len * kd * kd * fmd_mul",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg[i] * 4 * seq_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "head_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inpd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmd[i] * seq_len * kd * kd * fmd_mul",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg[i] * num_classes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ModuleList_209": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(loc, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.cat(conf, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_22": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "i",
                            "Name"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset.py": {
        "torch": {
            "stack_246": {
                "variable": {
                    "value": "rgb_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rgb_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(rgb_imgs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "flow_images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_248": {
                "variable": {
                    "value": "flow_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flow_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(flow_imgs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "rgb_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "rgb_images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rgb_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aug_imgs[:num_base_images]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rgb_images).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_199": {
                "variable": {
                    "value": "rgb_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_250": {
                "tensors": {
                    "value": "prior_gt_locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "img_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb_images[sf:sf + num_input_frames, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img_stack).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "flow_images[sf:sf + num_input_frames, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img_stack).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_194": {
                "variable": {
                    "value": "img_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_213": {
                "variable": {
                    "value": "flow_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_215": {
                "variable": {
                    "value": "flow_images",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flow_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, 1, 1)",
                            "Call"
                        ],
                        [
                            "aug_imgs[num_base_images:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(flow_images).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.stack(images, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_215": {
                "variable": {
                    "value": "flow_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_219": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "img_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb_images[sf:sf + num_input_frames, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img_stack).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "flow_images[sf:sf + num_input_frames, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img_stack).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_210": {
                "variable": {
                    "value": "img_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/shared.py": {
        "torch": {}
    },
    "evaluate.py": {
        "torch": {
            "manual_seed_94": {
                "seed": {
                    "value": "args.man_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_99": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ActionDetection(args, 'test', BaseTransform(args.ssd_dim, means), NormliseBoxes(), full_test=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_123": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_97": {
                "seed": {
                    "value": "args.man_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_279": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AMTNet(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_292": {
                "f": {
                    "value": "trained_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save_root + 'cache/' + args.exp_name + '/AMTNet_' + repr(iteration) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "layers/box_utils.py": {
        "torch": {
            "min_128": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_130": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_132": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(priors[:, :2] + loc[:, :2] * variances[0] * priors[:, 2:], priors[:, 2:] * torch.exp(loc[:, 2:] * variances[1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_271": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 - x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "(boxes[:, :2] - boxes[:, 2:] / 2, boxes[:, :2] + boxes[:, 2:] / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(boxes[:, 2:] + boxes[:, :2]) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "boxes[:, 2:] - boxes[:, :2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "tensors": {
                    "value": "[g_cxcy, g_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_298": {
                "variable": {
                    "value": "xx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_299": {
                "variable": {
                    "value": "yy1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "y1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_300": {
                "variable": {
                    "value": "xx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "x2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_301": {
                "variable": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "y2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_307": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(w, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_308": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "index_select_311": {
                "variable": {
                    "value": "rem_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(x2 - x1, y2 - y1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_labels)",
                            "Call"
                        ],
                        [
                            "gt_labels[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_199": {
                "input": {
                    "value": "g_wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(matched[:, 2:] - matched[:, :2]) / priors[:, 2:]",
                            "BinOp"
                        ],
                        [
                            "torch.log(g_wh) / variances[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_234": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes, decode(loc[:, s * 4:(s + 1) * 4], priors[:, s * 4:(s + 1) * 4], variances))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_246": {
                "input": {
                    "value": "torch.sum(torch.exp(x - x_max), 1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_293": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_294": {
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_295": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "xx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_296": {
                "input": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc, temp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "torch.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_220": {
                "input": {
                    "value": "loc[:, 2:] * variances[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_246": {
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "layers/functions/prior_box.py": {
        "torch": {}
    },
    "layers/modules/feat_pooling.py": {
        "torch": {
            "AvgPool2d_40": {
                "variable": {
                    "value": "self.spatial_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "final_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pfm1.index_select(1, self.ffm_index[0]), pfm2.index_select(1, self.ffm_index[1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "final_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(final_fm, pfm2.index_select(1, Variable(self.ffm_index[s])))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/l2norm.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_39": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/multibox_loss.py": {
        "torch": {
            "cross_entropy_37": {
                "variable": {
                    "value": "classification_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "confidence.reshape(-1, num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_41": {
                "variable": {
                    "value": "smooth_l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicted_locations[pos_mask, :].reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_locations[pos_mask, :].reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_32": {
                "input": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "confidence[mask, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/spatial_pooling.py": {
        "torch": {
            "ReplicationPad2d_12": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "pfm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pfm, temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "randn_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3, 5, 10, 19, 38]",
                            "List"
                        ]
                    ]
                },
                "layout": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3, 5, 10, 19, 38]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "set_default_tensor_type_99": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "args.man_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_206": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [param], 'lr': args.lr * mult, 'weight_decay': args.weight_decay * decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_209": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.stepvalues",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ActionDetection(args, args.train_sets, SSDAugmentation(args.ssd_dim, args.means), NormliseBoxes(), anno_transform=MatchPrior(priors, args.cfg['variance']))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_278": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ActionDetection(args, args.test_sets, BaseTransform(args.ssd_dim, args.means), NormliseBoxes(), full_test=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_406": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_103": {
                "seed": {
                    "value": "args.man_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_152": {
                "variable": {
                    "value": "base_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_root + 'weights/AMTNet_single_stream_{:s}_s{:02d}.pth'.format(args.input_type_base, args.train_split)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_153": {
                "variable": {
                    "value": "extra_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_root + '/weights/AMTNet_single_stream_{:s}_s{:02d}.pth'.format(args.input_type_extra, args.train_split)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "base_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.data_root + '/weights/{}-ssd300_ucf24_120000.pth'.format(args.input_type_base)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_187": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AMTNet(args)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_358": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_root + 'AMTNet_' + repr(iteration) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "synchronize_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_250": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "*size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "*size": {
                    "value": "(1, args.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_324": {
                "ndarray": {
                    "value": "np.asarray(losses_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_324": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_378": {
                "ndarray": {
                    "value": "np.asarray(aps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_378": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_323": {
                "*size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_377": {
                "*size": {
                    "value": "(1, args.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/augmentations.py": {
        "torch": {
            "from_numpy_277": {
                "ndarray": {
                    "value": "cvimage.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_277": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}