{
    "utilities/dataset_partitioner.py": {
        "sklearn": {
            "train_test_split_247": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "list_file_names",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "percentage_evaluation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state + batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "train_test_split_316": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "list_file_names",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "list_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "percentage_evaluation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_135": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "list_files_class",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "list_labels_class",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "percentage_evaluation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ],
                        [
                            "0.25",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state + batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_471": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(datasetpath_all)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(datasetpath_all)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(datasetpath_all)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(iod_dataset_path)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_474": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_475": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MixMatch_OOD_main.py": {
        "torch": {
            "tensor_435": {
                "variable": {
                    "value": "weight_classes_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(list_classes))",
                            "Call"
                        ],
                        [
                            "weight_classes / weight_classes.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "preds_ul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[num_labeled:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_108": {
                "variable": {
                    "value": "(highest_values, highest_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "target[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_139": {
                "variable": {
                    "value": "preds_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:bs]",
                            "Subscript"
                        ],
                        [
                            "preds[:num_labeled]",
                            "Subscript"
                        ],
                        [
                            "torch.log_softmax(preds_l, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[:bs]",
                            "Subscript"
                        ],
                        [
                            "torch.log_softmax(preds_l, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[:bs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "preds_ul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[num_labeled:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_166": {
                "variable": {
                    "value": "preds_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[:bs]",
                            "Subscript"
                        ],
                        [
                            "preds[:num_labeled]",
                            "Subscript"
                        ],
                        [
                            "torch.log_softmax(preds_l, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[:bs]",
                            "Subscript"
                        ],
                        [
                            "torch.log_softmax(preds_l, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[:bs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_170": {
                "variable": {
                    "value": "preds_ul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[num_labeled:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "preds_ul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds_ul",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[num_labeled:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ],
                        [
                            "preds[bs:]",
                            "Subscript"
                        ],
                        [
                            "torch.softmax(preds_ul, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(highest_values, highest_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "target[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "(highest_values, highest_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "array_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_predictions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_355": {
                "variable": {
                    "value": "x_ul",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for x in x_ul]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "ul_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y.unsqueeze(0).expand(args.K_transforms, -1) for y in ul_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "w_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_l, x_ul]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "w_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_labels, ul_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randperm_365": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "w_x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_368": {
                "variable": {
                    "value": "bn_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "mixed_input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_361": {
                "n": {
                    "value": "data_labeled.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "s[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_352": {
                "input": {
                    "value": "torch.stack([self.learn.model(x_ul[:, i]) for i in range(x_ul.shape[1])], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_352": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_352": {
                "tensors": {
                    "value": "[self.learn.model(x_ul[:, i]) for i in range(x_ul.shape[1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/dataset_distance_measurer.py": {
        "torch": {
            "rand_27": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_164": {
                "variable": {
                    "value": "minowski_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference_bunch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorbunch - observation_vec",
                            "BinOp"
                        ],
                        [
                            "tensorbunch - observation_vec",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_179": {
                "variable": {
                    "value": "minowski_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "difference_bunch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensorbunch - observation_vec",
                            "BinOp"
                        ],
                        [
                            "tensorbunch - observation_vec",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "tensor_bunch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(databunch1.train_ds)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "databunch1.train_ds[0][0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "databunch1.train_ds[0][0].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "databunch1.train_ds[0][0].shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_203": {
                "variable": {
                    "value": "torch_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/media/Data/user/Code_Projects/OOD4SSDL/utilities/model/final_model_ + key + .pk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_534": {
                "variable": {
                    "value": "bool_array",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "array(arr.tolist(), dtype=bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}