{
    "dataset/CamVid.py": {
        "torch": {
            "from_numpy_117": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(self.label_list[index])",
                            "Call"
                        ],
                        [
                            "transforms.Resize(scale, Image.NEAREST)(label)",
                            "Call"
                        ],
                        [
                            "RandomCrop(self.image_size, seed, pad_if_needed=True)(label)",
                            "Call"
                        ],
                        [
                            "np.array(label)",
                            "Call"
                        ],
                        [
                            "seq_det.augment_image(label)",
                            "Call"
                        ],
                        [
                            "one_hot_it_v11_dice(label, self.label_info).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.transpose(label, [2, 0, 1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "one_hot_it_v11(label, self.label_info).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(self.label_list[index])",
                            "Call"
                        ],
                        [
                            "transforms.Resize(scale, Image.NEAREST)(label)",
                            "Call"
                        ],
                        [
                            "RandomCrop(self.image_size, seed, pad_if_needed=True)(label)",
                            "Call"
                        ],
                        [
                            "np.array(label)",
                            "Call"
                        ],
                        [
                            "seq_det.augment_image(label)",
                            "Call"
                        ],
                        [
                            "one_hot_it_v11_dice(label, self.label_info).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.transpose(label, [2, 0, 1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "one_hot_it_v11(label, self.label_info).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_143": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(self.label_list[index])",
                            "Call"
                        ],
                        [
                            "transforms.Resize(scale, Image.NEAREST)(label)",
                            "Call"
                        ],
                        [
                            "RandomCrop(self.image_size, seed, pad_if_needed=True)(label)",
                            "Call"
                        ],
                        [
                            "np.array(label)",
                            "Call"
                        ],
                        [
                            "seq_det.augment_image(label)",
                            "Call"
                        ],
                        [
                            "one_hot_it_v11_dice(label, self.label_info).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.transpose(label, [2, 0, 1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "one_hot_it_v11(label, self.label_info).astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "DataParallel_56": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BiSeNet(args.num_classes, args.context_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_60": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "DataLoader_72": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(test_path, test_label_path, csv_path, scale=(args.crop_height, args.crop_width), mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_83": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BiSeNet(args.num_classes, args.context_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "softmax_26": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "flatten(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_35": {
                "variable": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersect / denominator",
                            "BinOp"
                        ],
                        [
                            "torch.mean(dice)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/build_BiSeNet.py": {
        "torch": {
            "rand_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_36": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_38": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.convblock1(input)",
                            "Call"
                        ],
                        [
                            "self.convblock2(x)",
                            "Call"
                        ],
                        [
                            "self.convblock3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(input)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, x)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_1, input_2), dim=1)",
                            "Call"
                        ],
                        [
                            "self.avgpool(feature)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "torch.mul(feature, x)",
                            "Call"
                        ],
                        [
                            "torch.add(x, feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_64": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_65": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, input_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convblock(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.convblock1(input)",
                            "Call"
                        ],
                        [
                            "self.convblock2(x)",
                            "Call"
                        ],
                        [
                            "self.convblock3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(input)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, x)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_1, input_2), dim=1)",
                            "Call"
                        ],
                        [
                            "self.avgpool(feature)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "torch.mul(feature, x)",
                            "Call"
                        ],
                        [
                            "torch.add(x, feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.convblock1(input)",
                            "Call"
                        ],
                        [
                            "self.convblock2(x)",
                            "Call"
                        ],
                        [
                            "self.convblock3(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(input)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.mul(input, x)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_1, input_2), dim=1)",
                            "Call"
                        ],
                        [
                            "self.avgpool(feature)",
                            "Call"
                        ],
                        [
                            "self.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.sigmoid(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "torch.mul(feature, x)",
                            "Call"
                        ],
                        [
                            "torch.add(x, feature)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convblock(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_144": {
                "variable": {
                    "value": "cx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_refinement_module2(cx2)",
                            "Call"
                        ],
                        [
                            "torch.mul(cx2, tail)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(cx2, size=sx.size()[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_146": {
                "variable": {
                    "value": "cx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_refinement_module1(cx1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(cx1, size=sx.size()[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "sx.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "cx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_refinement_module2(cx2)",
                            "Call"
                        ],
                        [
                            "torch.mul(cx2, tail)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(cx2, size=sx.size()[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "sx.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cx1, cx2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_160": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_fusion_module(sx, cx)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(result, scale_factor=8, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.conv(result)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.supervision1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.supervision2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_153": {
                "variable": {
                    "value": "cx1_sup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cx1_sup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.supervision1(cx1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(cx1_sup, size=input.size()[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_154": {
                "variable": {
                    "value": "cx2_sup",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cx2_sup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.supervision2(cx2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(cx2_sup, size=input.size()[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.supervision1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.supervision2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/build_contextpath.py": {
        "torch": {
            "rand_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_27": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer4(feature3)",
                            "Call"
                        ],
                        [
                            "self.layer4(feature3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_28": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(feature4, 3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(tail, 2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(feature4, 3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(tail, 2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer4(feature3)",
                            "Call"
                        ],
                        [
                            "self.layer4(feature3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(feature4, 3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(tail, 2, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(feature4, 3, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mean(tail, 2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_149": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(train_path, train_label_path, csv_path, scale=(args.crop_height, args.crop_width), loss=args.loss, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CamVid(test_path, test_label_path, csv_path, scale=(args.crop_height, args.crop_width), loss=args.loss, mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_170": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BiSeNet(args.num_classes, args.context_path)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_176": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_model_path, 'latest_dice_loss.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_178": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_186": {
                "f": {
                    "value": "args.pretrained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_model_path, 'best_dice_loss.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "argmax_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_261": {
                "variable": {
                    "value": "self.loss_function",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sort_265": {
                "variable": {
                    "value": "(loss, loss_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_function(output, target).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.threshold]",
                            "Subscript"
                        ],
                        [
                            "loss[:self.keep_num]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_271": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_function(output, target).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.threshold]",
                            "Subscript"
                        ],
                        [
                            "loss[:self.keep_num]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}