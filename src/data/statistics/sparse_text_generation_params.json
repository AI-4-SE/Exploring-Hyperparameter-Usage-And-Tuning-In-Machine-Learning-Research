{
    "language_modeling/examples/utils_glue.py": {
        "sklearn": {
            "f1_score_538": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_559": {
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/convert_pytorch_checkpoint_to_tf.py": {
        "tensorflow": {
            "as_dtype_73": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "tf_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.dtypes.as_dtype(tensor.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.replace(patt, repl)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_91": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_75": {
                "var_list": {
                    "value": "[tf_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_118": {
                "f": {
                    "value": "args.pytorch_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "language_modeling/pytorch_transformers/modeling_bert.py": {
        "tensorflow": {
            "list_variables_67": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_72": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_116": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_147": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_148": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_149": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_154": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_191": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_239": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_258": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_305": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_335": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_365": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_366": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_380": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_405": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_426": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_437": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_881": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_882": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_954": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_955": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1027": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1028": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1107": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_159": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_162": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.view(-1, input_ids.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_586": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.view(-1, input_ids.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_588": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.view(-1, input_ids.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_702": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_773": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_835": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_983": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1048": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1139": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_126": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_214": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_405": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_905": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_908": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_265": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_56": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_61": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_92": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_115": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_122": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "index_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_188": {
                "variable": {
                    "value": "present",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_220": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_222": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_349": {
                "variable": {
                    "value": "self.wte",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_350": {
                "variable": {
                    "value": "self.wpe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_351": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_352": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_353": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_505": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_509": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_569": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_573": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_676": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_375": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_ids.size(-1) + past_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_97": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_108": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_153": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_543": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_544": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_544": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_97": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_537": {
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_134": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_variable_138": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ger_186": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ],
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.CoreNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_model, d_inner)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_211": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_244": {
                "variable": {
                    "value": "self.q_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.kv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_247": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_251": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "chunk_278": {
                "variable": {
                    "value": "(head_k, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kv_net(c)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_285": {
                "variable": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(head_q, head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_295": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_303": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.qkv_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_337": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_338": {
                "variable": {
                    "value": "self.dropatt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropatt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.o_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_341": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_355": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_357": {
                "variable": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[:m, :m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tril_358": {
                "variable": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[-m:, -m:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_385": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.r_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_head * self.d_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_440": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_443": {
                "variable": {
                    "value": "BD",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_469": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_477": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_544": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_545": {
                "variable": {
                    "value": "B_",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(w_head_q, r_emb)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_562": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibnd,jbnd->ijbn', (head_q, head_k))",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "AC + BD",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_569": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_671": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_672": {
                "variable": {
                    "value": "self.emb_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_866": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_881": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_259": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_348": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_349": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_367": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), qlen - 1, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_370": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "x_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, zero_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_394": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_419": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_428": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_516": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_524": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_534": {
                "variable": {
                    "value": "r_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_emb_pad, r_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_536": {
                "variable": {
                    "value": "r_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_bias_pad, r_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_694": {
                "variable": {
                    "value": "emb_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_878": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_879": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_1022": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1172": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_205": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_206": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "d_inner",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_287": {
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_451": {
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_554": {
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_690": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_707": {
                "variable": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_921": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_923": {
                "variable": {
                    "value": "self.r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_953": {
                "variable": {
                    "value": "empty",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "data.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_973": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_979": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_675": {
                "num_embeddings": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "triu_1016": {
                "input": {
                    "value": "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1057": {
                "variable": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_182": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tril_395": {
                "input": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((x.size(0), x.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "x.size(1) - x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_678": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_683": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_684": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_928": {
                "variable": {
                    "value": "self.r_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_layer, self.max_klen, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_1013": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_1014": {
                "input": {
                    "value": "all_ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1226": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_logits(self.transformer.word_emb, self.out_layer.bias, labels, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_1199": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[0].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1204": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[i].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1086": {
                "variable": {
                    "value": "cur_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_emb_pad, cur_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_126": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_variable_130": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_212": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_218": {
                "variable": {
                    "value": "self.r_r_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.r_s_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.r_w_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_221": {
                "variable": {
                    "value": "self.seg_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_224": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_238": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_246": {
                "variable": {
                    "value": "ac",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_249": {
                "variable": {
                    "value": "bd",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_269": {
                "variable": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_277": {
                "variable": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_287": {
                "variable": {
                    "value": "attn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_393": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_394": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_inner",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_395": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_417": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_592": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_593": {
                "variable": {
                    "value": "self.mask_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_594": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_595": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_625": {
                "variable": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "triu_626": {
                "variable": {
                    "value": "mask_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_627": {
                "variable": {
                    "value": "attn_mask_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_628": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_653": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_654": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_664": {
                "variable": {
                    "value": "freq_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_896": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_976": {
                "variable": {
                    "value": "self.logits_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_185": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_256": {
                "variable": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_257": {
                "variable": {
                    "value": "ef",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_309": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_312": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_315": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_319": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_333": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_366": {
                "variable": {
                    "value": "q_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_367": {
                "variable": {
                    "value": "k_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_368": {
                "variable": {
                    "value": "v_head_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_371": {
                "variable": {
                    "value": "k_head_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tril_630": {
                "variable": {
                    "value": "mask_lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_631": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_677": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_678": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_691": {
                "variable": {
                    "value": "pos_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_693": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_746": {
                "variable": {
                    "value": "mems_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_747": {
                "variable": {
                    "value": "data_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_758": {
                "variable": {
                    "value": "non_tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_778": {
                "variable": {
                    "value": "mem_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_779": {
                "variable": {
                    "value": "cat_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_783": {
                "variable": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_923": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1110": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1129": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1131": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1133": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1139": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1141": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1145": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "p_i.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_180": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_238": {
                "start": {
                    "value": "klen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_337": {
                "variable": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_344": {
                "variable": {
                    "value": "attn_vec_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_361": {
                "variable": {
                    "value": "cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_665": {
                "input": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_1000": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1003": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1118": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sin_654": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_654": {
                "input": {
                    "value": "sinusoid_inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_757": {
                "n": {
                    "value": "qlen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_647": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_758": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_180": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/tokenization_utils.py": {
        "tensorflow": {
            "constant_1300": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1630": {
                "variable": {
                    "value": "encoding_dict[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "encoding_dict['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_1130": {
                "variable": {
                    "value": "batch_outputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_outputs['attention_mask'] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_1303": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1306": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1632": {
                "variable": {
                    "value": "encoding_dict[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "encoding_dict['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_1635": {
                "variable": {
                    "value": "encoding_dict[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "encoding_dict['attention_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_1757": {
                "variable": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[e for item in tokens for e in item[key]]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stack, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(stack, dim=0)",
                            "Call"
                        ],
                        [
                            "stack[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_1117": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "padded_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "[v + [self.pad_token_id if key == 'input_ids' else 1] * (max_seq_len - len(v)) for v in padded_value]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "abs_1132": {
                "variable": {
                    "value": "batch_outputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_outputs['attention_mask'] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1309": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['input_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1638": {
                "variable": {
                    "value": "encoding_dict[input_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "encoding_dict['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_1312": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1315": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1640": {
                "variable": {
                    "value": "encoding_dict[token_type_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "encoding_dict['token_type_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_1643": {
                "variable": {
                    "value": "encoding_dict[attention_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "encoding_dict['attention_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_1759": {
                "variable": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[e for item in tokens for e in item[key]]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(stack, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(stack, dim=0)",
                            "Call"
                        ],
                        [
                            "stack[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1119": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "padded_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "[v + [self.pad_token_id if key == 'input_ids' else 1] * (max_seq_len - len(v)) for v in padded_value]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "dialogue_generation/eval.py": {
        "torch": {
            "softmax_57": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_81": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inpu, token_type_ids=token_ids)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :]",
                            "Subscript"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_82": {
                "variable": {
                    "value": "cumulative_probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_347": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_183": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "inpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_230": {
                "variable": {
                    "value": "inpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_type_ids[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_231": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_298": {
                "variable": {
                    "value": "lm_logits_flat_shifted",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(filter(lambda a: len(a) != 1, lm_logits_flat_shifted))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_299": {
                "variable": {
                    "value": "lm_labels_flat_shifted",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(filter(lambda a: a != pad and a != eos, lm_labels_flat_shifted))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(lm_labels_flat_shifted)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "shift_logits.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "variable": {
                    "value": "jsd_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "jsd_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(jsd_batch).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_323": {
                "variable": {
                    "value": "jsd_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_329": {
                "variable": {
                    "value": "sp_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sp_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(sp_batch).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_329": {
                "variable": {
                    "value": "sp_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_339": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(p.cpu())",
                            "Call"
                        ],
                        [
                            "torch.softmax(X, dim=-1)",
                            "Call"
                        ],
                        [
                            "[probs[i, lm_labels_flat_shifted.squeeze(0)[i].item()] for i in range(len(lm_labels_flat_shifted.squeeze(0)))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_82": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_252": {
                "variable": {
                    "value": "prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax_temperature(shift_logits, temperature=args.temp, axis=1)",
                            "Call"
                        ],
                        [
                            "gen_func(shift_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "probs[:, :] + args.epsilon",
                            "BinOp"
                        ],
                        [
                            "[probs[i] / sums[i] for i in range(len(sums))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(probs)",
                            "Call"
                        ],
                        [
                            "softmax_temperature(logits.unsqueeze(0), temperature=args.temp, axis=1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "gen_func(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax_temperature(shift_logits, temperature=args.temp, axis=1)",
                            "Call"
                        ],
                        [
                            "gen_func(shift_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "probs[:, :] + args.epsilon",
                            "BinOp"
                        ],
                        [
                            "[probs[i] / sums[i] for i in range(len(sums))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(probs)",
                            "Call"
                        ],
                        [
                            "softmax_temperature(logits.unsqueeze(0), temperature=args.temp, axis=1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "gen_func(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_340": {
                "input": {
                    "value": "p ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_347": {
                "data": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "perp / nb_eval_steps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "inpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inpu, prev.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_76": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inpu, token_type_ids=token_ids)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :]",
                            "Subscript"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_237": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_ids, torch.tensor([50260]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_ids, torch.tensor([50261]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "shift_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_logits, top_filtering(l, top_p=args.top_p, top_k=args.top_k).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "[50260]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_237": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "data": {
                    "value": "[50261]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_239": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dialogue_generation/eval_utils.py": {
        "torch": {}
    },
    "dialogue_generation/model_talking_model.py": {
        "torch": {
            "softmax_90": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X * (1 / temperature)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_70": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inpu, token_type_ids=token_ids)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :]",
                            "Subscript"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_71": {
                "variable": {
                    "value": "cumulative_probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_179": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_65": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inpu, token_type_ids=token_ids)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ],
                        [
                            "logits[0, -1, :]",
                            "Subscript"
                        ],
                        [
                            "top_filtering(logits, top_k=args.top_k, top_p=args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "inpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "instance_1['input_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_222": {
                "variable": {
                    "value": "inpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_ids_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "instance_1['token_type_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_223": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "inpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "instance_2['input_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_225": {
                "variable": {
                    "value": "inpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_ids_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "instance_2['token_type_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_226": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_262": {
                "variable": {
                    "value": "prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_func(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmax_temperature(logits, temperature=args.temp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "inpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inpu, prev.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_ids, torch.tensor([50260]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_ids, torch.tensor([50261]).cuda().unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "[50260]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_232": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "data": {
                    "value": "[50261]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_240": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dialogue_generation/train.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not args.distributed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(valid_dataset) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_160": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_224": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_checkpoint, loss=loss_func)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset[input_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_111": {
                "*tensors": {
                    "value": "*tensor_datasets['valid']",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DistributedSampler_112": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_113": {
                "dataset": {
                    "value": "valid_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_device_159": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_307": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "log_dir + '/model_training_args.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_314": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "log_dir + '/model_' + str(trainer.state.epoch) + '.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__241": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__244": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dialogue_generation/utils.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_52": {
                "obj": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(dataset_cache)",
                            "Call"
                        ],
                        [
                            "json.loads(f.read())",
                            "Call"
                        ],
                        [
                            "tokenize(dataset)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dataset_cache",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/examples/distillation/dataset.py": {
        "torch": {
            "tensor_158": {
                "variable": {
                    "value": "tk_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tk_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[list(t.astype(int)) + [pad_idx] * (max_seq_len_ - len(t)) for t in token_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "lg_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths.astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/distillation/distiller.py": {
        "torch": {
            "KLDivLoss_86": {
                "variable": {
                    "value": "self.ce_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_87": {
                "variable": {
                    "value": "self.mlm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_88": {
                "variable": {
                    "value": "self.mse_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_195": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prob / x_prob.sum()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tgt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.ceil(self.mlm_mask_prop * lengths.sum().item())",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs * max_seq_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "token_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_216": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(_token_ids_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "masked_select_328": {
                "variable": {
                    "value": "s_logits_slct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.student(input_ids=input_ids, attention_mask=attention_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(mlm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_330": {
                "variable": {
                    "value": "t_logits_slct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.teacher(input_ids=input_ids, attention_mask=attention_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(mlm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "padding_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 * (bs1 // 8)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 - ml1 % 8",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, padding_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_454": {
                "obj": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mdl_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.dump_path, checkpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_126": {
                "variable": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_130": {
                "variable": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[params.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_188": {
                "start": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_249": {
                "n": {
                    "value": "bs1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_334": {
                "input": {
                    "value": "s_logits_slct / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_335": {
                "input": {
                    "value": "t_logits_slct / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__383": {
                "parameters": {
                    "value": "amp.master_params(self.optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__385": {
                "parameters": {
                    "value": "self.student.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_209": {
                "input": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(bs * max_seq_len, dtype=torch.bool, device=token_ids.device)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(-1)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/examples/distillation/scripts/extract_for_distil.py": {
        "torch": {
            "save_76": {
                "obj": {
                    "value": "compressed_sd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/distillation/train.py": {
        "torch": {
            "from_numpy_191": {
                "variable": {
                    "value": "token_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "token_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.maximum(counts, 1) ** (-args.mlm_smoothing)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(token_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/distillation/utils.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_111": {
                "device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_129": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/file_utils.py": {
        "torch": {}
    },
    "language_modeling/examples/lm_finetuning/finetune_on_pregenerated.py": {
        "torch": {
            "device_197": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_198": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_201": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_216": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_305": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(epoch_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(epoch_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_200": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_218": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_250": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BertForPreTraining.from_pretrained(args.bert_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_302": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "epoch_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_304": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "epoch_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PregeneratedDataset(epoch=epoch, training_path=args.pregenerated_data, tokenizer=tokenizer, num_data_epochs=num_data_epochs, reduce_memory=args.reduce_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "data": {
                    "value": "self.input_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "self.input_masks[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "self.segment_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "self.lm_label_ids[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "self.is_nexts[item].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/lm_finetuning/simple_lm_finetuning.py": {
        "torch": {
            "device_482": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_483": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_486": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_501": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_582": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BERTDataset(args.train_corpus, tokenizer, seq_len=args.max_seq_length, corpus_lines=None, on_memory=args.on_memory)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_485": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_503": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_538": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BertForPreTraining.from_pretrained(args.bert_model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_577": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BERTDataset(args.train_corpus, tokenizer, seq_len=args.max_seq_length, corpus_lines=None, on_memory=args.on_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_581": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BERTDataset(args.train_corpus, tokenizer, seq_len=args.max_seq_length, corpus_lines=None, on_memory=args.on_memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_134": {
                "data": {
                    "value": "cur_features.input_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "cur_features.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "cur_features.segment_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "cur_features.lm_label_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "data": {
                    "value": "cur_features.is_next",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/run_bertology.py": {
        "torch": {
            "zeros_72": {
                "variable": {
                    "value": "head_importance",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "attn_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "head_ranks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "head_importance.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_131": {
                "variable": {
                    "value": "head_ranks[head_importance.view(-1).sort(descending=True)[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "head_importance.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_147": {
                "variable": {
                    "value": "new_head_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_importance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_333": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data) if args.local_rank == -1 else DistributedSampler(eval_data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_76": {
                "variable": {
                    "value": "head_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_115": {
                "input": {
                    "value": "head_importance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_272": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_273": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_276": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_318": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_325": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'run_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_331": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(min(args.data_subset, len(eval_data))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_device_275": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_322": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_332": {
                "data_source": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_332": {
                "dataset": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_115": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/run_generation.py": {
        "torch": {
            "softmax_110": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X * (1 / temperature)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(context, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "context.unsqueeze(0).repeat(num_samples, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_173": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_174": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_94": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_95": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_func(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_138": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_func(filtered_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmax_temperature(filtered_logits, temperature=args.temp, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "generated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generated, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_90": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/examples/run_glue.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_295": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_301": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_105": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_267": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_297": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_399": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_400": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_403": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_75": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_75": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_299": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_402": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_466": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_203": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_203": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_287": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args.max_seq_length, tokenizer, output_mode, cls_token_at_end=bool(args.model_type in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args.model_type in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args.model_type in ['roberta']), pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__144": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/run_lm_finetuning.py": {
        "torch": {
            "softmax_76": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bernoulli_158": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.full(labels.shape, args.mlm_probability)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_167": {
                "variable": {
                    "value": "random_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_222": {
                "variable": {
                    "value": "continuation_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "continuation_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(continuation_logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "variable": {
                    "value": "lprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "continuation_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(continuation_logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_233": {
                "variable": {
                    "value": "one_minus_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - pred_lprobs.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_243": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_298": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_459": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_548": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_64": {
                "variable": {
                    "value": "ent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_149": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(predictions).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_324": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf='.ckpt' in args.model_name_or_path, config=config, loss=loss_func, gen_func=gen_func, mode=args.mode)",
                            "Call"
                        ],
                        [
                            "model_class(config=config, loss=loss_func, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, loss=loss_func, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, loss=loss_func, gen_func=gen_func)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_328": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf='.ckpt' in args.model_name_or_path, config=config, loss=loss_func, gen_func=gen_func, mode=args.mode)",
                            "Call"
                        ],
                        [
                            "model_class(config=config, loss=loss_func, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, loss=loss_func, gen_func=gen_func)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, loss=loss_func, gen_func=gen_func)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_701": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_702": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_705": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "self.examples[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_151": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_162": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_190": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_191": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_func(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_297": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_297": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_458": {
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_458": {
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_510": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(p.cpu())",
                            "Call"
                        ],
                        [
                            "torch.softmax(X, dim=-1)",
                            "Call"
                        ],
                        [
                            "[probs[i, shift_labels.squeeze(0)[i].item()] for i in range(len(shift_labels.squeeze(0)))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_514": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(shift_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "shift_logits.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_520": {
                "variable": {
                    "value": "jsd_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "jsd_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(jsd_batch).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_520": {
                "variable": {
                    "value": "jsd_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_527": {
                "variable": {
                    "value": "sp_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sp_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(sp_batch).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_527": {
                "variable": {
                    "value": "sp_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_531": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lprobs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(continuation_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Name"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_531": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_548": {
                "data": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "perp / len(eval_dataloader)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_704": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_821": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_166": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_234": {
                "input": {
                    "value": "one_minus_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(1.0 - pred_lprobs.exp(), min=1e-20).view(pred_toks.size(0), pred_toks.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_264": {
                "input": {
                    "value": "targets.expand(T, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_267": {
                "input": {
                    "value": "targets.expand(T, T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tril_267": {
                "input": {
                    "value": "-(context_length + 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_507": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax_temperature(shift_logits, temperature=args.temp, axis=1)",
                            "Call"
                        ],
                        [
                            "gen_func(shift_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "gen_func(shift_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "probs[:, :] + args.epsilon",
                            "BinOp"
                        ],
                        [
                            "[probs[i] / sums[i] for i in range(len(sums))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_511": {
                "input": {
                    "value": "p ** (-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_158": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "args.mlm_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_162": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_358": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__386": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__388": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_701": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_166": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_185": {
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_413": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_422": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_431": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/run_squad.py": {
        "torch": {
            "DataLoader_81": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_106": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_110": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_286": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_312": {
                "variable": {
                    "value": "all_example_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_313": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_318": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_440": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_441": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_444": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_80": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_80": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_206": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_206": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_443": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_497": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_300": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__153": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__156": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/single_model_scripts/run_openai_gpt.py": {
        "torch": {
            "device_142": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_143": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_187": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "RandomSampler_188": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_189": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_191": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensor_dataset",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SequentialSampler_192": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_140": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/single_model_scripts/run_swag.py": {
        "torch": {
            "device_328": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_329": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_332": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_347": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(train_features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_386": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(train_features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_387": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(train_features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_388": {
                "variable": {
                    "value": "all_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in train_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_389": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_394": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_506": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(eval_features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_507": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(eval_features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_508": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(eval_features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_509": {
                "variable": {
                    "value": "all_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in eval_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_510": {
                "variable": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_512": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_513": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_331": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_349": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_376": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BertForMultipleChoice.from_pretrained(args.bert_model, cache_dir=os.path.join(str(PYTORCH_PRETRAINED_BERT_CACHE), 'distributed_{}'.format(args.local_rank)), num_choices=4)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DDP(model)",
                            "Call"
                        ],
                        [
                            "BertForMultipleChoice.from_pretrained(args.output_dir, num_choices=4)",
                            "Call"
                        ],
                        [
                            "BertForMultipleChoice.from_pretrained(args.bert_model, num_choices=4)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_391": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_393": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_487": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/examples/single_model_scripts/run_transfo_xl.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/convert_gpt2_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/convert_openai_checkpoint_to_pytorch.py": {
        "torch": {
            "save_48": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/convert_roberta_checkpoint_to_pytorch.py": {
        "torch": {
            "zeros_like_70": {
                "variable": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_144": {
                "variable": {
                    "value": "max_absolute_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(our_output - their_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_146": {
                "variable": {
                    "value": "success",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "our_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "their_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roberta.model.classification_heads['mnli'](roberta.extract_features(input_ids))",
                            "Call"
                        ],
                        [
                            "roberta.model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_144": {
                "input": {
                    "value": "our_output - their_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/convert_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/convert_transfo_xl_checkpoint_to_pytorch.py": {
        "torch": {
            "save_60": {
                "obj": {
                    "value": "corpus_vocab_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corpus.vocab.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_vocab_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + VOCAB_FILES_NAMES['pretrained_vocab_file']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "corpus_dict_no_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corpus.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_dataset_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + CORPUS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_87": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/convert_xlm_checkpoint_to_pytorch.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "chkpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "xlm_checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "chkpt['model']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/convert_xlnet_checkpoint_to_pytorch.py": {
        "torch": {
            "save_69": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_distilbert.py": {
        "torch": {
            "Embedding_66": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_67": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_73": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_106": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_122": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_179": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_202": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_222": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_229": {
                "variable": {
                    "value": "self.sa_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_232": {
                "variable": {
                    "value": "self.output_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_275": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_511": {
                "variable": {
                    "value": "self.vocab_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_512": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_513": {
                "variable": {
                    "value": "self.vocab_projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_518": {
                "variable": {
                    "value": "self.mlm_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_585": {
                "variable": {
                    "value": "self.pre_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_586": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_587": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.seq_classif_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_659": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_661": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.qa_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_446": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_689": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_50": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_183": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_605": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_608": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_128": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_openai.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "variable": {
                    "value": "self.resid_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_150": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "index_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_229": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_242": {
                "variable": {
                    "value": "self.ln_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_244": {
                "variable": {
                    "value": "self.ln_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_356": {
                "variable": {
                    "value": "self.tokens_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_357": {
                "variable": {
                    "value": "self.positions_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_358": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_359": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_489": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_582": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_380": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_ids.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_517": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_609": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_616": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_118": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_134": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_179": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -1000000000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_156": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ctx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_118": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_roberta.py": {
        "torch": {
            "Linear_256": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_259": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_260": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_349": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_356": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_52": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "seq_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_244": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_332": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_335": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_transfo_xl_utilities.py": {
        "torch": {
            "cat_314": {
                "variable": {
                    "value": "all_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels.view(-1), neg_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits[:, :, None], sample_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.out_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_53": {
                "variable": {
                    "value": "self.out_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.cluster_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.cluster_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_80": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_83": {
                "variable": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_84": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_145": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_240": {
                "variable": {
                    "value": "head_logprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_273": {
                "variable": {
                    "value": "log_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "range_max + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_294": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * n_sample",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_294": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_120": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_150": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_214": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_325": {
                "equation": {
                    "value": "ijk,ijk->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[true_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_327": {
                "equation": {
                    "value": "lk,ijk->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[sample_w, inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "d_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_179": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "weight_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "bias_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_252": {
                "variable": {
                    "value": "tail_logprob_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "d_emb_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_117": {
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_utils.py": {
        "torch": {
            "Linear_745": {
                "variable": {
                    "value": "new_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_108": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_425": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_427": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_428": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_432": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_441": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_466": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_467": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_505": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_506": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_507": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_679": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_687": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_691": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_695": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "first_module.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "second_module.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_129": {
                "variable": {
                    "value": "first_module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "first_module.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, first_module.weight.shape[0] - first_module.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_334": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_609": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_628": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_630": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_632": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_638": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_640": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_644": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_685": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_689": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_693": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_697": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_428": {
                "*size": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_490": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_538": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_617": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_714": {
                "variable": {
                    "value": "cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/modeling_xlm.py": {
        "torch": {
            "arange_81": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_120": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_186": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_214": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_380": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_385": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_386": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_389": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_390": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "variable": {
                    "value": "self.ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_392": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_494": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(position_ids).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_384": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_langs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_451": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.new((slen,)).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=position_ids).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "position_ids[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_451": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_509": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_556": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_558": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "config.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "config.asm_cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "div_value": {
                    "value": "config.asm_div_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "erf_69": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_574": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_words)",
                            "Call"
                        ],
                        [
                            "self.proj.log_prob(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_713": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_716": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_399": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_404": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_126": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/optimization.py": {
        "torch": {
            "zeros_like_155": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/tests/modeling_common_test.py": {
        "torch": {
            "tensor_685": {
                "data": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_179": {
                "variable": {
                    "value": "head_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.model_tester.num_hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.model_tester.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_137": {
                "variable": {
                    "value": "traced_gpt2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(directory)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(directory)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "self.base_model_class(config)",
                            "Call"
                        ],
                        [
                            "self.lm_head_model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "self.double_head_model_class(config)",
                            "Call"
                        ],
                        [
                            "self.base_model_class.from_pretrained(model_name, cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_143": {
                "variable": {
                    "value": "loaded_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "traced_model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trace_132": {
                "input": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(directory)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(directory)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "self.base_model_class(config)",
                            "Call"
                        ],
                        [
                            "self.lm_head_model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "self.double_head_model_class(config)",
                            "Call"
                        ],
                        [
                            "self.base_model_class.from_pretrained(model_name, cache_dir=cache_dir)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_138": {
                "obj": {
                    "value": "traced_gpt2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.jit.trace(model, inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "traced_model.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/tests/modeling_roberta_test.py": {
        "torch": {
            "tensor_192": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_200": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_216": {
                "variable": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_236": {
                "variable": {
                    "value": "expected_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "allclose_206": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[[33.8843, -4.3107, 22.7779], [4.6533, -2.8099, 13.6252], [1.8222, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.0539, -0.0174], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_222": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[[33.8843, -4.3107, 22.7779], [4.6533, -2.8099, 13.6252], [1.8222, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.0539, -0.0174], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_238": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[-0.9469, 0.3913, 0.5118]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/tests/modeling_transfo_xl_test.py": {
        "torch": {
            "manual_seed_106": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/tests/modeling_xlnet_test.py": {
        "torch": {
            "zeros_97": {
                "variable": {
                    "value": "perm_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seq_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "target_mapping",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_131": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/tests/optimization_test.py": {
        "torch": {
            "Linear_74": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_45": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "language_modeling/pytorch_transformers/tokenization_transfo_xl.py": {
        "torch": {
            "load_599": {
                "variable": {
                    "value": "corpus_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_674": {
                "variable": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_121": {
                "variable": {
                    "value": "vocab_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_vocab_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_177": {
                "obj": {
                    "value": "self.__dict__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(vocab_path, VOCAB_FILES_NAMES['pretrained_vocab_file'])",
                            "Call"
                        ],
                        [
                            "vocab_path",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_213": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_227": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_604": {
                "variable": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_606": {
                "variable": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_608": {
                "variable": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_696": {
                "obj": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}