{
    "lib/toy_data.py": {
        "sklearn": {
            "make_swiss_roll_14": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "noise": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_circles_20": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_moons_56": {
                "n_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/plotTraceComparison.py": {
        "sklearn": {
            "resample_32": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "nSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values.shape[0] - 4",
                            "BinOp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "max_116": {
                "variable": {
                    "value": "ylim_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor(approxTimingMNIST)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "approxTimingMiniboone",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.00204698, 0.02248192, 0.05925171, 0.09269555, 0.13181952], [0.00197325, 0.021888, 0.05658624, 0.08444519, 0.13243289], [0.00198451, 0.0256, 0.05685863, 0.09898496, 0.13945447], [0.00199782, 0.02196685, 0.05347942, 0.09409127, 0.13435186], [0.00207565, 0.02258125, 0.05532877, 0.09219276, 0.13214721], [0.00200294, 0.02304615, 0.06069043, 0.0928809, 0.13366579], [0.00198656, 0.02010317, 0.05643674, 0.09239347, 0.13222298], [0.00201728, 0.02313114, 0.05497242, 0.09327411, 0.1349632], [0.00195686, 0.02510848, 0.05944423, 0.09257779, 0.12938856], [0.0020009, 0.0198359, 0.05545882, 0.09132032, 0.13388595], [0.00230605, 0.02441216, 0.06083686, 0.09413837, 0.1353339], [0.00202854, 0.02355405, 0.05499494, 0.09336935, 0.1351762], [0.00253235, 0.02976358, 0.0530903, 0.09212723, 0.13202228], [0.0020009, 0.02030694, 0.05293158, 0.0949504, 0.13553973], [0.0019497, 0.02337178, 0.0571433, 0.09082573, 0.13207449], [0.00200499, 0.01968742, 0.05493453, 0.09481011, 0.14179942], [0.00207258, 0.02444391, 0.05693235, 0.09386291, 0.13639885], [0.00216883, 0.02145178, 0.0561408, 0.09291776, 0.13407233], [0.00296346, 0.0231127, 0.05964186, 0.09435239, 0.13308007], [0.00210944, 0.0224297, 0.0601641, 0.09175961, 0.13343847]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "traceErrorMiniboone",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.22399592, 0.0700803, 0.05251038, 0.04112926, 0.03358838], [0.21175259, 0.06972103, 0.04838064, 0.04045253, 0.03306658], [0.21496193, 0.06821524, 0.04756567, 0.03840676, 0.03136125], [0.19982451, 0.06403704, 0.04720526, 0.03827408, 0.03041435], [0.20888096, 0.06603654, 0.04901867, 0.0370697, 0.0328706], [0.21129309, 0.06779046, 0.04861399, 0.03830324, 0.03135169], [0.20985791, 0.06680115, 0.04792466, 0.03696685, 0.03245528], [0.21677414, 0.06837571, 0.04581433, 0.04125229, 0.03183835], [0.21320291, 0.07022005, 0.04878217, 0.04066725, 0.03123112], [0.21459921, 0.07032831, 0.04619167, 0.04150819, 0.03356071], [0.2234894, 0.06709059, 0.04981212, 0.04132729, 0.03208493], [0.21790127, 0.06918178, 0.04933133, 0.03818259, 0.03425195], [0.22167198, 0.06969723, 0.0470305, 0.03707674, 0.03329653], [0.24082674, 0.07491565, 0.04908932, 0.04273553, 0.03606861], [0.19499324, 0.06544592, 0.0483457, 0.04035131, 0.03164196], [0.23307209, 0.07598016, 0.05314977, 0.04511942, 0.0346003], [0.19148827, 0.06681481, 0.04595243, 0.03640851, 0.03197488], [0.19533448, 0.06416275, 0.04717834, 0.03703568, 0.03247492], [0.22210748, 0.06772004, 0.04818948, 0.04124676, 0.03337538], [0.20792861, 0.06343383, 0.04265359, 0.03540466, 0.03049848]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "variable": {
                    "value": "exactTimingMiniboone",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.00189805], [0.00188099], [0.00189171], [0.00211219], [0.00200957], [0.00199389], [0.00214022], [0.00192339], [0.00192688], [0.0019153], [0.00189725], [0.00189731], [0.00195821], [0.00210774], [0.00200566], [0.00228646], [0.00196464], [0.0019305], [0.00244557], [0.00233907]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "approxTimingBDS",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.00196096, 0.01992499, 0.05914829, 0.09389056, 0.12557927, 0.15675801, 0.19541503], [0.00237568, 0.02242867, 0.05595239, 0.08900916, 0.12594381, 0.15561421, 0.19873485], [0.0020951, 0.02482176, 0.05906535, 0.09127732, 0.12411802, 0.15319961, 0.19669504], [0.00195174, 0.02213274, 0.05481574, 0.09024819, 0.12026573, 0.15681741, 0.19851059], [0.00200602, 0.02337587, 0.05639168, 0.09198797, 0.12295783, 0.15485133, 0.19691212], [0.00244122, 0.02244096, 0.06035251, 0.09647001, 0.12460339, 0.15235789, 0.1947044], [0.00245248, 0.02241946, 0.05773619, 0.09608295, 0.12370022, 0.15242343, 0.19164263], [0.00202035, 0.02782413, 0.06032794, 0.0908841, 0.12083405, 0.15557325, 0.19412991], [0.00268902, 0.02401485, 0.06104678, 0.09072845, 0.11465625, 0.15696485, 0.19905843], [0.00197837, 0.02306765, 0.05657805, 0.09488384, 0.11945062, 0.15574835, 0.19231643], [0.00201626, 0.02254848, 0.05652992, 0.08919347, 0.12453479, 0.15620403, 0.19640626], [0.00205107, 0.02238976, 0.06089932, 0.09200948, 0.12544614, 0.15656449, 0.19646567], [0.00204902, 0.02313216, 0.05572813, 0.09355161, 0.12560281, 0.15204352, 0.19627623], [0.00199168, 0.02330726, 0.05735526, 0.09469235, 0.12275814, 0.15653887, 0.19439821], [0.0021801, 0.02524467, 0.05821849, 0.0921815, 0.12721151, 0.15646823, 0.20083918], [0.00196403, 0.02051174, 0.05868442, 0.09549414, 0.13213082, 0.15206195, 0.20078899], [0.00204288, 0.02245222, 0.05068083, 0.09364992, 0.12617932, 0.15401575, 0.19684762], [0.00255693, 0.02551603, 0.05791744, 0.09331609, 0.12521063, 0.15728435, 0.1980283], [0.00206643, 0.02171597, 0.05827277, 0.08563917, 0.12383948, 0.15793253, 0.19470029], [0.00250368, 0.02256077, 0.05704192, 0.09220915, 0.13220045, 0.15089153, 0.19225907]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_303": {
                "variable": {
                    "value": "traceErrorBDS",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.22224732, 0.07398839, 0.04687803, 0.04231799, 0.03719367, 0.0331202, 0.02866898], [0.22899885, 0.06637849, 0.05120244, 0.03810278, 0.03313917, 0.02972283, 0.02768398], [0.22437161, 0.06693737, 0.04891766, 0.04001211, 0.03618139, 0.03179351, 0.02886512], [0.23279119, 0.06872935, 0.04922526, 0.03858438, 0.03428061, 0.03056928, 0.02815522], [0.22483462, 0.06861812, 0.04778925, 0.04283748, 0.03553044, 0.03134139, 0.02784217], [0.24206249, 0.07523844, 0.05557442, 0.04315356, 0.03542253, 0.03241287, 0.0287405], [0.21107937, 0.06687794, 0.04701358, 0.0414266, 0.03364031, 0.03075318, 0.02824883], [0.22436637, 0.06825909, 0.04680301, 0.03896724, 0.03722268, 0.03046616, 0.0286497], [0.22186267, 0.06819139, 0.04920222, 0.03770087, 0.03415415, 0.03086751, 0.02698998], [0.22473182, 0.0699812, 0.04632138, 0.04015036, 0.03232786, 0.03110034, 0.02825256], [0.20607713, 0.06801096, 0.04883099, 0.03788529, 0.03505293, 0.03012344, 0.02555213], [0.21236718, 0.0740657, 0.04891364, 0.03851217, 0.03553124, 0.03287421, 0.02734543], [0.21273059, 0.06926261, 0.04765013, 0.04096797, 0.03521183, 0.031512, 0.02731446], [0.20699681, 0.06645167, 0.05195054, 0.0393862, 0.03577903, 0.03134636, 0.02641797], [0.21683121, 0.06875283, 0.04659092, 0.03796173, 0.03430184, 0.03016153, 0.02521137], [0.23120171, 0.07039053, 0.05147018, 0.03970526, 0.03499187, 0.03093808, 0.02673643], [0.22178663, 0.07050845, 0.04779807, 0.03904643, 0.0348323, 0.030558, 0.02810326], [0.23234105, 0.07264428, 0.04754635, 0.04069406, 0.03513086, 0.03031974, 0.02696989], [0.23352592, 0.07050001, 0.05279808, 0.0438474, 0.03565584, 0.031138, 0.02937748], [0.22431205, 0.06739795, 0.04708927, 0.04052063, 0.03416919, 0.0316591, 0.02772815]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "exactTimingBDS",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.00243334], [0.00240138], [0.00223862], [0.00191088], [0.00186822], [0.00238966], [0.00229366], [0.00193875], [0.00300925], [0.00189766], [0.00211056], [0.00193008], [0.00190336], [0.00192], [0.00198621], [0.00190147], [0.00194582], [0.00254944], [0.0019625], [0.00239798]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "approxTimingMNIST",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.00208383985, 0.303277105, 0.634796023, 0.973454297, 1.26875138, 1.58261967, 1.90680981, 2.20069671, 2.48040366], [0.00218419195, 0.302417904, 0.634218514, 0.957537293, 1.27308381, 1.60399556, 1.89956093, 2.21912169, 2.48672962], [0.00216268795, 0.308395028, 0.640161812, 0.949754894, 1.25998187, 1.59414876, 1.91681635, 2.22077632, 2.48915648], [0.00231219199, 0.299216896, 0.62759012, 0.952667117, 1.26950192, 1.59411609, 1.88158262, 2.22522688, 2.48260713], [0.00214118417, 0.30223161, 0.631080925, 0.950872004, 1.27247977, 1.58668697, 1.88744187, 2.23091602, 2.47214985], [0.00204185606, 0.302155763, 0.625741839, 0.947705865, 1.27614772, 1.58635414, 1.90940773, 2.22117901, 2.51428246], [0.00244326401, 0.310180873, 0.638756812, 0.942061603, 1.27602589, 1.57963061, 1.9145534, 2.22590876, 2.46318984], [0.00209100801, 0.321886212, 0.628022254, 0.950401008, 1.2735827, 1.59494138, 1.91619575, 2.22641444, 2.50357032], [0.00226099207, 0.30160898, 0.625809371, 0.956489742, 1.26890695, 1.5697397, 1.9032104, 2.20976448, 2.48652816], [0.00208998402, 0.305045515, 0.638055444, 0.951280653, 1.27333987, 1.5705682, 1.9214499, 2.23278165, 2.49454784], [0.00205004821, 0.310762554, 0.63375771, 0.959020019, 1.25874281, 1.59699655, 1.9002471, 2.21750259, 2.47988105], [0.00214630389, 0.316698641, 0.624750614, 0.95569098, 1.27454925, 1.59527731, 1.91894329, 2.22634172, 2.50078821], [0.00200806395, 0.31404236, 0.637971461, 0.940902412, 1.28086519, 1.59389281, 1.91719842, 2.23712349, 2.49246931], [0.00199577608, 0.302376956, 0.646013975, 0.951083004, 1.28144896, 1.60936344, 1.91367579, 2.23405361, 2.50937223], [0.00306073599, 0.316940308, 0.641007602, 0.951192558, 1.27902007, 1.58712018, 1.92633653, 2.21752119, 2.50338197], [0.00209817593, 0.31210804, 0.656091154, 0.985183239, 1.28402126, 1.61969662, 1.90231442, 2.23895645, 2.51221514], [0.00206336007, 0.309849083, 0.633301973, 0.946757615, 1.27894533, 1.57923329, 1.91604125, 2.21328068, 2.50347829], [0.00206336007, 0.305488884, 0.638731241, 0.960516095, 1.25757539, 1.60113358, 1.90383101, 2.24165583, 2.48367], [0.00208076811, 0.310771763, 0.635176957, 0.941579223, 1.27896261, 1.59053111, 1.90248144, 2.23310137, 2.49199414], [0.00205414393, 0.312963068, 0.646444023, 0.958285809, 1.27928627, 1.59574628, 1.89732456, 2.22769356, 2.501369]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "traceErrorMNIST",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.24018253, 0.02369082, 0.01655071, 0.01396034, 0.01144823, 0.01047849, 0.0095299, 0.00854061, 0.00797484], [0.23493132, 0.02441182, 0.01750353, 0.01347727, 0.01155, 0.01005868, 0.00924403, 0.00861205, 0.00908603], [0.23430178, 0.02245663, 0.01697846, 0.01301396, 0.01177753, 0.01026242, 0.00972797, 0.00851057, 0.00796853], [0.23591031, 0.02403234, 0.01629571, 0.01434168, 0.01231583, 0.01095246, 0.00969691, 0.00893384, 0.00820101], [0.22689532, 0.02337767, 0.01722954, 0.01429517, 0.01214339, 0.01030727, 0.00986281, 0.00866913, 0.00863269], [0.2308149, 0.02363457, 0.01650987, 0.01375823, 0.01188187, 0.0107334, 0.0093389, 0.00959375, 0.00921414], [0.25124684, 0.02325045, 0.01749201, 0.01358495, 0.01248278, 0.01140859, 0.00950113, 0.00907979, 0.00792553], [0.23507045, 0.02369924, 0.01681624, 0.01345407, 0.01110588, 0.01080476, 0.00938544, 0.00899983, 0.00792988], [0.23164381, 0.02406703, 0.01658302, 0.01367255, 0.01114006, 0.00976226, 0.00966519, 0.00825947, 0.00789442], [0.23012693, 0.02313585, 0.01634406, 0.01420588, 0.0114622, 0.01042613, 0.0092141, 0.00794939, 0.00808467], [0.22919241, 0.02389409, 0.0167999, 0.01348217, 0.01199206, 0.01094741, 0.00984883, 0.00837392, 0.00826933], [0.2361781, 0.02385402, 0.01777303, 0.01367427, 0.01193456, 0.01086325, 0.0097221, 0.00953787, 0.00868386], [0.2245757, 0.02384206, 0.01601511, 0.01331227, 0.01195829, 0.00981491, 0.00935723, 0.0085383, 0.00810188], [0.22569421, 0.02354341, 0.01674058, 0.01408734, 0.01217772, 0.01048605, 0.00958908, 0.0087528, 0.00847875], [0.23752135, 0.02474259, 0.01603253, 0.01287877, 0.01180999, 0.01017651, 0.00992901, 0.00850735, 0.0086931], [0.23726499, 0.02293676, 0.01636312, 0.01349324, 0.0120854, 0.01093696, 0.00915058, 0.00888785, 0.00856469], [0.221249, 0.02183123, 0.01629734, 0.0131008, 0.01180154, 0.01033192, 0.00984676, 0.00878596, 0.00819684], [0.23405622, 0.02429814, 0.01630274, 0.01293633, 0.0113956, 0.01045285, 0.00971966, 0.00889976, 0.00813898], [0.24091603, 0.02339127, 0.015991, 0.01363607, 0.01187595, 0.01049466, 0.00934176, 0.00942123, 0.00768393], [0.2398438, 0.02154738, 0.01641268, 0.01327604, 0.01174884, 0.01027578, 0.00978789, 0.0086863, 0.00847579]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_414": {
                "variable": {
                    "value": "exactTimingMNIST",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0044392], [0.00433254], [0.00421174], [0.00446614], [0.00457475], [0.00422867], [0.00455546], [0.00507485], [0.0042321], [0.0048681], [0.004404], [0.00489318], [0.00428192], [0.00420458], [0.0045761], [0.00430054], [0.00442006], [0.00423517], [0.00457062], [0.00422797]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "len(domainMiniboone)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "len(domainBSDS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "len(domainMNIST)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_115": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_119": {
                "input": {
                    "value": "torch.FloatTensor(traceErrorMNIST)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_120": {
                "input": {
                    "value": "torch.FloatTensor(traceErrorMNIST)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_206": {
                "*size": {
                    "value": "len(domainMNIST)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/mnist.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='../data', train=False, download=True, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_52": {
                "variable": {
                    "value": "nTot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.targets == conditional",
                            "Compare"
                        ],
                        [
                            "test_data.targets == conditional",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "lib/dataloader.py": {
        "torch": {
            "DataLoader_54": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(dataFolder + 'MNIST', train=False, download=True, transform=transforms.Compose([AddUniformNoise(), ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_75": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "argPrec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "musqrd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "argPrec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_101": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mu ** 2 - musqrd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "nTot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.targets == conditional",
                            "Compare"
                        ],
                        [
                            "test_data.targets == conditional",
                            "Compare"
                        ]
                    ]
                }
            },
            "mean_95": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.view(images.size(0), -1)",
                            "Call"
                        ],
                        [
                            "cvt(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_96": {
                "input": {
                    "value": "images ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_101": {
                "input": {
                    "value": "mu ** 2 - musqrd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/transform.py": {
        "torch": {
            "sigmoid_10": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(samples, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "samples + np.random.uniform(size=samples.shape)",
                            "BinOp"
                        ],
                        [
                            "logit(samples / 256.0, self.alpha)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(samples).float()",
                            "Call"
                        ],
                        [
                            "np.array(samples, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(samples, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {}
    },
    "src/Autoencoder.py": {
        "torch": {
            "MSELoss_68": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "argType",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "musqrd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "argType",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_50": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_177": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(mu ** 2 - musqrd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "input": {
                    "value": "self.layer1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "input": {
                    "value": "self.layer2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "{'state_dict': net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saveDir, sStartTime + '_autoenc_checkpt.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_159": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net.encode(images)",
                            "Call"
                        ],
                        [
                            "(net.encode(images) - 2.34) / 0.005",
                            "BinOp"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_160": {
                "input": {
                    "value": "outputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_177": {
                "input": {
                    "value": "mu ** 2 - musqrd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_170": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net.encode(images)",
                            "Call"
                        ],
                        [
                            "(net.encode(images) - 2.34) / 0.005",
                            "BinOp"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/OTFlowProblem.py": {
        "torch": {
            "pad_30": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 3, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "costL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z[:, -2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "costC",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "costR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_117": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 3, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tspan[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_176": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_183": {
                "variable": {
                    "value": "dr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-gradPhi[:, -1].unsqueeze(1) + alph[0] * dv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "zFull",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*z.shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "nt + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "(dx, dl, dv, dr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "torch.pow(dx, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_158": {
                "input": {
                    "value": "-0.5 * math.log(2 * math.pi) - torch.pow(z[:, 0:d], 2) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_182": {
                "input": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(1.0 / alph[0]) * gradPhi[:, 0:d]",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_158": {
                "input": {
                    "value": "z[:, 0:d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/Phi.py": {
        "torch": {
            "Tensor_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(r, d + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.layers[0].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_85": {
                "variable": {
                    "value": "self.w.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.w.weight.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "self.c.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.c.weight.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "self.c.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.c.bias.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "variable": {
                    "value": "symA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(self.A)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "symA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_133": {
                "variable": {
                    "value": "tanhopen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opening",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N.layers[0].forward(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_146": {
                "variable": {
                    "value": "z[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "N.layers[0].weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "tanhopen.t() * z[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_159": {
                "variable": {
                    "value": "trH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp.reshape(m, -1, nex) * torch.pow(Kopen.unsqueeze(2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_9": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[1.0, 4.0, 0.5], [2.0, 5.0, 0.6], [3.0, 6.0, 0.7], [0.0, 0.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.randn(nex, d + 1)",
                            "Call"
                        ],
                        [
                            "self.act(self.layers[0].forward(x))",
                            "Call"
                        ],
                        [
                            "x + self.h * self.act(self.layers[i](x))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_9": {
                "input": {
                    "value": "1 + torch.exp(-2.0 * torch.abs(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_12": {
                "input": {
                    "value": "torch.tanh(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_169": {
                "variable": {
                    "value": "KJ",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N.layers[i].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Jac.reshape(m, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "t_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(derivTanh(temp) * term).reshape(m, -1, nex) * torch.pow(KJ, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[1.0, 4.0, 0.5], [2.0, 5.0, 0.6], [3.0, 6.0, 0.7], [0.0, 0.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.randn(nex, d + 1)",
                            "Call"
                        ],
                        [
                            "self.act(self.layers[0].forward(x))",
                            "Call"
                        ],
                        [
                            "x + self.h * self.act(self.layers[i](x))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.layers[0].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.layers[0].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.layers[0].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(r, d + 1)",
                            "Call"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_95": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_9": {
                "input": {
                    "value": "-2.0 * torch.abs(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_147": {
                "input": {
                    "value": "symA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.t(self.A), self.A)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A.t(), self.A)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_159": {
                "input": {
                    "value": "Kopen.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_181": {
                "input": {
                    "value": "symA[0:d, 0:d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_97": {
                "input": {
                    "value": "torch.matmul(x, symA) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_143": {
                "input": {
                    "value": "N.layers[i].weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.tanh(N.layers[i].forward(u[i - 1])).t() * term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_177": {
                "input": {
                    "value": "KJ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(N.layers[i].weight, Jac.reshape(m, -1))",
                            "Call"
                        ],
                        [
                            "KJ.reshape(m, -1, nex)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_179": {
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivTanh(opening.t()) * z[1]",
                            "BinOp"
                        ],
                        [
                            "tanhopen.t()",
                            "Call"
                        ],
                        [
                            "N.layers[i].forward(u[i - 1]).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_179": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.layers[0].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[1.0, 4.0, 0.5], [2.0, 5.0, 0.6], [3.0, 6.0, 0.7], [0.0, 0.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.randn(nex, d + 1)",
                            "Call"
                        ],
                        [
                            "self.act(self.layers[0].forward(x))",
                            "Call"
                        ],
                        [
                            "x + self.h * self.act(self.layers[i](x))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "symA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.t(self.A), self.A)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A.t(), self.A)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_143": {
                "input": {
                    "value": "N.layers[i].forward(u[i - 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/PhiHC.py": {
        "torch": {
            "Tensor_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_10": {
                "input": {
                    "value": "torch.exp(x) + torch.exp(-x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.opening",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.opening.weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.opening.weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.opening.weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(r, d + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "N.opening.weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "self.w.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.w.weight.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "self.c.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.c.weight.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "self.c.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.c.bias.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "symA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(self.A)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "symA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "variable": {
                    "value": "tanhopen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "opening",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N.opening(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_114": {
                "variable": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N.opening.weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "tanhopen.t() * z1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "trH1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(derivTanh(opening.t()) * z1).view(m, -1, nex) * torch.pow(Kopen.unsqueeze(2), 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_125": {
                "variable": {
                    "value": "Jac",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N.layer1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Jac.view(m, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "trH2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(derivTanh(out1) * self.w.weight.t()).view(m, -1, nex) * torch.pow(Jac, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_13": {
                "input": {
                    "value": "torch.tanh(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_10": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_13": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[1.0, 4.0, 0.5], [2.0, 5.0, 0.6], [3.0, 6.0, 0.7], [0.0, 0.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.randn(nex, d + 1)",
                            "Call"
                        ],
                        [
                            "self.act(self.opening(x))",
                            "Call"
                        ],
                        [
                            "x + self.h * self.act(self.layer1(x))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(r, d + 1)",
                            "Call"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_84": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_113": {
                "input": {
                    "value": "N.layer1.weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.tanh(out1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_115": {
                "input": {
                    "value": "symA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.t(self.A), self.A)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A.t(), self.A)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_120": {
                "input": {
                    "value": "Kopen.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_126": {
                "input": {
                    "value": "Jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Kopen.unsqueeze(2) * tanhopen.t().unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(N.layer1.weight, Jac.view(m, -1)).view(m, -1, nex)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_128": {
                "input": {
                    "value": "symA[0:d, 0:d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "torch.matmul(x, symA) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "input": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N.layer1(u0).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[1.0, 4.0, 0.5], [2.0, 5.0, 0.6], [3.0, 6.0, 0.7], [0.0, 0.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.randn(nex, d + 1)",
                            "Call"
                        ],
                        [
                            "self.act(self.opening(x))",
                            "Call"
                        ],
                        [
                            "x + self.h * self.act(self.layer1(x))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "symA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.t(self.A), self.A)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A.t(), self.A)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/mmd.py": {
        "torch": {
            "sum_26": {
                "variable": {
                    "value": "norms_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "norms_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "inner",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(expanded_1 - expanded_2) ** norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "sample_12",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sample_1, sample_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_31": {
                "input": {
                    "value": "eps + torch.abs(distances_squared)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "kernels_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-alpha * distances ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50.0 + np.random.rand(N, d)",
                            "BinOp"
                        ],
                        [
                            "x.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(M, d)",
                            "Call"
                        ],
                        [
                            "y.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y).to(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_36": {
                "input": {
                    "value": "expanded_1 - expanded_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_31": {
                "input": {
                    "value": "distances_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norms - 2 * sample_1.mm(sample_2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_103": {
                "input": {
                    "value": "k_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernels[self.n_1:, self.n_1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trace_102": {
                "input": {
                    "value": "k_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernels[:self.n_1, :self.n_1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/plotter.py": {
        "torch": {}
    },
    "test/gradTestOTFlowProblem.py": {
        "torch": {}
    },
    "test/gradTestTrHess.py": {
        "torch": {
            "vector_to_parameters_76": {
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(x.shape).type(torch.double)",
                            "Call"
                        ],
                        [
                            "torch.randn(vecX.shape).type(torch.double)",
                            "Call"
                        ],
                        [
                            "torch.randn(vecX.shape).type(torch.double)",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "netV.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_140": {
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(x.shape).type(torch.double)",
                            "Call"
                        ],
                        [
                            "torch.randn(vecX.shape).type(torch.double)",
                            "Call"
                        ],
                        [
                            "torch.randn(vecX.shape).type(torch.double)",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "netV.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_67": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_94": {
                "vec": {
                    "value": "newVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecX + h * v",
                            "BinOp"
                        ],
                        [
                            "vecX + h * v",
                            "BinOp"
                        ]
                    ]
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_131": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vector_to_parameters_161": {
                "vec": {
                    "value": "newVec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecX + h * v",
                            "BinOp"
                        ],
                        [
                            "vecX + h * v",
                            "BinOp"
                        ]
                    ]
                },
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test/testPhiGradx.py": {
        "torch": {}
    },
    "test/testPhiOpt.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_39": {
                "input": {
                    "value": "y - yLoop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_47": {
                "input": {
                    "value": "y1 - yLoop1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_48": {
                "input": {
                    "value": "y2 - yLoop2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "trainLargeOTflow.py": {
        "torch": {}
    },
    "trainMnistOTflow.py": {
        "torch": {}
    },
    "trainToyOTflow.py": {
        "torch": {}
    }
}