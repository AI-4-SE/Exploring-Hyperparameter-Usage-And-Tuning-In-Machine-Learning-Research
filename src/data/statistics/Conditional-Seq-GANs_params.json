{
    "critic.py": {
        "tensorflow": {
            "MultiRNNCell_24": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_25": {
                "variable": {
                    "value": "self.enc_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "xavier_init([size * num_layers, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiRNNCell_61": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_62": {
                "variable": {
                    "value": "self.enc_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "self.D_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "xavier_init([size * num_layers, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "self.D_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "string_to_number_106": {
                "variable": {
                    "value": "self.number_rev_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tf.constant(self.rev_vocab[4:])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "x": {
                    "value": "in_dim / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "static_rnn_38": {
                "variable": {
                    "value": "(_, inp_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.enc_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self.UPBOUND + 1, size=inp_len)",
                            "Call"
                        ],
                        [
                            "inp.split()",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "inp_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_lens",
                            "Method Argument"
                        ],
                        [
                            "inp_lens",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_51": {
                "variable": {
                    "value": "state_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state",
                            "variable"
                        ],
                        [
                            "self.cell(emb_inp, state)",
                            "Call"
                        ],
                        [
                            "init_state",
                            "variable"
                        ],
                        [
                            "self.cell(emb_inp, state)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "static_rnn_75": {
                "variable": {
                    "value": "(_, inp_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.enc_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self.UPBOUND + 1, size=inp_len)",
                            "Call"
                        ],
                        [
                            "inp.split()",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "inp_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_lens",
                            "Method Argument"
                        ],
                        [
                            "inp_lens",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_89": {
                "variable": {
                    "value": "state_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_state",
                            "variable"
                        ],
                        [
                            "self.cell(emb_inp, state)",
                            "Call"
                        ],
                        [
                            "init_state",
                            "variable"
                        ],
                        [
                            "self.cell(emb_inp, state)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'realdata{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "valuenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_46": {
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(emb_inputs)",
                            "Call"
                        ],
                        [
                            "i in enumerate(emb_inputs)",
                            "Call"
                        ],
                        [
                            "i in range(10)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_69": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'realdata{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "critic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_83": {
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(emb_inputs)",
                            "Call"
                        ],
                        [
                            "i in enumerate(emb_inputs)",
                            "Call"
                        ],
                        [
                            "i in range(10)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_106": {
                "value": {
                    "value": "self.rev_vocab[4:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRUCell_24": {
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_25": {
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "x": {
                    "value": "logits[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRUCell_61": {
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_62": {
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "x": {
                    "value": "logits[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "a": {
                    "value": "state_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(state, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat(state, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "a": {
                    "value": "state_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(state, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat(state, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.D_W",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils.py": {
        "tensorflow": {
            "Exists_94": {
                "filename": {
                    "value": "vocabulary_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_69": {
                "filename": {
                    "value": "vocabulary_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_117": {
                "filename": {
                    "value": "target_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Exists_42": {
                "filename": {
                    "value": "dev_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'dev_' + file_name)",
                            "Call"
                        ],
                        [
                            "maybe_split(data_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_43": {
                "filename": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'test_' + file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_44": {
                "filename": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_47": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_52": {
                "name": {
                    "value": "train_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'train_' + file_name)",
                            "Call"
                        ],
                        [
                            "maybe_split(data_path)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_56": {
                "name": {
                    "value": "dev_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'dev_' + file_name)",
                            "Call"
                        ],
                        [
                            "maybe_split(data_path)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_60": {
                "name": {
                    "value": "test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'test_' + file_name)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_72": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_bytes_78": {
                "variable": {
                    "value": "line",
                    "type": "variable",
                    "possible_values": []
                },
                "bytes_or_text": {
                    "value": "line",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "variable"
                        ],
                        [
                            "tf.compat.as_bytes(line)",
                            "Call"
                        ],
                        [
                            "data_file",
                            "variable"
                        ]
                    ]
                }
            },
            "GFile_89": {
                "name": {
                    "value": "vocabulary_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_96": {
                "name": {
                    "value": "vocabulary_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ],
                        [
                            "vocabulary_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_120": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_121": {
                "name": {
                    "value": "target_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_bytes_127": {
                "bytes_or_text": {
                    "value": "line",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "variable"
                        ],
                        [
                            "tf.compat.as_bytes(line)",
                            "Call"
                        ],
                        [
                            "data_file",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "seq2seq_model_comp.py": {
        "tensorflow": {
            "Variable_66": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "self.D_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(D_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "self.v_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(v_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "self.global_D_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "self.global_V_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiRNNCell_85": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_86": {
                "variable": {
                    "value": "self.enc_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(size) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('proj_w', [size, vocab_size])",
                            "Call"
                        ],
                        [
                            "zip(rewards, eos)",
                            "Call"
                        ],
                        [
                            "zip(rewards, weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_223": {
                "variable": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_seq_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_595": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "sharded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_112": {
                "variable": {
                    "value": "prev_index",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(tf.nn.softmax(self.train_sample_loop_coe * prev))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "prev_symbol",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(tf.log(tf.nn.softmax(self.train_sample_loop_coe * prev)), 1)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(tf.log(tf.nn.softmax(self.test_sample_loop_coe * prev)), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multinomial_121": {
                "variable": {
                    "value": "prev_index",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.log(tf.nn.softmax(self.test_sample_loop_coe * prev))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "prev_symbol",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prev_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(tf.log(tf.nn.softmax(self.train_sample_loop_coe * prev)), 1)",
                            "Call"
                        ],
                        [
                            "tf.multinomial(tf.log(tf.nn.softmax(self.test_sample_loop_coe * prev)), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_128": {
                "variable": {
                    "value": "local_w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_129": {
                "variable": {
                    "value": "local_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('proj_b', [vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_130": {
                "variable": {
                    "value": "local_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_167": {
                "variable": {
                    "value": "tmp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(math_ops.add_n(tmp), 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_249": {
                "variable": {
                    "value": "self.fed_rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fed_rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_476": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_477": {
                "variable": {
                    "value": "critic_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "critic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_478": {
                "variable": {
                    "value": "value_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "valuenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_484": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_485": {
                "variable": {
                    "value": "D_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.D_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_519": {
                "variable": {
                    "value": "self.pre_D_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "critic_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='critic')",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='critic')",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "sharded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_520": {
                "variable": {
                    "value": "self.pre_value_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "value_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='valuenet')",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "sharded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_521": {
                "variable": {
                    "value": "self.pre_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "s2s_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in params if x not in critic_params and x not in value_params]",
                            "ListComp"
                        ],
                        [
                            "[x for x in params if x not in critic_params]",
                            "ListComp"
                        ]
                    ]
                },
                "sharded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_131": {
                "x": {
                    "value": "tf.nn.sampled_softmax_loss(weights=local_w_t, biases=local_b, inputs=local_inputs, labels=labels, num_sampled=num_sampled, num_classes=vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_198": {
                "variable": {
                    "value": "tmp[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(math_ops.add_n(tmp), 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_500": {
                "variable": {
                    "value": "(clipped_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.losses[j], s2s_params)",
                            "Call"
                        ],
                        [
                            "tf.gradients(self.losses[j], s2s_params, self.for_G_rewards[j])",
                            "Call"
                        ],
                        [
                            "tf.gradients(self.losses[j], s2s_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_586": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_587": {
                "variable": {
                    "value": "critic_params",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "critic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_592": {
                "variable": {
                    "value": "self.pre_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "s2s_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in params if x not in critic_params and x not in value_params]",
                            "ListComp"
                        ],
                        [
                            "[x for x in params if x not in critic_params]",
                            "ListComp"
                        ]
                    ]
                },
                "sharded": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRUCell_85": {
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_86": {
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_112": {
                "x": {
                    "value": "tf.nn.softmax(self.train_sample_loop_coe * prev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_121": {
                "x": {
                    "value": "tf.nn.softmax(self.test_sample_loop_coe * prev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_131": {
                "weights": {
                    "value": "local_w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(w_t, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "local_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(b, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "local_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_166": {
                "x": {
                    "value": "tf.equal(target, data_utils.EOS_ID)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_167": {
                "x": {
                    "value": "math_ops.add_n(tmp)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_169": {
                "x": {
                    "value": "tf.equal(math_ops.add_n(tmp[i:]), math_ops.add_n(tmp))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_221": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'encoder{0}'.format(bid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'fed_sample{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_494": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.losses[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "s2s_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in params if x not in critic_params and x not in value_params]",
                            "ListComp"
                        ],
                        [
                            "[x for x in params if x not in critic_params]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "softmax_112": {
                "logits": {
                    "value": "self.train_sample_loop_coe * prev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "logits": {
                    "value": "self.test_sample_loop_coe * prev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_156": {
                "x": {
                    "value": "tf.equal(math_ops.add_n(uniform_weights[:i + 1]), math_ops.add_n(uniform_weights))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_166": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(logits, targets, weights)",
                            "Call"
                        ],
                        [
                            "zip(logits, targets, weights, rewards)",
                            "Call"
                        ],
                        [
                            "zip(logits, targets, weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "data_utils.EOS_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_169": {
                "x": {
                    "value": "math_ops.add_n(tmp[i:])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.add_n(tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_194": {
                "shape": {
                    "value": "tf.shape(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_197": {
                "x": {
                    "value": "tf.equal(target, data_utils.EOS_ID)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_198": {
                "x": {
                    "value": "math_ops.add_n(tmp)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_233": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'decoder{0}'.format(bid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_236": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'weight{0}'.format(bid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_245": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_496": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.losses[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "s2s_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in params if x not in critic_params and x not in value_params]",
                            "ListComp"
                        ],
                        [
                            "[x for x in params if x not in critic_params]",
                            "ListComp"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "self.for_G_rewards[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_498": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.losses[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "s2s_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in params if x not in critic_params and x not in value_params]",
                            "ListComp"
                        ],
                        [
                            "[x for x in params if x not in critic_params]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_507": {
                "variable": {
                    "value": "D_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.D_losses[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "critic_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='critic')",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='critic')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_508": {
                "variable": {
                    "value": "(clipped_D_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "D_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.D_losses[j], critic_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_513": {
                "variable": {
                    "value": "v_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.value_losses[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "value_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='valuenet')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_514": {
                "variable": {
                    "value": "(clipped_v_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "v_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.value_losses[j], value_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_156": {
                "x": {
                    "value": "math_ops.add_n(uniform_weights[:i + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.add_n(uniform_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "tensor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(rewards, eos)",
                            "Call"
                        ],
                        [
                            "zip(rewards, weights)",
                            "Call"
                        ],
                        [
                            "get_eos_value(each_prob_fake, fake_uniW)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(rewards, eos)",
                            "Call"
                        ],
                        [
                            "zip(rewards, weights)",
                            "Call"
                        ],
                        [
                            "get_eos_value(each_prob_fake, fake_uniW)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_194": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(logits, targets, weights)",
                            "Call"
                        ],
                        [
                            "zip(logits, targets, weights, rewards)",
                            "Call"
                        ],
                        [
                            "zip(logits, targets, weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_197": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(logits, targets, weights)",
                            "Call"
                        ],
                        [
                            "zip(logits, targets, weights, rewards)",
                            "Call"
                        ],
                        [
                            "zip(logits, targets, weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "data_utils.EOS_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'decoder{0}'.format(bid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_540": {
                "logits": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.xw_plus_b(outputs[l], self.output_projection[0], self.output_projection[1])",
                            "Call"
                        ],
                        [
                            "outs in enumerate(self.outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_552": {
                "logits": {
                    "value": "lm_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.xw_plus_b(lm_outputs[l], self.output_projection[0], self.output_projection[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_177": {
                "x": {
                    "value": "len(uniform_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_180": {
                "pred": {
                    "value": "tf.equal(i, tf.reshape(rand, []))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.ones(tf.shape(targets[0]))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros(tf.shape(targets[0]))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "tensor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(rewards, eos)",
                            "Call"
                        ],
                        [
                            "zip(rewards, weights)",
                            "Call"
                        ],
                        [
                            "get_eos_value(each_prob_fake, fake_uniW)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_373": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "for_D_score_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_eos_value(each_prob_fake, fake_uniW)",
                            "Call"
                        ],
                        [
                            "math_ops.add_n(for_D_each_prob_fake)",
                            "Call"
                        ],
                        [
                            "math_ops.add_n(for_D_each_prob_fake) / (for_D_fake_credits + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "math_ops.add_n([tf.log(1.0 - each_prob + 1e-12) * uniW for (each_prob, uniW) in zip(each_prob_fake, fake_uniW)]) / (for_D_fake_credits + 1e-12)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_377": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "for_D_score_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_eos_value(each_prob_fake, fake_uniW)",
                            "Call"
                        ],
                        [
                            "math_ops.add_n(for_D_each_prob_fake)",
                            "Call"
                        ],
                        [
                            "math_ops.add_n(for_D_each_prob_fake) / (for_D_fake_credits + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "math_ops.add_n([tf.log(1.0 - each_prob + 1e-12) * uniW for (each_prob, uniW) in zip(each_prob_fake, fake_uniW)]) / (for_D_fake_credits + 1e-12)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_574": {
                "logits": {
                    "value": "self.print_outputs[j][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_180": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(len(outs))",
                            "Call"
                        ],
                        [
                            "i in range(len(uniform_weights))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(rand, [])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_417": {
                "input_tensor": {
                    "value": "fake_uniW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uniform_weights(samples)",
                            "Call"
                        ],
                        [
                            "uniform_weights(samples[:step] + MC_sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_418": {
                "input_tensor": {
                    "value": "real_uniW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uniform_weights(self.critic.real_data[:bucket[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_433": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_loss(outputs, targets[:bucket[1]], self.target_weights[:bucket[1]])",
                            "Call"
                        ],
                        [
                            "seq_log_prob(out_dist, self.fed_samples[:bucket[1]], [reward - tf.reduce_mean(reward) for _ in range(bucket[1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_443": {
                "logits": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.xw_plus_b(outputs[k], self.output_projection[0], self.output_projection[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_454": {
                "input_tensor": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-seq_log_prob(samples_dists, samples)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reshape_180": {
                "tensor": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([1], maxval=tf.cast(len(uniform_weights), tf.int32), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_181": {
                "shape": {
                    "value": "tf.shape(targets[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "shape": {
                    "value": "tf.shape(targets[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_365": {
                "input_tensor": {
                    "value": "for_D_score_real + for_D_score_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_368": {
                "input_tensor": {
                    "value": "tf.log(for_D_score_real) + tf.log(1.0 - for_D_score_fake)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_181": {
                "input": {
                    "value": "targets[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_182": {
                "input": {
                    "value": "targets[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_406": {
                "tensor": {
                    "value": "each_prob_fake[i] - each_prob_fake_value[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_408": {
                "tensor": {
                    "value": "each_prob_fake_value[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_432": {
                "input_tensor": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fed_rewards",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(for_D_score_fake, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(for_D_score_fake)",
                            "Call"
                        ],
                        [
                            "zip(logits, targets, weights, rewards)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_368": {
                "x": {
                    "value": "1.0 - for_D_score_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_385": {
                "input_tensor": {
                    "value": "D_prob_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "for_D_score_fake",
                            "variable"
                        ],
                        [
                            "[[r[b] for r in for_D_each_prob_fake] for b in range(batch_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_sum_386": {
                "input_tensor": {
                    "value": "D_prob_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "for_D_score_real",
                            "variable"
                        ],
                        [
                            "[[r[b] for r in for_D_each_prob_real] for b in range(batch_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "square_417": {
                "x": {
                    "value": "returns[i] - tf.reshape(each_prob_fake_value[i], [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_418": {
                "x": {
                    "value": "real_returns[i] - tf.reshape(each_prob_real_value[i], [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_417": {
                "tensor": {
                    "value": "each_prob_fake_value[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_418": {
                "tensor": {
                    "value": "each_prob_real_value[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_361": {
                "x": {
                    "value": "1.0 - each_prob + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_362": {
                "x": {
                    "value": "each_prob + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "get_checkpoint_state_43": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_42": {
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_bytes_221": {
                "bytes_or_text": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.stdin.readline()",
                            "Call"
                        ],
                        [
                            "sentence in enumerate(all_f)",
                            "Call"
                        ],
                        [
                            "sentence in enumerate(all_f[batch_idx * FLAGS.batch_size:(batch_idx + 1) * FLAGS.batch_size])",
                            "Call"
                        ],
                        [
                            "sys.stdin.readline()",
                            "Call"
                        ],
                        [
                            "sentence in enumerate(batch_sentences[batch_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_144": {
                "bytes_or_text": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.stdin.readline()",
                            "Call"
                        ],
                        [
                            "sentence in enumerate(all_f)",
                            "Call"
                        ],
                        [
                            "sentence in enumerate(all_f[batch_idx * FLAGS.batch_size:(batch_idx + 1) * FLAGS.batch_size])",
                            "Call"
                        ],
                        [
                            "sys.stdin.readline()",
                            "Call"
                        ],
                        [
                            "sentence in enumerate(batch_sentences[batch_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "as_str_176": {
                "bytes_or_text": {
                    "value": "rev_vocab[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_str_242": {
                "bytes_or_text": {
                    "value": "rev_vocab[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_str_194": {
                "bytes_or_text": {
                    "value": "rev_vocab[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_str_252": {
                "bytes_or_text": {
                    "value": "rev_vocab[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_str_264": {
                "bytes_or_text": {
                    "value": "rev_vocab[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_str_276": {
                "bytes_or_text": {
                    "value": "rev_vocab[output]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train_gan_n_rl.py": {
        "tensorflow": {
            "Variable_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "perp",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_36": {
                "variable": {
                    "value": "summary_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_72": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'log')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_73": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_25": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "loss + sum(sum(step_loss)) / FLAGS.batch_size / FLAGS.steps_per_checkpoint",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_27": {
                "name": {
                    "value": "perp",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "perp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "perp + step_perp / FLAGS.steps_per_checkpoint",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_29": {
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "reward + np.sum(step_reward, axis=0) / FLAGS.batch_size / G_step",
                            "BinOp"
                        ],
                        [
                            "np.true_divide(reward, len_times)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_32": {
                "name": {
                    "value": "D_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "D_loss + step_D_loss / FLAGS.steps_per_checkpoint / D_step",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_69": {
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "checkpoint_exists_74": {
                "checkpoint_prefix": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_78": {
                "variable": {
                    "value": "pre_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.pre_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_85": {
                "variable": {
                    "value": "pre_D_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.pre_D_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_92": {
                "variable": {
                    "value": "pre_V_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "value_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.pre_D_model_dir, '..', 'value')",
                            "Call"
                        ]
                    ]
                }
            },
            "checkpoint_exists_79": {
                "checkpoint_prefix": {
                    "value": "pre_ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "checkpoint_exists_86": {
                "checkpoint_prefix": {
                    "value": "pre_D_ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "checkpoint_exists_93": {
                "checkpoint_prefix": {
                    "value": "pre_V_ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_mle.py": {
        "tensorflow": {
            "Variable_24": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "merge_all_31": {
                "variable": {
                    "value": "summary_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_61": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'log')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_63": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_67": {
                "variable": {
                    "value": "pre_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.pre_model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_25": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_29": {
                "name": {
                    "value": "'eval_loss_{}'.format(ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_losses[ids]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variables_initializer_59": {
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "checkpoint_exists_64": {
                "checkpoint_prefix": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "checkpoint_exists_68": {
                "checkpoint_prefix": {
                    "value": "pre_ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_utils.py": {
        "tensorflow": {
            "GFile_17": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_36": {
                "name": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_path",
                            "Method Argument"
                        ],
                        [
                            "data_path",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_str_102": {
                "bytes_or_text": {
                    "value": "mycritic.rev_vocab[out]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_str_105": {
                "bytes_or_text": {
                    "value": "mycritic.rev_vocab[out]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "units.py": {
        "tensorflow": {
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "embedding_rnn_seq2seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "static_rnn_20": {
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell",
                            "Method Argument"
                        ],
                        [
                            "cell",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "embedding_rnn_decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_49": {
                "variable": {
                    "value": "emb_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "decoder_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "embedding_lookup_34": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "i in enumerate(emb_inputs)",
                            "Call"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_scope_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "loop",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}