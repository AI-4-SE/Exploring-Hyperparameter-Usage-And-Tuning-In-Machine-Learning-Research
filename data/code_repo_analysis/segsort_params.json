{
    "network/common/layers.py": {
        "tensorflow": {
            "get_variable_39": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_x[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_x[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_x[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_x[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, c_i, c_o]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_243": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, c_i, c_o]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_296": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], pad_h, pad_w, [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "moments_63": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "np.arange(len(shape_x) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, np.arange(len(shape_x) - 1), keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, [mean.shape.as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "moving_mean",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[mean.shape.as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, np.arange(len(shape_x) - 1), keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [var.shape.as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "moving_var",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[var.shape.as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_72": {
                "variable": {
                    "value": "update_moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', shape_x[-1], initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "moving_mean * decay + mean * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_75": {
                "variable": {
                    "value": "update_moving_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_variance', shape_x[-1], initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "moving_var * decay + var * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_92": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, np.arange(len(shape_x) - 1), keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, [mean.shape.as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "moving_mean",
                            "variable"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, np.arange(len(shape_x) - 1), keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [var.shape.as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "moving_var",
                            "variable"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', shape_x[-1], initializer=tf.constant_initializer(0.0), trainable=is_training)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', shape_x[-1], initializer=tf.constant_initializer(1.0), trainable=is_training)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_150": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "variable"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], pad_h, pad_w, [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_174": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c_o]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_175": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm(output, 'BatchNorm', is_training=is_bn_training, decay=decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm(output, 'BatchNorm', is_training=is_bn_training, decay=decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, k, k, 1], strides=[1, s, s, 1], padding=padding, name=name)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [c_o], trainable=is_training)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [c_o], trainable=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_188": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm(output, 'BatchNorm', is_training=is_bn_training, decay=decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm(output, 'BatchNorm', is_training=is_bn_training, decay=decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, k, k, 1], strides=[1, s, s, 1], padding=padding, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "atrous_conv2d_236": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "variable"
                        ]
                    ]
                },
                "rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_251": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c_o]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_252": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm(output, 'BatchNorm', is_training=is_bn_training, decay=decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm(output, 'BatchNorm', is_training=is_bn_training, decay=decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, k, k, 1], strides=[1, s, s, 1], padding=padding, name=name)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [c_o], trainable=is_training)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [c_o], trainable=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_264": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm(output, 'BatchNorm', is_training=is_bn_training, decay=decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm(output, 'BatchNorm', is_training=is_bn_training, decay=decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "pool_fn(x, ksize=[1, k, k, 1], strides=[1, s, s, 1], padding=padding, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_81": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, np.arange(len(shape_x) - 1), keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mean, [mean.shape.as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "moving_mean",
                            "variable"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, np.arange(len(shape_x) - 1), keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [var.shape.as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "moving_var",
                            "variable"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', shape_x[-1], initializer=tf.constant_initializer(0.0), trainable=is_training)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', shape_x[-1], initializer=tf.constant_initializer(1.0), trainable=is_training)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_42": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_47": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_52": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_57": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "control_dependencies_80": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[update_moving_mean, update_moving_var]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "network/common/resnet_v1.py": {
        "tensorflow": {
            "add_n_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x, shortcut]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.conv(x, name='conv1', filters=filters, kernel_size=1, strides=1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "nn.atrous_conv(x, name='conv2', filters=filters, kernel_size=3, dilation=dilation, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, name='conv2', filters=filters, kernel_size=3, strides=strides, padding=padding, biased=False, bn=True, relu=True, is_training=is_training, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, name='conv3', filters=filters * 4, kernel_size=1, strides=1, padding='SAME', biased=False, bn=True, relu=False, is_training=is_training, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "tf.add_n([x, shortcut], name='add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ],
                        [
                            "nn.conv(x, name='conv1', filters=64, kernel_size=7, strides=2, padding='VALID', biased=False, bn=True, relu=True, is_training=is_training, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "nn.max_pool(x, name='pool1', kernel_size=3, strides=2, padding='VALID')",
                            "Call"
                        ],
                        [
                            "bottleneck(x, name=block_name, filters=c_o, strides=s, dilation=d, is_training=is_training, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "network/multigpu/layers.py": {
        "tensorflow": {
            "add_n_55": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_66": {
                "variable": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "variances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "split_438": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "size_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[avg_n] * num_gpu",
                            "BinOp"
                        ],
                        [
                            "size_splits[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_16": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_23": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_51": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(dim_x - 1)",
                            "Call"
                        ],
                        [
                            "axes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(means)",
                            "Call"
                        ],
                        [
                            "moments(xs, 'moments', axes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stop_gradient_62": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x, axis=axes)",
                            "Call"
                        ],
                        [
                            "m / n_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_mean, (1, 1, 1, -1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(m)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_63": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x, m)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(dim_x - 1)",
                            "Call"
                        ],
                        [
                            "axes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_x[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_x[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_x[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_127": {
                "variable": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_variance",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_x[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_237": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axes",
                            "variable"
                        ],
                        [
                            "i in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "i in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "i in range(mod_n)",
                            "Call"
                        ],
                        [
                            "i in range(num_gpu)",
                            "Call"
                        ],
                        [
                            "i in range(num_gpu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_247": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, c_i, c_o]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "msra_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(2.0, 'FAN_IN', True)",
                            "Call"
                        ]
                    ]
                }
            },
            "atrous_conv2d_336": {
                "value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axes",
                            "variable"
                        ],
                        [
                            "i in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "i in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "i in range(mod_n)",
                            "Call"
                        ],
                        [
                            "i in range(num_gpu)",
                            "Call"
                        ],
                        [
                            "i in range(num_gpu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_344": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[kernel_size, kernel_size, c_i, c_o]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_478": {
                "variable": {
                    "value": "cats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[xs[i] for xs in xss]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_50": {
                "device_name": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_60": {
                "device_name": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_111": {
                "device_name": {
                    "value": "DEFAULT_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "str"
                        ]
                    ]
                }
            },
            "assign_144": {
                "variable": {
                    "value": "update_moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', c_x, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "moving_mean * decay + batch_mean * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_148": {
                "variable": {
                    "value": "update_moving_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_variance', c_x, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "moving_var * decay + batch_var * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_244": {
                "device_name": {
                    "value": "DEFAULT_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_254": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c_o]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_343": {
                "device_name": {
                    "value": "DEFAULT_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_349": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c_o]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_444": {
                "device_name": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:{:d}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_476": {
                "device_name": {
                    "value": "xss[0][i].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_63": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(x, axis=axes)",
                            "Call"
                        ],
                        [
                            "m / n_x",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_mean, (1, 1, 1, -1))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(m)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_138": {
                "device_name": {
                    "value": "DEFAULT_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0'",
                            "str"
                        ]
                    ]
                }
            },
            "control_dependencies_154": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[update_moving_mean, update_moving_var]",
                            "List"
                        ]
                    ]
                }
            },
            "batch_normalization_173": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', c_x, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_variance', c_x, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', c_x, initializer=tf.constant_initializer(0.0), trainable=is_training)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', c_x, initializer=tf.constant_initializer(1.0), trainable=is_training)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_258": {
                "device_name": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_265": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], pad_h, pad_w, [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_270": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, moving_mean, moving_var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, batch_mean, batch_var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [c_o])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [c_o])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_353": {
                "device_name": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_357": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, moving_mean, moving_var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, batch_mean, batch_var, beta, gamma, epsilon)",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ],
                        [
                            "convolve(x, kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [c_o])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [c_o])",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_445": {
                "input": {
                    "value": "xs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_115": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_120": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_125": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_130": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "batch_normalization_157": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "tf.pad(x, [[0, 0], pad_h, pad_w, [0, 0]])",
                            "Call"
                        ],
                        [
                            "xs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(means)",
                            "Call"
                        ],
                        [
                            "moments(xs, 'moments', axes)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(variances)",
                            "Call"
                        ],
                        [
                            "moments(xs, 'moments', axes)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', c_x, initializer=tf.constant_initializer(0.0), trainable=is_training)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', c_x, initializer=tf.constant_initializer(1.0), trainable=is_training)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_172": {
                "device_name": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_156": {
                "device_name": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "network/multigpu/resnet_v1.py": {
        "tensorflow": {
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[x, shortcut]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(xs, shortcuts)",
                            "Call"
                        ],
                        [
                            "tf.add_n([x, shortcut], name='add')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x, name='relu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_130": {
                "device_name": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "network/multigpu/utils.py": {
        "tensorflow": {
            "device_20": {
                "device_name": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "network/segsort/common_utils.py": {
        "tensorflow": {
            "reshape_42": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding, [-1, tf.shape(embedding)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, tf.shape(prototypes)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(embedding)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "initial_labels",
                            "variable"
                        ],
                        [
                            "find_nearest_prototypes(embedding, prototypes)",
                            "Call"
                        ],
                        [
                            "initialize_cluster_labels(num_clusters, [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "kmeans_with_initial_labels(embedding, labels, iterations=iterations)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "y_labels + (tf.reduce_max(y_labels) + 1) * x_labels",
                            "BinOp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_47": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "initial_labels",
                            "variable"
                        ],
                        [
                            "find_nearest_prototypes(embedding, prototypes)",
                            "Call"
                        ],
                        [
                            "initialize_cluster_labels(num_clusters, [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "kmeans_with_initial_labels(embedding, labels, iterations=iterations)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "y_labels + (tf.reduce_max(y_labels) + 1) * x_labels",
                            "BinOp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.cast(max_label, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, tf.cast(max_label, tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding, [-1, tf.shape(embedding)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, tf.shape(prototypes)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding, [-1, tf.shape(embedding)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, tf.shape(prototypes)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(prototypes)[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding, [-1, tf.shape(embedding)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, tf.shape(prototypes)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_labels, embedding, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "normalize_embedding(prototypes)",
                            "Call"
                        ],
                        [
                            "calculate_prototypes_from_labels(embedding, labels, max_label)",
                            "Call"
                        ],
                        [
                            "prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_114": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding, [-1, tf.shape(embedding)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, tf.shape(prototypes)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding, [-1, tf.shape(embedding)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, tf.shape(prototypes)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "initial_labels",
                            "variable"
                        ],
                        [
                            "find_nearest_prototypes(embedding, prototypes)",
                            "Call"
                        ],
                        [
                            "initialize_cluster_labels(num_clusters, [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "kmeans_with_initial_labels(embedding, labels, iterations=iterations)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "y_labels + (tf.reduce_max(y_labels) + 1) * x_labels",
                            "BinOp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "initial_labels",
                            "variable"
                        ],
                        [
                            "find_nearest_prototypes(embedding, prototypes)",
                            "Call"
                        ],
                        [
                            "initialize_cluster_labels(num_clusters, [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "kmeans_with_initial_labels(embedding, labels, iterations=iterations)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "y_labels + (tf.reduce_max(y_labels) + 1) * x_labels",
                            "BinOp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "img_dimensions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_dimensions",
                            "Method Argument"
                        ],
                        [
                            "img_dimensions",
                            "Method Argument"
                        ],
                        [
                            "img_dimensions",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "y_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(img_dimensions[0]) // yx_range[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "x_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(img_dimensions[1]) // yx_range[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_174": {
                "variable": {
                    "value": "(x_features, y_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(img_dimensions[1])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(x_features, y_features)",
                            "Call"
                        ],
                        [
                            "tf.range(img_dimensions[1], dtype=tf.float32) / img_dimensions[1]",
                            "BinOp"
                        ],
                        [
                            "np.linspace(0, 1, img_dimensions[1])",
                            "Call"
                        ],
                        [
                            "np.meshgrid(x_features, y_features)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(img_dimensions[0])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(x_features, y_features)",
                            "Call"
                        ],
                        [
                            "tf.range(img_dimensions[0], dtype=tf.float32) / img_dimensions[0]",
                            "BinOp"
                        ],
                        [
                            "np.linspace(0, 1, img_dimensions[0])",
                            "Call"
                        ],
                        [
                            "np.meshgrid(x_features, y_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_175": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y_features, x_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_204": {
                "variable": {
                    "value": "instance_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "instance_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(instance_labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "instance_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_205": {
                "variable": {
                    "value": "semantic_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "semantic_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(semantic_labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "semantic_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_206": {
                "variable": {
                    "value": "(prototype_labels, unique_instance_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(semantic_labels + instance_labels * offset, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_209": {
                "variable": {
                    "value": "unique_instance_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "unique_instance_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique(tf.reshape(semantic_labels + instance_labels * offset, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.cast(unique_instance_labels, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_210": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prototype_labels % offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding, prototypes, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_20": {
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding, [-1, tf.shape(embedding)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, tf.shape(prototypes)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "max_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(labels) + 1",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_max(initial_labels) + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_139": {
                "x": {
                    "value": "tf.cast(img_dimensions, tf.float32) / tf.cast(num_clusters, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "tensor": {
                    "value": "semantic_labels + instance_labels * offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_46": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "initial_labels",
                            "variable"
                        ],
                        [
                            "find_nearest_prototypes(embedding, prototypes)",
                            "Call"
                        ],
                        [
                            "initialize_cluster_labels(num_clusters, [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "kmeans_with_initial_labels(embedding, labels, iterations=iterations)",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "y_labels + (tf.reduce_max(y_labels) + 1) * x_labels",
                            "BinOp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_90": {
                "input_tensor": {
                    "value": "initial_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_141": {},
            "range_142": {},
            "shape_42": {
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding, [-1, tf.shape(embedding)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, tf.shape(prototypes)[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_labels, embedding, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "normalize_embedding(prototypes)",
                            "Call"
                        ],
                        [
                            "calculate_prototypes_from_labels(embedding, labels, max_label)",
                            "Call"
                        ],
                        [
                            "prototypes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_140": {
                "x": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_clusters",
                            "Method Argument"
                        ],
                        [
                            "num_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_143": {
                "input_tensor": {
                    "value": "y_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(img_dimensions[0]) // yx_range[0], [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "range_167": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_169": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "network/segsort/eval_utils.py": {
        "tensorflow": {
            "one_hot_20": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.cast(tf.reduce_max(labels) + 1, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_22": {
                "variable": {
                    "value": "one_hot_cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.cast(tf.reduce_max(cluster_labels) + 1, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "accumulate_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(cluster_labels, tf.cast(tf.reduce_max(cluster_labels) + 1, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(cluster_labels, tf.reduce_max(cluster_labels) + 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, tf.cast(tf.reduce_max(labels) + 1, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(cluster_labels, tf.reduce_max(labels) + 1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(labels, tf.reduce_max(labels) + 1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "majority_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(accumulate_labels, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_30": {
                "variable": {
                    "value": "semantic_cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "majority_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(accumulate_labels, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(unique_panoptic_labels, cluster_labels)",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(semantic_labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_31": {
                "variable": {
                    "value": "select_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(semantic_cluster_labels, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_66": {
                "variable": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(panoptic_labels // panoptic_label_divisor, ignore_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "variable": {
                    "value": "panoptic_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(panoptic_labels, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cluster_labels, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(embedding, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(location_features, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, location_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_83": {
                "variable": {
                    "value": "(_, cluster_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cluster_labels, select_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(embedding, select_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_132": {
                "variable": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prototype_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(k_predictions, tf.reduce_max(k_predictions) + 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(similarities, k=k, sorted=False)",
                            "Call"
                        ],
                        [
                            "k_predictions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_133": {
                "variable": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(k_predictions, tf.reduce_max(k_predictions) + 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(similarities, k=k, sorted=False)",
                            "Call"
                        ],
                        [
                            "k_predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.reduce_max(k_predictions) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_135": {
                "variable": {
                    "value": "prototype_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(k_predictions, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "test_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, cluster_labels)",
                            "Call"
                        ],
                        [
                            "test_prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, cluster_labels)",
                            "Call"
                        ],
                        [
                            "prototype_features",
                            "Method Argument"
                        ],
                        [
                            "prototype_features",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "top_k_173": {
                "variable": {
                    "value": "(_, k_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(test_prototypes, prototype_features, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_177": {
                "variable": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prototype_semantic_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_nearest_neighbors(k_predictions, prototype_semantic_labels)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_230": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(location_features, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.generate_location_features([shape[1], shape[2]], 'float')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(location_features, 0)",
                            "Call"
                        ],
                        [
                            "location_features",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_231": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, location_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "variable": {
                    "value": "class_has_instances_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "class_has_instances_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(class_has_instances_list, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "class_has_instances_list",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_254": {
                "variable": {
                    "value": "instance_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_all(tf.not_equal(tf.expand_dims(semantic_predictions, 3), class_has_instances_list), axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(instance_predictions)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "instance_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.gather(prototype_instance_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "predict_semantic_instance_labels(cluster_labels, test_prototypes, prototype_features, prototype_semantic_labels, prototype_instance_labels, k_in_nearest_neighbors)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_all(tf.not_equal(tf.expand_dims(semantic_predictions, 3), class_has_instances_list), axis=3), tf.zeros_like(instance_predictions), instance_predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_285": {
                "variable": {
                    "value": "(_, cluster_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(labels, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_287": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.reduce_max(labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_288": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, tf.cast(tf.reduce_max(labels) + 1, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(cluster_labels, tf.reduce_max(labels) + 1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(labels, tf.reduce_max(labels) + 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(embedding, [-1, shape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_310": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_311": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(cluster_labels, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_312": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(labels, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_315": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(labels, ignore_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_319": {
                "variable": {
                    "value": "one_hot_cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.reduce_max(cluster_labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_321": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.reduce_max(labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_323": {
                "variable": {
                    "value": "region_semantic",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(cluster_labels, tf.cast(tf.reduce_max(cluster_labels) + 1, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(cluster_labels, tf.reduce_max(cluster_labels) + 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, tf.cast(tf.reduce_max(labels) + 1, tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(cluster_labels, tf.reduce_max(labels) + 1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(labels, tf.reduce_max(labels) + 1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_326": {
                "variable": {
                    "value": "region_semantic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region_semantic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_cluster_labels, one_hot_labels, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "tf.argmax(region_semantic, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_328": {
                "variable": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "region_semantic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_cluster_labels, one_hot_labels, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "tf.argmax(region_semantic, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(prototype_semantic_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "predict_semantic_instance_labels(cluster_labels, test_prototypes, prototype_features, prototype_semantic_labels, prototype_instance_labels, k_in_nearest_neighbors)",
                            "Call"
                        ],
                        [
                            "tf.gather(region_semantic, cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(semantic_predictions, shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "embedding.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.shape(cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_87": {
                "variable": {
                    "value": "(label_mapping, unique_panoptic_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "panoptic_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(panoptic_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "panoptic_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_103": {
                "variable": {
                    "value": "prototype_panoptic_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique(panoptic_labels)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "majority_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(accumulate_labels, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(unique_panoptic_labels, cluster_labels)",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(semantic_labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "prototype_instance_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "majority_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(accumulate_labels, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(unique_panoptic_labels, cluster_labels)",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(semantic_labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_185": {
                "variable": {
                    "value": "(_, prototype_instance_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "prototype_instance_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_nearest_neighbors(k_predictions, prototype_instance_labels)",
                            "Call"
                        ],
                        [
                            "tf.unique(prototype_instance_predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_187": {
                "variable": {
                    "value": "instance_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prototype_instance_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_nearest_neighbors(k_predictions, prototype_instance_labels)",
                            "Call"
                        ],
                        [
                            "tf.unique(prototype_instance_predictions)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_21": {
                "x": {
                    "value": "tf.reduce_max(labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_23": {
                "x": {
                    "value": "tf.reduce_max(cluster_labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_28": {
                "input": {
                    "value": "accumulate_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_cluster_labels, one_hot_labels, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_31": {
                "x": {
                    "value": "semantic_cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(majority_labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "not_equal_67": {
                "x": {
                    "value": "panoptic_labels // panoptic_label_divisor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ignore_label",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_68": {
                "params": {
                    "value": "panoptic_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(panoptic_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "panoptic_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(panoptic_labels // panoptic_label_divisor, ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_69": {
                "params": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(panoptic_labels // panoptic_label_divisor, ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_70": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(panoptic_labels // panoptic_label_divisor, ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_72": {
                "params": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(location_features, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.generate_location_features([shape[1], shape[2]], 'float')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(location_features, 0)",
                            "Call"
                        ],
                        [
                            "location_features",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(panoptic_labels // panoptic_label_divisor, ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_98": {
                "params": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "select_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(semantic_cluster_labels, labels))",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(unique_panoptic_labels, cluster_labels)",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(semantic_labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_99": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "select_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(semantic_cluster_labels, labels))",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(unique_panoptic_labels, cluster_labels)",
                            "Call"
                        ],
                        [
                            "find_majority_label_index(semantic_labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_135": {
                "input_tensor": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(k_predictions, tf.reduce_max(k_predictions) + 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(similarities, k=k, sorted=False)",
                            "Call"
                        ],
                        [
                            "k_predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_255": {
                "input_tensor": {
                    "value": "tf.not_equal(tf.expand_dims(semantic_predictions, 3), class_has_instances_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_257": {
                "input": {
                    "value": "instance_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.gather(prototype_instance_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "predict_semantic_instance_labels(cluster_labels, test_prototypes, prototype_features, prototype_semantic_labels, prototype_instance_labels, k_in_nearest_neighbors)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_all(tf.not_equal(tf.expand_dims(semantic_predictions, 3), class_has_instances_list), axis=3), tf.zeros_like(instance_predictions), instance_predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_312": {
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_315": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ignore_label",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_316": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_133": {
                "input_tensor": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(k_predictions, tf.reduce_max(k_predictions) + 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(similarities, k=k, sorted=False)",
                            "Call"
                        ],
                        [
                            "k_predictions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "not_equal_255": {
                "x": {
                    "value": "tf.expand_dims(semantic_predictions, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "class_has_instances_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(class_has_instances_list, [1, 1, 1, -1])",
                            "Call"
                        ],
                        [
                            "class_has_instances_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_287": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_320": {
                "input_tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_321": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_21": {
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(labels, ignore_label), tf.zeros_like(labels), labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_23": {
                "input_tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans(embedding_with_location, num_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(labels, [-1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [shape[0], shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(cluster_labels, [-1]), tf.int32)",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_255": {
                "input": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(prototype_semantic_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "predict_semantic_instance_labels(cluster_labels, test_prototypes, prototype_features, prototype_semantic_labels, prototype_instance_labels, k_in_nearest_neighbors)",
                            "Call"
                        ],
                        [
                            "tf.gather(region_semantic, cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(semantic_predictions, shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/segsort/train_utils.py": {
        "tensorflow": {
            "reduce_mean_201": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calculate_log_likelihood(similarities, unique_instance_labels, semantic_labels, prototype_labels)",
                            "Call"
                        ],
                        [
                            "-tf.log(probabilities)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reshape_228": {
                "variable": {
                    "value": "semantic_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "semantic_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "tf.concat(semantic_labels_list, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(semantic_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "semantic_labels",
                            "Method Argument"
                        ],
                        [
                            "semantic_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.prepare_prototype_labels(semantic_labels, cluster_labels, label_divisor)",
                            "Call"
                        ],
                        [
                            "tf.concat([prototype_labels, memory_labels], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prototype_labels, [1, -1])",
                            "Call"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_231": {
                "variable": {
                    "value": "self_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.range(tf.shape(similarities)[0]), 1), tf.expand_dims(unique_instance_labels, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_234": {
                "variable": {
                    "value": "self_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(similarities, self_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_245": {
                "variable": {
                    "value": "diff_semantic_array",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(semantic_labels, prototype_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_250": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather_nd(similarities, self_indices), [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(selfout, 0), selfout, self_similarities)",
                            "Call"
                        ],
                        [
                            "self_similarities",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(similarities, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(similarities * diff_semantic_array, axis=1) + numerator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_290": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding, prototypes, transpose_b=True) * concentration",
                            "BinOp"
                        ],
                        [
                            "pre_similarities_temp",
                            "variable"
                        ],
                        [
                            "tf.concat([pre_similarities, pre_similarities_temp], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, shape=[batch_size, -1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cluster_labels, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat(cluster_labels_list, 0)",
                            "Call"
                        ],
                        [
                            "cluster_labels + tf.reshape(offset, [-1, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.unique(tf.reshape(cluster_labels, [-1]))",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "semantic_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "semantic_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_71": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cluster_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_134": {
                "variable": {
                    "value": "(_, cluster_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(cluster_labels, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding)",
                            "Call"
                        ],
                        [
                            "tf.concat(embedding_list, 0)",
                            "Call"
                        ],
                        [
                            "common_utils.normalize_embedding(embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, embedding_dim])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "self_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.range(tf.shape(similarities)[0]), 1), tf.expand_dims(cluster_labels, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather_nd(similarities, self_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, batch_size)",
                            "Call"
                        ],
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, split)",
                            "Call"
                        ],
                        [
                            "tf.exp(pre_similarities)",
                            "Call"
                        ],
                        [
                            "similarities",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_151": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather_nd(similarities, self_indices), [-1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater(selfout, 0), selfout, self_similarities)",
                            "Call"
                        ],
                        [
                            "self_similarities",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(similarities, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(similarities * diff_semantic_array, axis=1) + numerator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_188": {
                "variable": {
                    "value": "new_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(prototypes, rand_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "new_memory_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(prototype_labels, rand_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prototypes, memory]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prototype_labels, memory_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_236": {
                "variable": {
                    "value": "same_semantic_array",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(semantic_labels, prototype_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_240": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(selfout, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "selfout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(similarities * same_semantic_array, axis=1) - self_similarities",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self_similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather_nd(similarities, self_indices), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_21": {
                "name": {
                    "value": "loss_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "cur_semantic_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "semantic_labels[bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "cur_cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_labels[bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "cur_loc_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loc_features[bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "cur_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding[bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_48": {
                "variable": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(cur_semantic_labels, ignore_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "cur_semantic_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cur_semantic_labels, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_51": {
                "variable": {
                    "value": "cur_cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cur_cluster_labels, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "cur_loc_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cur_loc_features, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_54": {
                "variable": {
                    "value": "cur_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cur_embedding, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "embedding_with_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_embedding, cur_loc_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "memory_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_retrieve_memory(num_prototypes, num_banks, embedding_dim)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "memory_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "memory_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_retrieve_memory(num_prototypes, num_banks, embedding_dim)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "loss_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_133": {
                "tensor": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_clusters * batch_size, max_clusters)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "input_tensor": {
                    "value": "-tf.log(probabilities)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "size_183": {
                "input": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.prepare_prototype_labels(semantic_labels, cluster_labels, label_divisor)",
                            "Call"
                        ],
                        [
                            "tf.concat([prototype_labels, memory_labels], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prototype_labels, [1, -1])",
                            "Call"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_234": {
                "params": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, batch_size)",
                            "Call"
                        ],
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, split)",
                            "Call"
                        ],
                        [
                            "tf.exp(pre_similarities)",
                            "Call"
                        ],
                        [
                            "similarities",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(tf.range(tf.shape(similarities)[0]), 1), tf.expand_dims(cluster_labels, 1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(tf.range(tf.shape(similarities)[0]), 1), tf.expand_dims(unique_instance_labels, 1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "not_equal_246": {
                "x": {
                    "value": "semantic_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "tf.concat(semantic_labels_list, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(semantic_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "semantic_labels",
                            "Method Argument"
                        ],
                        [
                            "semantic_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.prepare_prototype_labels(semantic_labels, cluster_labels, label_divisor)",
                            "Call"
                        ],
                        [
                            "tf.concat([prototype_labels, memory_labels], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prototype_labels, [1, -1])",
                            "Call"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_247": {
                "input_tensor": {
                    "value": "similarities * diff_semantic_array",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_251": {
                "x": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(numerator, denominator)",
                            "Call"
                        ],
                        [
                            "tf.divide(numerator, denominator)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_111": {
                "control_inputs": {
                    "value": "update_memory_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cluster_labels, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat(cluster_labels_list, 0)",
                            "Call"
                        ],
                        [
                            "cluster_labels + tf.reshape(offset, [-1, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.unique(tf.reshape(cluster_labels, [-1]))",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_148": {
                "params": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, batch_size)",
                            "Call"
                        ],
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, split)",
                            "Call"
                        ],
                        [
                            "tf.exp(pre_similarities)",
                            "Call"
                        ],
                        [
                            "similarities",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(tf.range(tf.shape(similarities)[0]), 1), tf.expand_dims(cluster_labels, 1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(tf.range(tf.shape(similarities)[0]), 1), tf.expand_dims(unique_instance_labels, 1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_188": {
                "params": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, cluster_labels)",
                            "Call"
                        ],
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, unique_instance_labels, tf.size(prototype_labels))",
                            "Call"
                        ],
                        [
                            "tf.concat([prototypes, memory], 0)",
                            "Call"
                        ],
                        [
                            "prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "rand_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(tf.shape(prototype_labels)[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_189": {
                "params": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.prepare_prototype_labels(semantic_labels, cluster_labels, label_divisor)",
                            "Call"
                        ],
                        [
                            "tf.concat([prototype_labels, memory_labels], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prototype_labels, [1, -1])",
                            "Call"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "rand_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(tf.shape(prototype_labels)[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_232": {
                "input": {
                    "value": "tf.range(tf.shape(similarities)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_233": {
                "input": {
                    "value": "unique_instance_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.prepare_prototype_labels(semantic_labels, cluster_labels, label_divisor)",
                            "Call"
                        ],
                        [
                            "unique_instance_labels",
                            "Method Argument"
                        ],
                        [
                            "unique_instance_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_237": {
                "x": {
                    "value": "semantic_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "tf.concat(semantic_labels_list, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(semantic_labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "semantic_labels",
                            "Method Argument"
                        ],
                        [
                            "semantic_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.prepare_prototype_labels(semantic_labels, cluster_labels, label_divisor)",
                            "Call"
                        ],
                        [
                            "tf.concat([prototype_labels, memory_labels], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prototype_labels, [1, -1])",
                            "Call"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_238": {
                "input_tensor": {
                    "value": "similarities * same_semantic_array",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_240": {
                "x": {
                    "value": "selfout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(similarities * same_semantic_array, axis=1) - self_similarities",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "pre_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pre_similarities, pre_similarities_temp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_288": {
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding)",
                            "Call"
                        ],
                        [
                            "tf.concat(embedding_list, 0)",
                            "Call"
                        ],
                        [
                            "common_utils.normalize_embedding(embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, embedding_dim])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, cluster_labels)",
                            "Call"
                        ],
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, unique_instance_labels, tf.size(prototype_labels))",
                            "Call"
                        ],
                        [
                            "tf.concat([prototypes, memory], 0)",
                            "Call"
                        ],
                        [
                            "prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_312": {
                "name": {
                    "value": "'memory_' + str(b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_prototypes, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_317": {
                "name": {
                    "value": "'memory_labels_' + str(b)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_prototypes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "not_equal_48": {
                "x": {
                    "value": "cur_semantic_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(semantic_labels[bs], [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cur_semantic_labels, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ignore_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_49": {
                "params": {
                    "value": "cur_semantic_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(semantic_labels[bs], [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cur_semantic_labels, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(cur_semantic_labels, ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_51": {
                "params": {
                    "value": "cur_cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cluster_labels[bs], [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cur_cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_loc, cur_cluster_labels, num_total_clusters, kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "cur_cluster_labels + bs * label_divisor",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(cur_semantic_labels, ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_53": {
                "params": {
                    "value": "cur_loc_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(loc_features[bs], [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cur_loc_features, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(cur_semantic_labels, ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_54": {
                "params": {
                    "value": "cur_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(embedding[bs], [-1, embedding_dim])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cur_embedding, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(cur_semantic_labels, ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_106": {
                "ref": {
                    "value": "memory_list[num_banks - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "new_memory[:num_prototypes, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_108": {
                "ref": {
                    "value": "memory_labels_list[num_banks - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "new_memory_labels[:num_prototypes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_146": {
                "input": {
                    "value": "tf.range(tf.shape(similarities)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_147": {
                "input": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cluster_labels, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat(cluster_labels_list, 0)",
                            "Call"
                        ],
                        [
                            "cluster_labels + tf.reshape(offset, [-1, 1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.unique(tf.reshape(cluster_labels, [-1]))",
                            "Call"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ],
                        [
                            "cluster_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_152": {
                "x": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(numerator, denominator)",
                            "Call"
                        ],
                        [
                            "tf.divide(numerator, denominator)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_274": {
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding)",
                            "Call"
                        ],
                        [
                            "tf.concat(embedding_list, 0)",
                            "Call"
                        ],
                        [
                            "common_utils.normalize_embedding(embedding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, embedding_dim])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_280": {
                "a": {
                    "value": "embedding_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding[step_size * s:step_size * (s + 1)]",
                            "Subscript"
                        ],
                        [
                            "embedding[step_size * s:]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, cluster_labels)",
                            "Call"
                        ],
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, unique_instance_labels, tf.size(prototype_labels))",
                            "Call"
                        ],
                        [
                            "tf.concat([prototypes, memory], 0)",
                            "Call"
                        ],
                        [
                            "prototypes",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_103": {
                "ref": {
                    "value": "memory_list[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "memory_list[b + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_104": {
                "ref": {
                    "value": "memory_labels_list[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "memory_labels_list[b + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "range_146": {},
            "shape_187": {
                "input": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.prepare_prototype_labels(semantic_labels, cluster_labels, label_divisor)",
                            "Call"
                        ],
                        [
                            "tf.concat([prototype_labels, memory_labels], 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prototype_labels, [1, -1])",
                            "Call"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ],
                        [
                            "prototype_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_321": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_232": {
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, batch_size)",
                            "Call"
                        ],
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, split)",
                            "Call"
                        ],
                        [
                            "tf.exp(pre_similarities)",
                            "Call"
                        ],
                        [
                            "similarities",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_146": {
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, batch_size)",
                            "Call"
                        ],
                        [
                            "_calculate_similarities(embedding, prototypes, concentration, split)",
                            "Call"
                        ],
                        [
                            "tf.exp(pre_similarities)",
                            "Call"
                        ],
                        [
                            "similarities",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "network/segsort/vis_utils.py": {
        "tensorflow": {
            "matmul_17": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - tf.reduce_mean(embedding, axis=0, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, principal_components)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [shape[0], shape[1], shape[2], num_components])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - tf.reduce_mean(embedding, axis=0, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, principal_components)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [shape[0], shape[1], shape[2], num_components])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "svd_18": {
                "variable": {
                    "value": "(_, u, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding, embedding, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_40": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - tf.reduce_mean(embedding, axis=0, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, principal_components)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [shape[0], shape[1], shape[2], num_components])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - tf.reduce_mean(embedding, axis=0, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, principal_components)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [shape[0], shape[1], shape[2], num_components])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - tf.reduce_mean(embedding, axis=0, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, principal_components)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [shape[0], shape[1], shape[2], num_components])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "principal_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "calculate_principal_components(embedding, num_components)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - tf.reduce_mean(embedding, axis=0, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, principal_components)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [shape[0], shape[1], shape[2], num_components])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2], num_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_16": {
                "input_tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - tf.reduce_mean(embedding, axis=0, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(embedding, [-1, shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding, principal_components)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [shape[0], shape[1], shape[2], num_components])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pyscripts/inference/extract_prototypes.py": {
        "tensorflow": {
            "Coordinator_93": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_110": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.label",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "crop_image_batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, input_size[0], input_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_131": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, [input_size[0], input_size[1]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[input_size[0], input_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "label_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "embedding_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_145": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[1, None, None, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.initialize_cluster_labels([args.num_clusters, args.num_clusters], [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[1, None, None, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_165": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_167": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_168": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_174": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_179": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_96": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "local_variables_initializer_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyscripts/inference/inference.py": {
        "tensorflow": {
            "Coordinator_85": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "crop_image_batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, input_size[0], input_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_120": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, tf.shape(crop_image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(output, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(crop_image_batch)[1:3,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, tf.shape(crop_image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(output, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_126": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_128": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_129": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_135": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_140": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "local_variables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_122": {
                "input": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(name='crop_image_batch', shape=[1, input_size[0], input_size[1], 3], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyscripts/inference/inference_msc.py": {
        "tensorflow": {
            "Coordinator_90": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "crop_image_batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, input_size[0], input_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_150": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, tf.shape(crop_image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(output, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(crop_image_batch)[1:3,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, tf.shape(crop_image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(output, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_156": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_158": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_159": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_165": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_170": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_112": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(image_batch)[1]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_114": {
                "variable": {
                    "value": "w_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(image_batch)[2]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_93": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescale_image_batches[i]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(img, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_left_right_127": {
                "variable": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescale_image_batches[i]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(img, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_128": {
                "variable": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flip_img, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "local_variables_initializer_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_113": {
                "x": {
                    "value": "tf.to_float(tf.shape(image_batch)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scales",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_115": {
                "x": {
                    "value": "tf.to_float(tf.shape(image_batch)[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scales",
                            "variable"
                        ]
                    ]
                }
            },
            "global_variables_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_152": {
                "input": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(name='crop_image_batch', shape=[1, input_size[0], input_size[1], 3], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_113": {
                "x": {
                    "value": "tf.shape(image_batch)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_115": {
                "x": {
                    "value": "tf.shape(image_batch)[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_113": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_115": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyscripts/inference/inference_patch.py": {
        "tensorflow": {
            "Coordinator_93": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "resize_bilinear_125": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, tf.shape(image)[:2,])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(image)[:2,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding[:height, :width], [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "vis_utils.pca(tf.reshape(embedding, [1, height, width, args.embedding_dim]))",
                            "Call"
                        ],
                        [
                            "(embedding - tf.reduce_min(embedding)) / (tf.reduce_max(embedding) - tf.reduce_min(embedding))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(embedding * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding[:height, :width]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "cluster_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_label[:height, :width]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loc_feature[:height, :width]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, loc_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_152": {
                "variable": {
                    "value": "(_, cluster_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "cluster_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.cluster_label",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(cluster_label[:height, :width], [-1])",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_label, args.num_clusters * args.num_clusters, args.kmeans_iterations)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique(cluster_label)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [height, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "test_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, args.embedding_dim])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "top_k_162": {
                "variable": {
                    "value": "(_, k_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(test_prototypes, prototype_features, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "args.k_in_nearest_neighbors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_166": {
                "variable": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prototype_semantic_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_utils.k_nearest_neighbors(k_predictions, prototype_labels)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unique(cluster_label)",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [height, width])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_174": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embedding * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding[:height, :width], [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "vis_utils.pca(tf.reshape(embedding, [1, height, width, args.embedding_dim]))",
                            "Call"
                        ],
                        [
                            "(embedding - tf.reduce_min(embedding)) / (tf.reduce_max(embedding) - tf.reduce_min(embedding))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(embedding * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_178": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_180": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_181": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_187": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_192": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_96": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ],
                        [
                            "image[:height, :width]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding[:height, :width], [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "vis_utils.pca(tf.reshape(embedding, [1, height, width, args.embedding_dim]))",
                            "Call"
                        ],
                        [
                            "(embedding - tf.reduce_min(embedding)) / (tf.reduce_max(embedding) - tf.reduce_min(embedding))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(embedding * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, height, width, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "local_variables_initializer_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_127": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ],
                        [
                            "image[:height, :width]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_min_172": {
                "input_tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding[:height, :width], [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "vis_utils.pca(tf.reshape(embedding, [1, height, width, args.embedding_dim]))",
                            "Call"
                        ],
                        [
                            "(embedding - tf.reduce_min(embedding)) / (tf.reduce_max(embedding) - tf.reduce_min(embedding))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(embedding * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_173": {
                "input_tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding[:height, :width], [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "vis_utils.pca(tf.reshape(embedding, [1, height, width, args.embedding_dim]))",
                            "Call"
                        ],
                        [
                            "(embedding - tf.reduce_min(embedding)) / (tf.reduce_max(embedding) - tf.reduce_min(embedding))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(embedding * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_173": {
                "input_tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding[:height, :width], [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "vis_utils.pca(tf.reshape(embedding, [1, height, width, args.embedding_dim]))",
                            "Call"
                        ],
                        [
                            "(embedding - tf.reduce_min(embedding)) / (tf.reduce_max(embedding) - tf.reduce_min(embedding))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(embedding * 255, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(embedding, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyscripts/inference/inference_segsort.py": {
        "tensorflow": {
            "Coordinator_91": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "resize_bilinear_125": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, tf.shape(image_batch)[1:3,])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(image_batch)[1:3,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, loc_feature_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_156": {
                "variable": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_utils.predict_semantic_instance_labels(cluster_labels, test_prototypes, prototype_features, prototype_labels, None, args.k_in_nearest_neighbors)",
                            "Call"
                        ],
                        [
                            "tf.cast(semantic_predictions, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(semantic_predictions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_utils.predict_semantic_instance_labels(cluster_labels, test_prototypes, prototype_features, prototype_labels, None, args.k_in_nearest_neighbors)",
                            "Call"
                        ],
                        [
                            "tf.cast(semantic_predictions, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(semantic_predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_161": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_163": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_164": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_175": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_108": {
                "variable": {
                    "value": "cluster_label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.cluster_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "loc_feature_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.loc_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_94": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "local_variables_initializer_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_127": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(reader.image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyscripts/inference/inference_segsort_msc.py": {
        "tensorflow": {
            "Coordinator_106": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_121": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image[:reader.height, :reader.width]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "crop_image_batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, input_size[0], input_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_166": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, [input_size[0], input_size[1]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[input_size[0], input_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_178": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "common_utils.generate_location_features([shape[1], shape[2]], 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_180": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, loc_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_189": {
                "variable": {
                    "value": "(_, cluster_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(cluster_labels, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "test_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, args.embedding_dim])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "top_k_197": {
                "variable": {
                    "value": "(_, k_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(test_prototypes, prototype_features, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "args.k_in_nearest_neighbors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_198": {
                "variable": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(similarities, k=args.k_in_nearest_neighbors, sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.gather(k_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k_predictions, [shape[0], shape[1], shape[2], args.k_in_nearest_neighbors])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_199": {
                "variable": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(similarities, k=args.k_in_nearest_neighbors, sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.gather(k_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k_predictions, [shape[0], shape[1], shape[2], args.k_in_nearest_neighbors])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.kmeans(embedding_with_location, [args.num_clusters, args.num_clusters], args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(cluster_labels, [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(similarities, k=args.k_in_nearest_neighbors, sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.gather(k_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k_predictions, [shape[0], shape[1], shape[2], args.k_in_nearest_neighbors])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2], args.k_in_nearest_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_204": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_206": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_207": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_213": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_218": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_128": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(image_batch)[1]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_130": {
                "variable": {
                    "value": "w_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(image_batch)[2]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_142": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescale_image_batches[i]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(img, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_left_right_143": {
                "variable": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescale_image_batches[i]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(img, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_144": {
                "variable": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flip_img, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.kmeans(embedding_with_location, [args.num_clusters, args.num_clusters], args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(cluster_labels, [-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "local_variables_initializer_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_129": {
                "x": {
                    "value": "tf.to_float(tf.shape(image_batch)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scales",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_131": {
                "x": {
                    "value": "tf.to_float(tf.shape(image_batch)[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scales",
                            "variable"
                        ]
                    ]
                }
            },
            "global_variables_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_129": {
                "x": {
                    "value": "tf.shape(image_batch)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_131": {
                "x": {
                    "value": "tf.shape(image_batch)[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_129": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_131": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyscripts/inference/inference_vmf.py": {
        "tensorflow": {
            "Coordinator_90": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "resize_bilinear_124": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, tf.shape(image_batch)[1:3,])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(image_batch)[1:3,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, loc_feature_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_155": {
                "variable": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_utils.predict_semantic_instance_labels(cluster_labels, test_prototypes, prototype_features, prototype_labels, None, args.k_in_nearest_neighbors)",
                            "Call"
                        ],
                        [
                            "tf.cast(semantic_predictions, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(semantic_predictions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "variable": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_utils.predict_semantic_instance_labels(cluster_labels, test_prototypes, prototype_features, prototype_labels, None, args.k_in_nearest_neighbors)",
                            "Call"
                        ],
                        [
                            "tf.cast(semantic_predictions, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(semantic_predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_160": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_162": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_163": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_174": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "variable": {
                    "value": "cluster_label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.cluster_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_108": {
                "variable": {
                    "value": "loc_feature_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.loc_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_93": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "local_variables_initializer_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_126": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(reader.image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyscripts/inference/inference_vmf_embedding.py": {
        "tensorflow": {
            "Coordinator_103": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "crop_image_batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, input_size[0], input_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_163": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, [input_size[0], input_size[1]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[input_size[0], input_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "embedding_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_179": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_182": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, loc_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_189": {
                "variable": {
                    "value": "(_, cluster_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(cluster_labels, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "test_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.calculate_prototypes_from_labels(embedding, cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, args.embedding_dim])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "top_k_197": {
                "variable": {
                    "value": "(_, k_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(test_prototypes, prototype_features, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "args.k_in_nearest_neighbors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_198": {
                "variable": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(similarities, k=args.k_in_nearest_neighbors, sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.gather(k_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k_predictions, [shape[0], shape[1], shape[2], args.k_in_nearest_neighbors])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_199": {
                "variable": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(similarities, k=args.k_in_nearest_neighbors, sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.gather(k_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k_predictions, [shape[0], shape[1], shape[2], args.k_in_nearest_neighbors])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.kmeans(embedding_with_location, [args.num_clusters, args.num_clusters], args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(cluster_labels, [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(similarities, k=args.k_in_nearest_neighbors, sorted=True)",
                            "Call"
                        ],
                        [
                            "tf.gather(prototype_labels, k_predictions)",
                            "Call"
                        ],
                        [
                            "tf.gather(k_predictions, cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k_predictions, [shape[0], shape[1], shape[2], args.k_in_nearest_neighbors])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[1], shape[2], args.k_in_nearest_neighbors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_204": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_206": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_207": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_213": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_218": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_125": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(image_batch)[1]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_127": {
                "variable": {
                    "value": "w_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(tf.to_float(tf.shape(image_batch)[2]), scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescale_image_batches[i]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(img, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_left_right_140": {
                "variable": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rescale_image_batches[i]",
                            "Subscript"
                        ],
                        [
                            "tf.squeeze(img, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_141": {
                "variable": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flip_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(flip_img, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.kmeans(embedding_with_location, [args.num_clusters, args.num_clusters], args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(tf.reshape(cluster_labels, [-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "local_variables_initializer_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_126": {
                "x": {
                    "value": "tf.to_float(tf.shape(image_batch)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scales",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_128": {
                "x": {
                    "value": "tf.to_float(tf.shape(image_batch)[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scales",
                            "variable"
                        ]
                    ]
                }
            },
            "global_variables_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_126": {
                "x": {
                    "value": "tf.shape(image_batch)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "x": {
                    "value": "tf.shape(image_batch)[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_126": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_128": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyscripts/inference/prototype_embedding_fine.py": {
        "tensorflow": {
            "Coordinator_96": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.label",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "crop_image_batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, input_size[0], input_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_134": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, [input_size[0], input_size[1]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[input_size[0], input_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "label_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "embedding_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_148": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[1, None, None, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.initialize_cluster_labels([args.num_clusters, args.num_clusters], [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, args.num_clusters * args.num_clusters, args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "common_utils.prepare_prototype_labels(labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[1, None, None, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_161": {
                "variable": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(labels, args.ignore_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(labels, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_164": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cluster_labels, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(embedding, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(location_features, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_170": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, location_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_184": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_186": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_187": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_193": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_198": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_99": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_162": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_input, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(labels, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_163": {
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_input, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(labels, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_164": {
                "params": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.initialize_cluster_labels([args.num_clusters, args.num_clusters], [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, args.num_clusters * args.num_clusters, args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "common_utils.prepare_prototype_labels(labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_165": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_167": {
                "params": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(loc_feature, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(location_features, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "local_variables_initializer_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyscripts/inference/prototype_embedding_rgb.py": {
        "tensorflow": {
            "Coordinator_96": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.label",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "crop_image_batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, input_size[0], input_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_134": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, [input_size[0], input_size[1]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[input_size[0], input_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "label_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "embedding_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "rgb_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_150": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, select_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, select_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[1, None, None, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.initialize_cluster_labels([args.num_clusters, args.num_clusters], [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, args.num_clusters * args.num_clusters, args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[1, None, None, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_162": {
                "variable": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(labels, args.ignore_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_164": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(labels, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cluster_labels, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(embedding, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_167": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(location_features, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_169": {
                "variable": {
                    "value": "rgb_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(rgb_features, valid_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_172": {
                "variable": {
                    "value": "embedding_with_location",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding, location_features, rgb_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_181": {
                "variable": {
                    "value": "(_, cluster_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.initialize_cluster_labels([args.num_clusters, args.num_clusters], [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, args.num_clusters * args.num_clusters, args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_188": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(cluster_labels, select_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(embedding, select_pixels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_196": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_198": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_199": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_205": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_210": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_99": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "not_equal_163": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_input, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(labels, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "args.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_164": {
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_input, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(labels, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_165": {
                "params": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.initialize_cluster_labels([args.num_clusters, args.num_clusters], [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, args.num_clusters * args.num_clusters, args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_166": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, select_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_168": {
                "params": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(loc_feature, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(location_features, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_169": {
                "params": {
                    "value": "rgb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(tf.reshape(rgb_feature, [-1, 3])) / args.embedding_dim",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(tf.gather(rgb_features, valid_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(labels, args.ignore_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_188": {
                "params": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.initialize_cluster_labels([args.num_clusters, args.num_clusters], [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "common_utils.kmeans_with_initial_labels(embedding_with_location, cluster_labels, args.num_clusters * args.num_clusters, args.kmeans_iterations)",
                            "Call"
                        ],
                        [
                            "tf.unique(cluster_labels)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(cluster_labels, select_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "select_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_utils.find_majority_label_index(labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_189": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, valid_pixels), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.gather(embedding, select_pixels), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "select_pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_utils.find_majority_label_index(labels, cluster_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "local_variables_initializer_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_159": {
                "tensor": {
                    "value": "rgb_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[1, None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pyscripts/inference/prototype_embedding_with_flip.py": {
        "tensorflow": {
            "Coordinator_98": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.image",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_116": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.label",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "crop_image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "crop_image_batch",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, input_size[0], input_size[1], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_136": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, [input_size[0], input_size[1]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[input_size[0], input_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "label_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "embedding_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_150": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.normalize_embedding(embedding_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(embedding, [-1, args.embedding_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[1, None, None, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_utils.initialize_cluster_labels([args.num_clusters, args.num_clusters], [shape[1], shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(cluster_labels, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[1, None, None, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_172": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_174": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_175": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_181": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_186": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "local_variables_initializer_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyscripts/inference/prototype_unsup.py": {
        "tensorflow": {
            "Coordinator_95": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "resize_bilinear_126": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_bilinear(output, tf.shape(image_batch)[1:3,])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(image_batch)[1:3,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loc_feature_batch[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "prototype_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "prototype_feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_158": {
                "variable": {
                    "value": "prototype_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "prototype_label_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_162": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_164": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_165": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_171": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'crop_image_batch' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "start_queue_runners_176": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_110": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "variable": {
                    "value": "cluster_label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.cluster_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "variable": {
                    "value": "loc_feature_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reader.loc_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "cur_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels[bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "cur_cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "initial_cluster_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cluster_label_batch[0, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "cur_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embedding[bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, args.embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "local_variables_initializer_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_128": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(reader.image, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pyscripts/train/train_segsort.py": {
        "tensorflow": {
            "Coordinator_142": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "step_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_165": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "innet_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(math.ceil(h / 8)), int(math.ceil(w / 8)))",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "label_shrink",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_167": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "cluster_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "innet_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(math.ceil(h / 8)), int(math.ceil(w / 8)))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_169": {
                "variable": {
                    "value": "loc_features",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "loc_feature_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "innet_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(math.ceil(h / 8)), int(math.ceil(w / 8)))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "add_n_197": {
                "variable": {
                    "value": "mean_l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "l2_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[w * tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'weights' in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "trainable_variables_201": {
                "variable": {
                    "value": "all_trainable",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_206": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "reduced_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_seg_loss + mean_l2_loss",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "base_trainable + fc_trainable",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_211": {
                "variable": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_212": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.pow(1 - step_ph / args.num_steps, args.power)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_216": {
                "variable": {
                    "value": "opt_base",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_217": {
                "variable": {
                    "value": "opt_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_222": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_base.apply_gradients(zip(grads_base, base_trainable))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "train_op_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_fc.apply_gradients(zip(grads_fc, fc_trainable))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_266": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_268": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_269": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_274": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "start_queue_runners_282": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_random_seed_139": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_230": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.shape(image_batch)[1:3,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_232": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(outputs[-1], tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_233": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(outputs[-1], tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_234": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(outputs[-1], tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_236": {
                "variable": {
                    "value": "labels_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_238": {
                "variable": {
                    "value": "in_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.inv_preprocess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image_batch, IMG_MEAN]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_242": {
                "variable": {
                    "value": "gt_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.decode_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels_vis, args.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_246": {
                "variable": {
                    "value": "out_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.decode_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[output_vis, args.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_251": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(axis=2, values=[in_summary, gt_summary, out_summary])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_257": {
                "variable": {
                    "value": "seg_loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "seg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_seg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_losses",
                            "variable"
                        ]
                    ]
                }
            },
            "merge_all_259": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_261": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.snapshot_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_278": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'block5' not in v.name or not args.not_restore_classifier]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_148": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_214": {
                "x": {
                    "value": "1 - step_ph / args.num_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "args.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_225": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_192": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_253": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[in_summary, gt_summary, out_summary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_231": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyscripts/train/train_segsort_mgpu.py": {
        "tensorflow": {
            "Coordinator_142": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "step_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_180": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "innet_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(math.ceil(h / 8)), int(math.ceil(w / 8)))",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "label_shrink",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_182": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "cluster_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "innet_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(math.ceil(h / 8)), int(math.ceil(w / 8)))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_184": {
                "variable": {
                    "value": "loc_features",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "loc_feature_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "innet_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(math.ceil(h / 8)), int(math.ceil(w / 8)))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "trainable_variables_206": {
                "variable": {
                    "value": "all_trainable",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_211": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "reduced_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_seg_loss + mean_l2_loss",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "base_trainable + fc_trainable",
                    "type": "BinOp",
                    "possible_values": []
                },
                "colocate_gradients_with_ops": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_218": {
                "variable": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_219": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.pow(1 - step_ph / args.num_steps, args.power)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_223": {
                "variable": {
                    "value": "opt_base",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_224": {
                "variable": {
                    "value": "opt_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_229": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_base.apply_gradients(zip(grads_base, base_trainable))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "train_op_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_fc.apply_gradients(zip(grads_fc, fc_trainable))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_271": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_273": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_274": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_279": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "start_queue_runners_287": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_random_seed_139": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[outputs[0] for outputs in outputs_mgpu]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_199": {
                "variable": {
                    "value": "mean_l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "l2_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[w * tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'weights' in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "concat_234": {
                "variable": {
                    "value": "cat_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[o[-1] for o in outputs_mgpu]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_235": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "cat_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([o[-1] for o in outputs_mgpu], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tf.shape(image_batch)[1:3,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_237": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(cat_output, tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_238": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(cat_output, tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_239": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(cat_output, tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_241": {
                "variable": {
                    "value": "labels_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_243": {
                "variable": {
                    "value": "in_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.inv_preprocess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image_batch, IMG_MEAN]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_247": {
                "variable": {
                    "value": "gt_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.decode_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels_vis, args.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_251": {
                "variable": {
                    "value": "out_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.decode_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[output_vis, args.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_256": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(axis=2, values=[in_summary, gt_summary, out_summary])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_262": {
                "variable": {
                    "value": "seg_loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "seg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_seg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_losses",
                            "variable"
                        ]
                    ]
                }
            },
            "merge_all_264": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_266": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.snapshot_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_283": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'block5' not in v.name or not args.not_restore_classifier]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_148": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_188": {
                "device_name": {
                    "value": "'/gpu:{:d}'.format(args.num_gpu - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_221": {
                "x": {
                    "value": "1 - step_ph / args.num_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "args.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_232": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_258": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[in_summary, gt_summary, out_summary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_197": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_236": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pyscripts/train/train_segsort_unsup.py": {
        "tensorflow": {
            "Coordinator_135": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "step_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_157": {
                "variable": {
                    "value": "cluster_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "cluster_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "innet_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(math.ceil(h / 8)), int(math.ceil(w / 8)))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "add_n_183": {
                "variable": {
                    "value": "mean_l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "l2_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[w * tf.nn.l2_loss(v) for v in tf.trainable_variables() if 'weights' in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "trainable_variables_187": {
                "variable": {
                    "value": "all_trainable",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_192": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "reduced_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_seg_loss + mean_l2_loss",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "base_trainable + fc_trainable",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_197": {
                "variable": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_198": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.pow(1 - step_ph / args.num_steps, args.power)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_202": {
                "variable": {
                    "value": "opt_base",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_203": {
                "variable": {
                    "value": "opt_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_208": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_base.apply_gradients(zip(grads_base, base_trainable))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "train_op_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_fc.apply_gradients(zip(grads_fc, fc_trainable))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_249": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_251": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_252": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_257": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "start_queue_runners_265": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_random_seed_132": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_213": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.shape(image_batch)[1:3,]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_215": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(outputs[-1], tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_216": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(outputs[-1], tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_217": {
                "variable": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(outputs[-1], tf.shape(image_batch)[1:3,])",
                            "Call"
                        ],
                        [
                            "tf.argmax(output_vis, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output_vis, dim=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(output_vis, dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_219": {
                "variable": {
                    "value": "labels_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cluster_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_221": {
                "variable": {
                    "value": "in_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.inv_preprocess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image_batch, IMG_MEAN]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_225": {
                "variable": {
                    "value": "gt_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.decode_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[labels_vis, args.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_229": {
                "variable": {
                    "value": "out_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.general.decode_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[output_vis, args.num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_234": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.concat(axis=2, values=[in_summary, gt_summary, out_summary])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_240": {
                "variable": {
                    "value": "seg_loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "seg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_seg_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_losses",
                            "variable"
                        ]
                    ]
                }
            },
            "merge_all_242": {
                "variable": {
                    "value": "total_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_244": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.snapshot_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_261": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'block5' not in v.name or not args.not_restore_classifier]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_141": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_200": {
                "x": {
                    "value": "1 - step_ph / args.num_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "args.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_211": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "create_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_178": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_236": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[in_summary, gt_summary, out_summary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_214": {
                "input": {
                    "value": "image_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.dequeue(args.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seg_models/image_reader.py": {
        "tensorflow": {
            "to_int32_27": {
                "variable": {
                    "value": "h_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(tf.shape(img)[0]) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_28": {
                "variable": {
                    "value": "w_new",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(tf.shape(img)[1]) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.stack([h_new, w_new])",
                    "type": "Call",
                    "possible_values": []
                },
                "squeeze_dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_32": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(label, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.stack([h_new, w_new]), squeeze_dims=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, mirror)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label, loc_feature], axis=2)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label], axis=2)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0:1]",
                            "Subscript"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_58": {
                "variable": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([1.0, distort_left_right_random, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "boolean_mask_59": {
                "variable": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mask": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.stack([1.0, distort_left_right_random, 1.0]), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask([0, 1, 2], mirror)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_60": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.stack([1.0, distort_left_right_random, 1.0]), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask([0, 1, 2], mirror)",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_61": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, mirror)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label, loc_feature], axis=2)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label], axis=2)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0:1]",
                            "Subscript"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "mirror",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(tf.stack([1.0, distort_left_right_random, 1.0]), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask([0, 1, 2], mirror)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_91": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, mirror)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label, loc_feature], axis=2)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label], axis=2)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0:1]",
                            "Subscript"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_95": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_96": {
                "variable": {
                    "value": "image_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line.strip('\\n').split(' ')",
                            "Call"
                        ],
                        [
                            "line.strip('\\n').split(' ')",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_to_bounding_box_97": {
                "variable": {
                    "value": "combined_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[image, label])",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "target_height": {
                    "value": "tf.maximum(crop_h, image_shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "target_width": {
                    "value": "tf.maximum(crop_w, image_shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_118": {
                "variable": {
                    "value": "label_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined_crop[:, :, last_image_dim:]",
                            "Subscript"
                        ],
                        [
                            "label_crop + ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.cast(label_crop, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_207": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "read_file_208": {
                "variable": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_jpeg_210": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_211": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_215": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_222": {
                "variable": {
                    "value": "cluster_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "common_utils.initialize_cluster_labels(num_clusters, [height, width])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_226": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, mirror)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label, loc_feature], axis=2)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label], axis=2)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0:1]",
                            "Subscript"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label, cluster_label, loc_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_250": {
                "variable": {
                    "value": "yx_features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "yx_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label[:, :, 2:4]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(yx_features, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_253": {
                "variable": {
                    "value": "loc_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y_features, x_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_281": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "read_file_282": {
                "variable": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_jpeg_284": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_285": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_289": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "read_file_335": {
                "variable": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "read_file_336": {
                "variable": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "read_file_337": {
                "variable": {
                    "value": "cluster_label_contents",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_queue[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_jpeg_339": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[0])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_340": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_344": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ],
                        [
                            "tf.read_file(input_queue[1])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_png_345": {
                "variable": {
                    "value": "cluster_label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "cluster_label_contents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(input_queue[2])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_347": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label, cluster_label]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_crop_108": {
                "variable": {
                    "value": "combined_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "combined_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.pad_to_bounding_box(combined, 0, 0, tf.maximum(crop_h, image_shape[0]), tf.maximum(crop_w, image_shape[1]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[crop_h, crop_w, last_image_dim + last_label_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_398": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.image_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_399": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_400": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[self.images, self.labels]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "input_size is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "batch_424": {
                "variable": {
                    "value": "(image_batch, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.image, self.label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "num_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_elements",
                            "Method Argument"
                        ],
                        [
                            "num_elements",
                            "Method Argument"
                        ],
                        [
                            "num_elements",
                            "Method Argument"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_460": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.image_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_461": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_462": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[self.images, self.labels]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "random_scale or random_mirror or random_crop",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "batch_492": {
                "variable": {
                    "value": "(image_batch, label_batch, cluster_label_batch, loc_feature_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.image, self.label, self.cluster_label, self.loc_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "num_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_elements",
                            "Method Argument"
                        ],
                        [
                            "num_elements",
                            "Method Argument"
                        ],
                        [
                            "num_elements",
                            "Method Argument"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_528": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.image_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_529": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_530": {
                "variable": {
                    "value": "self.cluster_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cluster_label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_532": {
                "variable": {
                    "value": "self.queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[self.images, self.labels, self.cluster_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "random_scale or random_mirror or random_crop",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "batch_559": {
                "variable": {
                    "value": "(image_batch, label_batch, cluster_label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.image, self.label, self.cluster_label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "num_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_elements",
                            "Method Argument"
                        ],
                        [
                            "num_elements",
                            "Method Argument"
                        ],
                        [
                            "num_elements",
                            "Method Argument"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_29": {
                "values": {
                    "value": "[h_new, w_new]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(tf.expand_dims(label, 0), new_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label, squeeze_dims=[0])",
                            "Call"
                        ],
                        [
                            "tf.reverse(label, mirror)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "label - ignore_label",
                            "BinOp"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label, loc_feature], axis=2)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(label_contents, channels=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([label, cluster_label], axis=2)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0:1]",
                            "Subscript"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_58": {
                "values": {
                    "value": "[1.0, distort_left_right_random, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_101": {
                "x": {
                    "value": "crop_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_h",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "image_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_102": {
                "x": {
                    "value": "crop_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop_w",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "image_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_218": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_219": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_251": {
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(img)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_252": {
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(img)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_27": {
                "x": {
                    "value": "tf.shape(img)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_28": {
                "x": {
                    "value": "tf.shape(img)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_28": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(img, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.reverse(img, mirror)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "img - img_mean",
                            "BinOp"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img_contents, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "image_scaling(img, label)",
                            "Call"
                        ],
                        [
                            "image_mirroring(img, label)",
                            "Call"
                        ],
                        [
                            "crop_and_pad_image_and_labels(img, label, h, w, ignore_label, random_crop)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "seg_models/models/deeplab.py": {
        "tensorflow": {
            "add_n_55": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "aspp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "fc1_sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "'scale_{:d}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "seg_models/models/fcn.py": {
        "tensorflow": {
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_78": {
                "name": {
                    "value": "scale_0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "seg_models/models/pspnet.py": {
        "tensorflow": {
            "avg_pool_47": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_fn(x, name, is_training, use_global_status, reuse)",
                            "Call"
                        ],
                        [
                            "tf.concat([pool1, pool2, pool3, pool6, x], name='block5/concat', axis=3)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, 'block5/conv2', 512, 3, 1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, decay=0.99, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, 'block5/fc1_voc12', num_classes, 1, 1, padding='SAME', biased=True, bn=False, relu=False, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "block5/pool1",
                    "type": "str",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, pool_k, pool_k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_k, pool_k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_64": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, name='block5/pool1', ksize=[1, pool_k, pool_k, 1], strides=[1, pool_k, pool_k, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "nn.conv(pool1, 'block5/pool1/conv1', 512, 1, 1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, decay=0.99, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(pool1, [pool_k, pool_k])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[pool_k, pool_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_67": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_fn(x, name, is_training, use_global_status, reuse)",
                            "Call"
                        ],
                        [
                            "tf.concat([pool1, pool2, pool3, pool6, x], name='block5/concat', axis=3)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, 'block5/conv2', 512, 3, 1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, decay=0.99, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, 'block5/fc1_voc12', num_classes, 1, 1, padding='SAME', biased=True, bn=False, relu=False, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "block5/pool2",
                    "type": "str",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, pool_k // 2, pool_k // 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_k // 2, pool_k // 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_84": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, name='block5/pool2', ksize=[1, pool_k // 2, pool_k // 2, 1], strides=[1, pool_k // 2, pool_k // 2, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "nn.conv(pool2, 'block5/pool2/conv1', 512, 1, 1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, decay=0.99, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(pool2, [pool_k, pool_k])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[pool_k, pool_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_87": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_fn(x, name, is_training, use_global_status, reuse)",
                            "Call"
                        ],
                        [
                            "tf.concat([pool1, pool2, pool3, pool6, x], name='block5/concat', axis=3)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, 'block5/conv2', 512, 3, 1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, decay=0.99, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, 'block5/fc1_voc12', num_classes, 1, 1, padding='SAME', biased=True, bn=False, relu=False, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "block5/pool3",
                    "type": "str",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, pool_k // 3, pool_k // 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_k // 3, pool_k // 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_104": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, name='block5/pool3', ksize=[1, pool_k // 3, pool_k // 3, 1], strides=[1, pool_k // 3, pool_k // 3, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "nn.conv(pool3, 'block5/pool3/conv1', 512, 1, 1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, decay=0.99, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(pool3, [pool_k, pool_k])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[pool_k, pool_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_107": {
                "variable": {
                    "value": "pool6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_fn(x, name, is_training, use_global_status, reuse)",
                            "Call"
                        ],
                        [
                            "tf.concat([pool1, pool2, pool3, pool6, x], name='block5/concat', axis=3)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, 'block5/conv2', 512, 3, 1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, decay=0.99, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "nn.conv(x, 'block5/fc1_voc12', num_classes, 1, 1, padding='SAME', biased=True, bn=False, relu=False, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "block5/pool6",
                    "type": "str",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, pool_k // 6, pool_k // 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, pool_k // 6, pool_k // 6, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_124": {
                "variable": {
                    "value": "pool6",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "pool6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(x, name='block5/pool6', ksize=[1, pool_k // 6, pool_k // 6, 1], strides=[1, pool_k // 6, pool_k // 6, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "nn.conv(pool6, 'block5/pool6/conv1', 512, 1, 1, padding='SAME', biased=False, bn=True, relu=True, is_training=is_training, decay=0.99, use_global_status=use_global_status)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(pool6, [pool_k, pool_k])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[pool_k, pool_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pool1, pool2, pool3, pool6, x]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "block5/concat",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_184": {
                "name": {
                    "value": "scale_0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "seg_models/models/pspnet_mgpu.py": {
        "tensorflow": {
            "avg_pool_16": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "resize_bilinear_27": {
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_h, new_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_210": {
                "name": {
                    "value": "scale_0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/general.py": {
        "tensorflow": {}
    }
}