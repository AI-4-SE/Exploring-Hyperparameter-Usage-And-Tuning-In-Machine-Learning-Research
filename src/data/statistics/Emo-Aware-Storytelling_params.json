{
    "Reinforcement/rewards_v2.py": {
        "sklearn": {
            "cosine_similarity_130": {
                "X": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_vectorizer(react.split(), glove_embeddings).reshape(1, -1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(SCORE_PATH, 'glove/embedding_matrix.npy'))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {},
        "torch": {}
    },
    "eval.py": {
        "sklearn": {
            "cosine_similarity_58": {
                "X": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_vectorizer(react.split(), glove_embeddings).reshape(1, -1)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(SCORE_PATH, 'glove/embedding_matrix.npy'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run_classifier_bert.py": {
        "sklearn": {
            "f1_score_30": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred.sigmoid()",
                            "Call"
                        ],
                        [
                            "(y_pred > thresh).float()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'macro'",
                            "Method Argument"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_121": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "LIB/utils.py": {
        "tensorflow": {
            "constant_14": {
                "variable": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_15": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "record_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record_file",
                            "Method Argument"
                        ],
                        [
                            "record_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shuffle_15": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_15": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_23": {
                "variable": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_24": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "record_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record_file",
                            "Method Argument"
                        ],
                        [
                            "record_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "repeat_24": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_24": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Summary_31": {
                "variable": {
                    "value": "key_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='{}/{}'.format(tag, key), simple_value=metrics[key])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils/data_utils.py": {
        "tensorflow": {
            "TFRecordWriter_77": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Example_92": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_106": {
                "msg": {
                    "value": "'Processing %s' % train_fn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_114": {
                "msg": {
                    "value": "'Processing %s' % dev_fn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_122": {
                "msg": {
                    "value": "'Processing %s' % test_fn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Feature_85": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_93": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_86": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils/model_utils.py": {
        "tensorflow": {
            "NewCheckpointReader_121": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ],
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_198": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_130": {
                "ref": {
                    "value": "local_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_tensor_by_name(local_tensor_name)",
                            "Call"
                        ],
                        [
                            "[var for var in all_variables if tensor_name in var.name][0]",
                            "Subscript"
                        ],
                        [
                            "[var for var in all_variables if tensor_name in var.name][0]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_names_vs_vals[ckpt_tensor_name]",
                            "Subscript"
                        ],
                        [
                            "ckpt_names_vs_vals[ckpt_tensor_name]",
                            "Subscript"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data_utils/processor.py": {
        "tensorflow": {
            "map_fn_113": {
                "fn": {
                    "value": "lambda x: self.decoder[x]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data_utils/rl_data_utils_128.py": {
        "tensorflow": {
            "TFRecordWriter_156": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Example_193": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_175": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_179": {
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_182": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[values.encode('utf-8')])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_194": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_176": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_179": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_182": {
                "value": {
                    "value": "[values.encode('utf-8')]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "data_utils/utils.py": {
        "tensorflow": {}
    },
    "generate_all.py": {
        "tensorflow": {
            "transpose_170": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embedder.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_245": {
                "variable": {
                    "value": "x1_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_246": {
                "variable": {
                    "value": "x1x4_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1x4_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "x1x4_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1x4_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_251": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tau",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_395": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_412": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_413": {
                "variable": {
                    "value": "saver_best",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_700": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_86": {
                "msg": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'test_loss (bpe): %.4f, test_perplexity: %.4f' % (avg_loss, ppl)",
                            "BinOp"
                        ],
                        [
                            "'test_loss (per word): %.4f, test_perplexity: %.4f' % (avg_loss, ppl)",
                            "BinOp"
                        ],
                        [
                            "msg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_verbosity_108": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_181": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size__]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(ids)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_187": {
                "variable": {
                    "value": "max_full_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['%s_len' % target_name]",
                            "Subscript"
                        ],
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fill_311": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size__]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(ids)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_317": {
                "variable": {
                    "value": "max_full_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['%s_len' % target_name]",
                            "Subscript"
                        ],
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_328": {
                "variable": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_743": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_156": {
                "input": {
                    "value": "batch['x1x4_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_200": {
                "variable": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_704": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_180": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids[1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "batch['%s_ids' % target_name]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "print_210": {
                "variable": {
                    "value": "print_op_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(full_len - 1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask_recon * mask_recon_prefix",
                            "BinOp"
                        ],
                        [
                            "tf.sequence_mask(full_len - 1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask_recon * mask_recon_prefix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "print_217": {
                "variable": {
                    "value": "print_op_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "loss_recon_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tx.utils.reduce_with_weights(tensor=loss_recon, weights=mask_recon, average_across_remaining=False, sum_over_remaining=False, average_across_batch=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_272": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_273": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_274": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_275": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_276": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_277": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_310": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids[1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "batch['%s_ids' % target_name]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_331": {
                "lengths": {
                    "value": "batch['%s_len' % context_name] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_705": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_706": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_707": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_181": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids[1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "batch['%s_ids' % target_name]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_203": {
                "lengths": {
                    "value": "prefix_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_311": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids[1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "batch['%s_ids' % target_name]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_179": {
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['%s_len' % target_name]",
                            "Subscript"
                        ],
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_218": {
                "control_inputs": {
                    "value": "[print_op_1, print_op_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_299": {
                "input_tensor": {
                    "value": "yy_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len_infer - batch['%s_len' % context_name]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_308": {
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['%s_len' % target_name]",
                            "Subscript"
                        ],
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_383": {
                "input_tensor": {
                    "value": "greedy_ids_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "greedy_len - batch['%s_len' % context_name]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "interactive_generation.py": {
        "tensorflow": {
            "placeholder_99": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "context_length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embedder.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_74": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_106": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "end_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proc.encoder['<|endoftext|>']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "run_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_148": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_208": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_147": {
                "msg": {
                    "value": "'Restore from {}'.format(FLAGS.checkpoint)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_207": {
                "msg": {
                    "value": "'Restore from {}'.format(FLAGS.checkpoint)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "prepare_data.py": {
        "tensorflow": {}
    },
    "third_party/texar/bin/average_checkpoints.py": {
        "tensorflow": {
            "list_variables_52": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoints_path[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(latest_step, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_76": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_30": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_49": {
                "msg": {
                    "value": "'Averaging %d checkpoints...' % num_checkpoints",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_50": {
                "msg": {
                    "value": "Listing variables...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_checkpoint_60": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoints_path",
                            "variable"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_44": {
                "checkpoint_dir": {
                    "value": "args.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_59": {
                "msg": {
                    "value": "'Loading checkpoint %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_68": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(placeholders, assign_ops, six.iteritems(avg_values))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_82": {
                "msg": {
                    "value": "'Saving averaged checkpoint to %s-%d' % (out_base_file, latest_step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "avg_values",
                            "variable"
                        ],
                        [
                            "six.iteritems(avg_values)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "value.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_74": {
                "value": {
                    "value": "latest_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(checkpoints_path[-1].split('-')[-1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/bin/train.py": {
        "tensorflow": {
            "DEFINE_string_30": {
                "name": {
                    "value": "config_paths",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Paths to configuration files. This can be a path to a directory in which all files are loaded, or paths to multiple files separated by commas. Setting a key in these files is equivalent to setting the FLAG value with the same name. If a key is set in both config files and FLAG, the value in config files is used.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Name of the model class.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "model_hparams",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the model hyper-parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "data_hparams_train",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the training data hyper-parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "data_hparams_eval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "{}",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "YAML configuration string for the evaluation data hyper-parameters.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "max_train_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of training steps to run. If None, train forever or until the train data generates the OutOfRange exception. If OutOfRange occurs in the middle, training stops before max_train_steps steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_57": {
                "name": {
                    "value": "eval_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of evaluation steps to run. If None, evaluate until the eval data raises an OutOfRange exception.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where model parameters, graph, summeries, etc are saved. If None, a local temporary directory is created.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "tf_random_seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Random seed for TensorFlow initializers. Setting this value allows consistency between reruns.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "save_summary_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Save summaries every this many steps.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "save_checkpoints_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Save checkpoints every this many steps. Can not be specified with save_checkpoints_secs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_75": {
                "name": {
                    "value": "save_checkpoints_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Save checkpoints every this many seconds. Can not be specified with save_checkpoints_steps. Defaults to 600 seconds if both save_checkpoints_steps and save_checkpoints_secs are not set. If both are set to -1, then checkpoints are disabled.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_82": {
                "name": {
                    "value": "keep_checkpoint_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum number of recent checkpoint files to keep. As new files are created, older files are deleted. If None or 0, all checkpoint files are kept.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "keep_checkpoint_every_n_hours",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hours between each checkpoint to be saved. The default value of 10,000 hours effectively disables the feature.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_90": {
                "name": {
                    "value": "log_step_count_steps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency, in number of global steps, that the global step/sec and the loss will be logged during training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_95": {
                "name": {
                    "value": "per_process_gpu_memory_fraction",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Fraction of the available GPU memory to allocate for each process.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GPUOptions_147": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "config['per_process_gpu_memory_fraction']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "allow_growth": {
                    "value": "config['gpu_allow_growth']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConfigProto_151": {
                "variable": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=config['per_process_gpu_memory_fraction'], allow_growth=config['gpu_allow_growth'])",
                            "Call"
                        ]
                    ]
                },
                "log_device_placement": {
                    "value": "config['log_device_placement']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RunConfig_155": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "config['model_dir']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "tf_random_seed": {
                    "value": "config['tf_random_seed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "save_summary_steps": {
                    "value": "config['save_summary_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "save_checkpoints_steps": {
                    "value": "config['save_checkpoints_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "save_checkpoints_secs": {
                    "value": "config['save_checkpoints_secs']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_checkpoint_max": {
                    "value": "config['keep_checkpoint_max']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "config['keep_checkpoint_every_n_hours']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "log_step_count_steps": {
                    "value": "config['log_step_count_steps']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "utils.load_config(FLAGS.config_paths)",
                            "Call"
                        ],
                        [
                            "_process_config()",
                            "Call"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "session_config": {
                    "value": "sess_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, log_device_placement=config['log_device_placement'])",
                            "Call"
                        ]
                    ]
                }
            },
            "info_142": {
                "msg": {
                    "value": "Final Config:\\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "yaml.dump(final_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_198": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_199": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/bin/utils/make_vocab.py": {
        "tensorflow": {
            "run_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/agents/ac_agent.py": {
        "tensorflow": {
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/agents/agent_utils_test.py": {
        "tensorflow": {
            "main_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/agents/dqn_agent.py": {
        "tensorflow": {
            "placeholder_262": {
                "variable": {
                    "value": "self._observ_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env_config.observ_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(self._env_config.observ_shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observ_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_266": {
                "variable": {
                    "value": "self._action_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env_config.action_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._num_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_270": {
                "variable": {
                    "value": "self._y_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_295": {
                "input_tensor": {
                    "value": "qnet_qvalues * tf.to_float(actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_299": {
                "input_tensor": {
                    "value": "self._td_error ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_307": {
                "ref": {
                    "value": "self._target.trainable_variables[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self._qnet.trainable_variables[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_317": {
                "ref": {
                    "value": "self._target.trainable_variables[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "value_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.0 - tau) * self._target.trainable_variables[i] + tau * self._qnet.trainable_variables[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_295": {
                "x": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/agents/episodic_agent_base.py": {
        "tensorflow": {
            "make_template_71": {
                "variable": {
                    "value": "self._reset_tmplt_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "'{}_reset'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._reset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_73": {
                "variable": {
                    "value": "self._observe_tmplt_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "'{}_observe'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._observe",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_template_75": {
                "variable": {
                    "value": "self._get_action_tmplt_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "'{}_get_action'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._get_action",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/agents/pg_agent.py": {
        "tensorflow": {
            "placeholder_115": {
                "variable": {
                    "value": "self._observ_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env_config.observ_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(self._env_config.observ_shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observ_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "self._action_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env_config.action_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(self._env_config.action_shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "action_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "self._advantage_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantages_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/agents/seq_pg_agent.py": {
        "tensorflow": {
            "placeholder_119": {
                "variable": {
                    "value": "self._qvalue_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qvalue_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/agents/seq_pg_agent_test.py": {
        "tensorflow": {
            "main_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/context.py": {
        "tensorflow": {
            "get_collection_ref_52": {
                "variable": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "_GLOBAL_MODE_KEY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'GLOBAL_MODE'",
                            "str"
                        ]
                    ]
                }
            },
            "placeholder_with_default_55": {
                "variable": {
                    "value": "mode_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.estimator.ModeKeys.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "global_mode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_82": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection_ref(_GLOBAL_MODE_KEY)",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_88": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection_ref(_GLOBAL_MODE_KEY)",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.EVAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_94": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection_ref(_GLOBAL_MODE_KEY)",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ],
                        [
                            "global_mode()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.PREDICT",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/context_test.py": {
        "tensorflow": {
            "get_collection_ref_64": {
                "variable": {
                    "value": "global_mode_values",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "context._GLOBAL_MODE_KEY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_str_36": {
                "bytes_or_text": {
                    "value": "global_mode_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(global_mode)",
                            "Call"
                        ],
                        [
                            "sess.run([global_mode, mode_train, mode_eval, mode_predict], feed_dict={context.global_mode(): tf.estimator.ModeKeys.TRAIN})",
                            "Call"
                        ],
                        [
                            "sess.run([global_mode, mode_train, mode_eval, mode_predict], feed_dict={context.global_mode(): tf.estimator.ModeKeys.EVAL})",
                            "Call"
                        ],
                        [
                            "sess.run([global_mode, mode_train, mode_eval, mode_predict], feed_dict={context.global_mode(): tf.estimator.ModeKeys.PREDICT})",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/core/layers.py": {
        "tensorflow": {
            "MultiRNNCell_273": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_647": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.TensorShape(s).as_list() for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "tf.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "tf.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "output_shape",
                            "variable"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_931": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.TensorShape(s).as_list() for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "tf.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "tf.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "output_shape",
                            "variable"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_256": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.check_or_get_instance(cell_type, cell_kwargs, cell_modules, rnn.RNNCell)",
                            "Call"
                        ],
                        [
                            "rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "cells[0]",
                            "Subscript"
                        ],
                        [
                            "rnn.DropoutWrapper(cell=cell, input_keep_prob=input_keep_prob, output_keep_prob=output_keep_prob, state_keep_prob=state_keep_prob, **vr_kwargs)",
                            "Call"
                        ],
                        [
                            "rnn.ResidualWrapper(cell)",
                            "Call"
                        ],
                        [
                            "rnn.HighwayWrapper(cell)",
                            "Call"
                        ],
                        [
                            "cell",
                            "Method Argument"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "input_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(d_hp['input_keep_prob'], mode)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "output_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(d_hp['output_keep_prob'], mode)",
                            "Call"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "state_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(d_hp['state_keep_prob'], mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_620": {
                "dims": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s in enumerate(_shapes)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_813": {
                "dims": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[next((s for s in sizes if s is not None), None) for sizes in zip(*input_shape)]",
                            "ListComp"
                        ],
                        [
                            "_compute_concat_output_shape(_shapes, self._axis)",
                            "Call"
                        ],
                        [
                            "_compute_concat_output_shape(_shapes, self._axis)",
                            "Call"
                        ],
                        [
                            "[next((s for s in sizes if s is not None), None) for sizes in zip(*max_ranked_shapes)]",
                            "ListComp"
                        ],
                        [
                            "layer.compute_output_shape(input_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_850": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ResidualWrapper_266": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.check_or_get_instance(cell_type, cell_kwargs, cell_modules, rnn.RNNCell)",
                            "Call"
                        ],
                        [
                            "rnn.MultiRNNCell(cells)",
                            "Call"
                        ],
                        [
                            "cells[0]",
                            "Subscript"
                        ],
                        [
                            "rnn.DropoutWrapper(cell=cell, input_keep_prob=input_keep_prob, output_keep_prob=output_keep_prob, state_keep_prob=state_keep_prob, **vr_kwargs)",
                            "Call"
                        ],
                        [
                            "rnn.ResidualWrapper(cell)",
                            "Call"
                        ],
                        [
                            "rnn.HighwayWrapper(cell)",
                            "Call"
                        ],
                        [
                            "cell",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_649": {
                "dims": {
                    "value": "[input_shape[0], input_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_651": {
                "dims": {
                    "value": "[input_shape[0], input_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_791": {
                "dims": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s in enumerate(_shapes)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_1223": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_854": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add(outputs, layer_outputs[i])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, layer_outputs[i])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_prod(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_any(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_logsumexp(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "layer_outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_858": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add(outputs, layer_outputs[i])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.multiply(outputs, layer_outputs[i])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_prod(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_any(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_logsumexp(_concat, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "layer(outputs, training=training)",
                            "Call"
                        ],
                        [
                            "layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "layer_outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_860": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_861": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_1223": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_863": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_864": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_866": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_prod_867": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_869": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_870": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_872": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_873": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_875": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_876": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_878": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_879": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_881": {
                "variable": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[layer_outputs]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_882": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=layer_outputs, axis=self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/core/layers_test.py": {
        "tensorflow": {
            "placeholder_50": {
                "variable": {
                    "value": "keep_prob_x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_145": {
                "variable": {
                    "value": "ref_output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([64, 100], -5, 20, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([10, 20], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_153": {
                "variable": {
                    "value": "ref_output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([64, 100], -5, 20, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([10, 20], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_max_216": {
                "variable": {
                    "value": "output_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([64, 100], -5, 20, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([10, 20], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "variable": {
                    "value": "output_reduce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, emb_dim], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([64, 100], -5, 20, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([self._batch_size, self._seq_length, self._emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([64, 16, 1024], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros([10, 20], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_276": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 1024]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 1024]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_36": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "Conv1D_191": {
                "filters": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_269": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_270": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_271": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_272": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_273": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_291": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_292": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_293": {
                "filters": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_294": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_295": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_312": {
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_313": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/core/optimization.py": {
        "tensorflow": {
            "to_int32_262": {
                "variable": {
                    "value": "start_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hparams['start_decay_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_263": {
                "variable": {
                    "value": "end_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hparams['end_decay_step']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_275": {
                "variable": {
                    "value": "offset_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(tf.to_int32(global_step), end_step) - start_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_405": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt_hparams['kwargs'].get('learning_rate', None)",
                            "Call"
                        ],
                        [
                            "opt_argspec.get('learning_rate', None)",
                            "Call"
                        ],
                        [
                            "lr_decay_fn(learning_rate=static_lr, global_step=global_step)",
                            "Call"
                        ],
                        [
                            "static_lr",
                            "variable"
                        ],
                        [
                            "_get_static_lr(learning_rate, optimizer_class, hparams)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_287": {
                "variable": {
                    "value": "decayed_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decayed_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decay_fn(x=offset_global_step, **fn_kwargs)",
                            "Call"
                        ],
                        [
                            "utils.call_function_with_redundant_kwargs(decay_fn, fn_kwargs_)",
                            "Call"
                        ],
                        [
                            "tf.maximum(decayed_lr, hparams['min_learning_rate'])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hparams['min_learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_513": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_521": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_527": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_276": {
                "x": {
                    "value": "tf.to_int32(global_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "end_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(hparams['end_decay_step'])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_276": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_535": {
                "x": {
                    "value": "self.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_m', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "re.match('^(.*):\\\\d+$', param_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_536": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_538": {
                "x": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_v', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_539": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_568": {
                "control_inputs": {
                    "value": "[self._finish(update_ops, 'update')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_add_571": {
                "variable": {
                    "value": "apply_updates",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_540": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_542": {
                "x": {
                    "value": "next_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "colocate_with_570": {
                "op": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/core/optimization_test.py": {
        "tensorflow": {
            "piecewise_constant_85": {
                "variable": {
                    "value": "pc_lr_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step - hparams['start_decay_step']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2, 4]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.1, 0.01, 0.001]",
                            "List"
                        ]
                    ]
                }
            },
            "natural_exp_decay_95": {
                "variable": {
                    "value": "ned_lr_true",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step - hparams['start_decay_step']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "hparams['kwargs']['decay_steps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "hparams['kwargs']['decay_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_125": {
                "variable": {
                    "value": "(gn_grads_true, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([10, 10], -1.0, 1.0) for _ in range(5)]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "hparams['kwargs']['clip_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_138": {
                "variable": {
                    "value": "v_grads_true",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.random_uniform([10, 10], -1.0, 1.0) for _ in range(5)]",
                            "ListComp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "hparams['kwargs']['clip_value_min']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "hparams['kwargs']['clip_value_max']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_153": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MomentumOptimizer_56": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_tensor_155": {
                "x": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.get_train_op(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/evals/bleu_moses.py": {
        "tensorflow": {
            "warning_154": {
                "msg": {
                    "value": "multi-bleu.perl returned non-zero exit code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_156": {
                "msg": {
                    "value": "error.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/evals/bleu_test.py": {
        "tensorflow": {
            "main_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/evals/metrics.py": {
        "tensorflow": {
            "cast_28": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, preds.dtype)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "preds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "variable": {
                    "value": "psize",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(pos_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_48": {
                "variable": {
                    "value": "nsize",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(neg_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_29": {
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(preds, labels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_29": {
                "x": {
                    "value": "tf.equal(preds, labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "pos_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "neg_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_47": {
                "input": {
                    "value": "pos_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_48": {
                "input": {
                    "value": "neg_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_29": {
                "x": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, preds.dtype)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/hyperparams_test.py": {
        "tensorflow": {
            "main_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/losses/adv_losses.py": {
        "tensorflow": {
            "reduce_mean_60": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=real_logits, labels=tf.ones_like(real_logits))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_logits, labels=tf.zeros_like(fake_logits))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_60": {
                "logits": {
                    "value": "real_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(real_data)",
                            "Call"
                        ],
                        [
                            "real_logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(real_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_66": {
                "logits": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(fake_data)",
                            "Call"
                        ],
                        [
                            "fake_logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(fake_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=fake_logits, labels=tf.ones_like(fake_logits))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_61": {
                "input": {
                    "value": "real_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(real_data)",
                            "Call"
                        ],
                        [
                            "real_logits[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(fake_data)",
                            "Call"
                        ],
                        [
                            "fake_logits[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_74": {
                "logits": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(fake_data)",
                            "Call"
                        ],
                        [
                            "fake_logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(fake_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator_fn(fake_data)",
                            "Call"
                        ],
                        [
                            "fake_logits[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/losses/adv_losses_test.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "real_data",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, data_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "fake_data",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, data_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "const_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/losses/entropy.py": {
        "tensorflow": {
            "reduce_sum_37": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-probs * tf.log(probs)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(entropy, -1)",
                            "Call"
                        ],
                        [
                            "_get_entropy(logits)",
                            "Call"
                        ],
                        [
                            "reduce_dimensions(entropy, average_axes=average_axes, sum_axes=sum_axes)",
                            "Call"
                        ],
                        [
                            "_get_entropy(logits)",
                            "Call"
                        ],
                        [
                            "mask_and_reduce(entropy, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_36": {
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits) + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/losses/losses_utils.py": {
        "tensorflow": {
            "reduce_sum_149": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_159": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tensor, axis=average_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=sum_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tensor, axis=reduced_axes)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "average_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[average_axes]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tensor, axis=average_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=sum_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tensor, axis=reduced_axes)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "sum_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sum_axes]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tensor, axis=average_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=sum_axes, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tensor, axis=reduced_axes)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "reduced_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "reduced_axes + sum_axes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "np.arange(2, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "np.arange(2, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "mask_sequences(sequence, sequence_length, dtype=dtype, time_major=False, tensor_rank=rank)",
                            "Call"
                        ],
                        [
                            "reduce_batch_time(sequence, sequence_length, average_across_batch, average_across_timesteps, sum_over_batch, sum_over_timesteps)",
                            "Call"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=np.arange(2, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sequence, axis=[1])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sequence, axis=[0])",
                            "Call"
                        ],
                        [
                            "sequence / tf.to_float(sequence_length)",
                            "BinOp"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_156": {
                "x": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/losses/mle_losses.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_v2_105": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_195": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_287": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_103": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_194": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_283": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_285": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(labels)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_360": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_369": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pos_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clas_fn(pos_inputs)",
                            "Call"
                        ],
                        [
                            "pos_logits[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(pos_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_376": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clas_fn(neg_inputs)",
                            "Call"
                        ],
                        [
                            "neg_logits[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(neg_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_370": {
                "input": {
                    "value": "pos_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clas_fn(pos_inputs)",
                            "Call"
                        ],
                        [
                            "pos_logits[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_377": {
                "input": {
                    "value": "neg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "clas_fn(neg_inputs)",
                            "Call"
                        ],
                        [
                            "neg_logits[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/losses/mle_losses_test.py": {
        "tensorflow": {
            "ones_29": {
                "variable": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, self._max_time]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_31": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "self._one_hot_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self._labels, self._num_classes, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self._batch_size, self._max_time, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "main_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rank_43": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_48": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_50": {
                "dims": {
                    "value": "[self._max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rank_55": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_57": {
                "dims": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rank_62": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_65": {
                "dims": {
                    "value": "[self._batch_size, self._max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_73": {
                "dims": {
                    "value": "[self._batch_size, self._max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_105": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.int32, shape=None)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_109": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fn(labels, logits, sequence_length)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_timesteps=True, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length, sum_over_timesteps=False, average_across_batch=False)",
                            "Call"
                        ],
                        [
                            "loss_fn(labels, logits, sequence_length_time, sum_over_timesteps=False, average_across_batch=False, time_major=True)",
                            "Call"
                        ],
                        [
                            "tx.losses.sequence_sigmoid_cross_entropy(logits=self._logits[:, :, 0], labels=tf.to_float(labels), sequence_length=self._sequence_length)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/losses/pg_losses.py": {
        "tensorflow": {
            "stop_gradient_119": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(actions)",
                            "Call"
                        ],
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_120": {
                "variable": {
                    "value": "neg_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(actions)",
                            "Call"
                        ],
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_215": {
                "variable": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "advantages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(advantages)",
                            "Call"
                        ],
                        [
                            "advantages",
                            "Method Argument"
                        ],
                        [
                            "advantages",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_250": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs * advantages",
                            "BinOp"
                        ],
                        [
                            "mask_and_reduce(losses, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs * advantages",
                            "BinOp"
                        ],
                        [
                            "mask_and_reduce(losses, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "range(1, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_252": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs * advantages",
                            "BinOp"
                        ],
                        [
                            "mask_and_reduce(losses, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-log_probs * advantages",
                            "BinOp"
                        ],
                        [
                            "mask_and_reduce(losses, sequence_length, rank=rank, average_across_batch=average_across_batch, average_across_timesteps=average_across_timesteps, average_across_remaining=average_across_remaining, sum_over_batch=sum_over_batch, sum_over_timesteps=sum_over_timesteps, sum_over_remaining=sum_over_remaining, time_major=time_major)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(losses, axis=range(1, rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(losses)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "range(1, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/losses/rewards.py": {
        "tensorflow": {
            "reduce_max_155": {
                "variable": {
                    "value": "max_seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_159": {
                "variable": {
                    "value": "dmat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.concat([[batch_size], [max_seq_length]], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_162": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(sequence_length)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "dtype or reward.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_163": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask[:, 1:], tf.zeros_like(mask[:, -1:])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumprod_166": {
                "variable": {
                    "value": "dmat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([batch_size, max_seq_length], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask * discount + (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "np.cumprod(dmat[:, ::-1], axis=1)[:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "tf.ones(tf.concat([[batch_size], [max_seq_length]], 0), dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask * discount + (1 - mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cumprod(dmat, axis=1, reverse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_198": {
                "variable": {
                    "value": "disc_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "variable": {
                    "value": "rev_reward_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reverse(reward, [1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_202": {
                "variable": {
                    "value": "rev_reward_T_cum",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda acc, cur: cur + discount * acc",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "rev_reward_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reverse(reward, [1]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_like(reward[:, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reverse_207": {
                "variable": {
                    "value": "disc_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(rev_reward_T_cum, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_101": {
                "variable": {
                    "value": "(mu, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "disc_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_discount_reward_tensor_1d(reward, sequence_length, discount, dtype)",
                            "Call"
                        ],
                        [
                            "_discount_reward_py_1d(reward, sequence_length, discount, dtype)",
                            "Call"
                        ],
                        [
                            "_discount_reward_tensor_2d(reward, sequence_length, discount, dtype)",
                            "Call"
                        ],
                        [
                            "_discount_reward_py_2d(reward, sequence_length, discount, dtype)",
                            "Call"
                        ],
                        [
                            "(disc_reward - mu) / (tf.sqrt(var) + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "(disc_reward - mu) / (std + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "dmat * reward[:, None]",
                            "BinOp"
                        ],
                        [
                            "mask_sequences(disc_reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "dmat * tf.expand_dims(reward, -1)",
                            "BinOp"
                        ],
                        [
                            "mask_sequences(disc_reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ],
                        [
                            "np.cumsum(reward[:, ::-1], axis=1, dtype=dtype)[:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.copy(reward)",
                            "Call"
                        ],
                        [
                            "tf.cumsum(reward, axis=1, reverse=True)",
                            "Call"
                        ],
                        [
                            "tf.reverse(tf.transpose(rev_reward_T_cum, [1, 0]), [1])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_154": {
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_168": {
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_160": {
                "values": {
                    "value": "[[batch_size], [max_seq_length]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_201": {
                "tensor": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "np.array(reward)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mask_sequences(reward, sequence_length, dtype=dtype, tensor_rank=2)",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_208": {
                "a": {
                    "value": "rev_reward_T_cum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(fn=lambda acc, cur: cur + discount * acc, elems=rev_reward_T, initializer=tf.zeros_like(reward[:, 1]), back_prop=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_163": {
                "input": {
                    "value": "mask[:, -1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_205": {
                "input": {
                    "value": "reward[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_102": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(disc_reward, axes=[0, 1], keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/losses/rewards_test.py": {
        "tensorflow": {
            "ones_111": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_170": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_38": {
                "value": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 10], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 10], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 10], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_67": {
                "value": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.ones([2, 10], dtype=np.float64)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 10], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/losses/rl_losses.py": {
        "tensorflow": {
            "shape_62": {
                "variable": {
                    "value": "(batch, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_fn(num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_63": {
                "variable": {
                    "value": "rewards_local",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "probs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "probs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "rewards_global",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_reward_fn(sequences, seq_lens)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_73": {
                "x": {
                    "value": "probs + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "tf.reduce_sum(log_probs * rewards, axis=1) / seq_lens",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "log_probs * rewards",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/models/seq2seq/basic_seq2seq.py": {
        "tensorflow": {
            "ones_like_144": {
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/models/seq2seq/seq2seq_base.py": {
        "tensorflow": {
            "EstimatorSpec_284": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_predictions(decoder_results, features, labels)",
                            "Call"
                        ],
                        [
                            "self._get_predictions(decoder_results, features, labels, loss)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.get_loss(decoder_results, features, labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_train_op(loss)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_eval_metric_ops(decoder_results, features, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_317": {
                "name": {
                    "value": "tf.GraphKeys.TABLE_INITIALIZERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "iterator.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/module_base.py": {
        "tensorflow": {
            "make_template_72": {
                "variable": {
                    "value": "self._template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self._hparams.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._build",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_scope_now_": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_129": {
                "variable": {
                    "value": "internal_trainable_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.variable_scope.name",
                            "Attribute"
                        ],
                        [
                            "re.escape(scope_name) + '/'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/classifiers/conv_classifiers.py": {
        "tensorflow": {
            "to_int64_192": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(pred, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_188": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(inputs, sequence_length, dtype, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(inputs, sequence_length, dtype, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_191": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(inputs, sequence_length, dtype, mode)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(tf.reshape(pred, [-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/classifiers/conv_classifiers_test.py": {
        "tensorflow": {
            "ones_29": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_45": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/classifiers/rnn_classifiers.py": {
        "tensorflow": {
            "flatten_260": {
                "variable": {
                    "value": "enc_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "enc_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(inputs=inputs, sequence_length=sequence_length, initial_state=initial_state, time_major=time_major, mode=mode, return_output_size=True, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_261": {
                "variable": {
                    "value": "enc_output_size_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "enc_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(inputs=inputs, sequence_length=sequence_length, initial_state=initial_state, time_major=time_major, mode=mode, return_output_size=True, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int64_331": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.greater(logits, 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.greater(logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(pred)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_268": {
                "variable": {
                    "value": "enc_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "enc_outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(enc_outputs)",
                            "Call"
                        ],
                        [
                            "[shapes.flatten(x, 2, xs) for (x, xs) in zip(enc_outputs_flat, enc_output_dims_flat)]",
                            "ListComp"
                        ],
                        [
                            "enc_outputs_flat[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(enc_outputs_flat, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.greater(logits, 0), -1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.greater(logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(pred)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pred, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_320": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.greater(logits, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_321": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "_forward_single_output_layer(logits, logit_input_dim, self._logit_layer)",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_323": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "_forward_single_output_layer(logits, logit_input_dim, self._logit_layer)",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "greater_326": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "_forward_single_output_layer(logits, logit_input_dim, self._logit_layer)",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "_forward_single_output_layer(logits, logit_input_dim, self._logit_layer)",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_329": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "_forward_single_output_layer(logits, logit_input_dim, self._logit_layer)",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_303": {
                "variable": {
                    "value": "length_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "length_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.max_seq_length - tf.shape(inputs)[1]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(length_diff, [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_305": {
                "variable": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "length_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.max_seq_length - tf.shape(inputs)[1]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(length_diff, [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_306": {
                "variable": {
                    "value": "logit_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "enc_outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(enc_outputs)",
                            "Call"
                        ],
                        [
                            "[shapes.flatten(x, 2, xs) for (x, xs) in zip(enc_outputs_flat, enc_output_dims_flat)]",
                            "ListComp"
                        ],
                        [
                            "enc_outputs_flat[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(enc_outputs_flat, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(length_diff, paddings=[[1, 1], [1, 0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "logit_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logit_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(enc_outputs_flat, paddings=paddings)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logit_input, [-1, logit_input_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, logit_input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_320": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outputs_flat",
                            "variable"
                        ],
                        [
                            "enc_outputs_flat[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "enc_outputs_flat[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "_forward_single_output_layer(logits, logit_input_dim, self._logit_layer)",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logits)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1])",
                            "Call"
                        ],
                        [
                            "self._logit_layer(logit_input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_302": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/classifiers/rnn_classifiers_test.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 6, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 6, emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/connectors/connectors.py": {
        "tensorflow": {
            "flatten_53": {
                "variable": {
                    "value": "flat_output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_54": {
                "variable": {
                    "value": "flat_output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_93": {
                "variable": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(x, [-1, d]) for (x, d) in zip(flat_input, dims)]",
                            "ListComp"
                        ],
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_99": {
                "variable": {
                    "value": "flat_output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_110": {
                "variable": {
                    "value": "fc_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(flat_input, 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "sum_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(size_list)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.get_activation_fn(self.hparams.activation_fn)",
                            "Call"
                        ],
                        [
                            "get_function(self.hparams.activation_fn, fn_modules)",
                            "Call"
                        ],
                        [
                            "get_function(self.hparams.activation_fn, fn_modules)",
                            "Call"
                        ],
                        [
                            "tf.identity",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_113": {
                "variable": {
                    "value": "flat_output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(concat_input, sum_output_size, activation=activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "size_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * len(flat_output_size)",
                            "BinOp"
                        ],
                        [
                            "flat_output_size",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_sequence_as_118": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(outputs)",
                            "Call"
                        ],
                        [
                            "tf.split(fc_output, size_list, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_same_structure_52": {
                "nest1": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "nest2": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_200": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tf.constant(value_, shape=[batch_size, x])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_673": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(flat_output, flat_output_size)",
                            "Call"
                        ],
                        [
                            "nest.pack_sequence_as(structure=output_size, flat_sequence=flat_output)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda x: tf.constant(value_, shape=[batch_size, x]), self._output_size)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "nest.pack_sequence_as(self._output_size, flat_input)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(inputs, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(sample, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "dstr.sample(num_samples)",
                            "Call"
                        ],
                        [
                            "dstr.sample()",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, output.shape.concatenate(tf.TensorShape(1)))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(output)",
                            "Call"
                        ],
                        [
                            "tf.cast(output, tf.float32)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(output, self._output_size, activation_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_675": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(flat_output, flat_output_size)",
                            "Call"
                        ],
                        [
                            "nest.pack_sequence_as(structure=output_size, flat_sequence=flat_output)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda x: tf.constant(value_, shape=[batch_size, x]), self._output_size)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "nest.pack_sequence_as(self._output_size, flat_input)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(inputs, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(sample, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "dstr.sample(num_samples)",
                            "Call"
                        ],
                        [
                            "dstr.sample()",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, output.shape.concatenate(tf.TensorShape(1)))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(output)",
                            "Call"
                        ],
                        [
                            "tf.cast(output, tf.float32)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(output, self._output_size, activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "flat_output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + shape.as_list()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_669": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(flat_output, flat_output_size)",
                            "Call"
                        ],
                        [
                            "nest.pack_sequence_as(structure=output_size, flat_sequence=flat_output)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda x: tf.constant(value_, shape=[batch_size, x]), self._output_size)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "nest.pack_sequence_as(self._output_size, flat_input)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(inputs, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(sample, self._output_size, activation_fn)",
                            "Call"
                        ],
                        [
                            "dstr.sample(num_samples)",
                            "Call"
                        ],
                        [
                            "dstr.sample()",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, output.shape.concatenate(tf.TensorShape(1)))",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(output)",
                            "Call"
                        ],
                        [
                            "tf.cast(output, tf.float32)",
                            "Call"
                        ],
                        [
                            "_mlp_transform(output, self._output_size, activation_fn)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output.shape.concatenate(tf.TensorShape(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_57": {
                "dims": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(flat_output, flat_output_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_same_structure_289": {
                "nest1": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_291": {
                "variable": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_sequence_as_292": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "[tf.reshape(x, [-1, d]) for (x, d) in zip(flat_input, dims)]",
                            "ListComp"
                        ],
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_201": {
                "value": {
                    "value": "value_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "variable"
                        ],
                        [
                            "self.hparams.value",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_670": {
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/connectors/connectors_test.py": {
        "tensorflow": {
            "zeros_84": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, variable_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_85": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, variable_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "mu_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[variable_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_87": {
                "variable": {
                    "value": "var_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[variable_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assert_same_structure_42": {
                "nest1": {
                    "value": "decoder_initial_state_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connector(self._batch_size)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_same_structure_44": {
                "nest1": {
                    "value": "decoder_initial_state_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connector(self._batch_size, value=1.0)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_same_structure_67": {
                "nest1": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "connector(tf.zeros([5, 10]))",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "[5, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_same_structure_73": {
                "nest1": {
                    "value": "output_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(output)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "self._decoder_cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_81": {
                "dims": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_119": {
                "dims": {
                    "value": "[sample_num, state_size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_121": {
                "dims": {
                    "value": "[self._batch_size, state_size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_123": {
                "dims": {
                    "value": "[self._batch_size, state_size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_51": {
                "structure": {
                    "value": "s_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([decoder_initial_state_0, decoder_initial_state_1])",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_52": {
                "structure": {
                    "value": "s_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([decoder_initial_state_0, decoder_initial_state_1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/beam_search_decode.py": {
        "tensorflow": {
            "convert_to_tensor_200": {
                "variable": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start_tokens, dtype=tf.int32, name='start_tokens')",
                            "Call"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "start_tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_204": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start_tokens, dtype=tf.int32, name='start_tokens')",
                            "Call"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_or_cell.variable_scope",
                            "Attribute"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/beam_search_decode_test.py": {
        "tensorflow": {
            "constant_187": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_209": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "main_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/rnn_decoder_base.py": {
        "tensorflow": {
            "reshape_62": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "dynamic_decode(decoder=self, impute_finished=impute_finished, maximum_iterations=max_l, output_time_major=output_time_major)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "dynamic_decode(decoder=self, impute_finished=impute_finished, maximum_iterations=max_l, output_time_major=output_time_major)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "output_layer_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(outputs, output_layer_tensor)",
                            "Call"
                        ],
                        [
                            "logits + affine_bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(logits, shape[:-1] + [vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape[:-1] + [vocab_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "affine_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "affine_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_79": {
                "x": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer",
                            "Call"
                        ],
                        [
                            "output_layer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_469": {
                "variable": {
                    "value": "max_l",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : max_l_train",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_l_infer",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "map_structure_511": {
                "variable": {
                    "value": "output_shape_with_unknown_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: tensor_shape.TensorShape([None]).concatenate(s)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._cell.output_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope",
                            "Method Argument"
                        ],
                        [
                            "variable_scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_516": {
                "func": {
                    "value": "lambda s: s[1:]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "layer_output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_layer.compute_output_shape(output_shape_with_unknown_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_91": {
                "variable": {
                    "value": "_output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "variable"
                        ],
                        [
                            "shape_list(output_layer)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "output_layer_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer_bias",
                            "Method Argument"
                        ],
                        [
                            "output_layer_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope",
                            "Method Argument"
                        ],
                        [
                            "variable_scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_512": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_512": {
                "arys": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/rnn_decoder_helpers.py": {
        "tensorflow": {
            "top_k_203": {
                "variable": {
                    "value": "(values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "outputs / self._softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "_top_k_logits(logits, k=self._top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_210": {
                "pred": {
                    "value": "tf.equal(k, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : logits",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : _top_k()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Categorical_274": {
                "variable": {
                    "value": "sample_id_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "outputs / self._softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "_top_k_logits(logits, k=self._top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_332": {
                "variable": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "start_tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_334": {
                "variable": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "end_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "end_token",
                            "Method Argument"
                        ],
                        [
                            "end_token",
                            "Method Argument"
                        ],
                        [
                            "end_token",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_token",
                    "type": "str",
                    "possible_values": []
                }
            },
            "size_338": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_342": {
                "variable": {
                    "value": "soft_start_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self._embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_355": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_372": {
                "variable": {
                    "value": "oh",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "depth": {
                    "value": "self._embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_376": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_383": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs / self._tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_all_393": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "tf.equal(hard_ids, self._end_token)",
                            "Call"
                        ],
                        [
                            "tf.tile([False], [self._batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_477": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs / self._tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_180": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_205": {
                "condition": {
                    "value": "logits < min_values",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(logits, dtype=logits.dtype) * -10000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "outputs / self._softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "_top_k_logits(logits, k=self._top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_211": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_325": {
                "variable": {
                    "value": "self._embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_389": {
                "variable": {
                    "value": "hard_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_390": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hard_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(sample_ids, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_392": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_or_396": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reach_max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_399": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_403": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._start_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._embedding_fn(soft_ids=sample_ids)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_481": {
                "variable": {
                    "value": "sample_ids_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(tf.argmax(sample_ids, -1), size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_411": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._start_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._embedding_fn(soft_ids=sample_ids, times=times)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "embedding_lookup_185": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_207": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "outputs / self._softmax_temperature",
                            "BinOp"
                        ],
                        [
                            "_top_k_logits(logits, k=self._top_k)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_330": {
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_480": {
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_482": {
                "indices": {
                    "value": "tf.argmax(sample_ids, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(sample_ids)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stop_gradient_483": {
                "input": {
                    "value": "sample_ids_hard - sample_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_410": {
                "shape": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_482": {
                "input": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs / self._tau)",
                            "Call"
                        ],
                        [
                            "GumbelSoftmax(self._tau, logits=outputs).sample()",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(sample_ids_hard - sample_ids) + sample_ids",
                            "BinOp"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/rnn_decoder_helpers_test.py": {
        "tensorflow": {
            "main_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_58": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_129": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_53": {
                "dims": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_55": {
                "dims": {
                    "value": "[self._batch_size, self._emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_124": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_126": {
                "dims": {
                    "value": "[self._batch_size, self._emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_48": {
                "shape": {
                    "value": "[self._batch_size, self._vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_50": {
                "shape": {
                    "value": "[self._batch_size, self._vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_119": {
                "shape": {
                    "value": "[self._batch_size, self._vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_121": {
                "shape": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/rnn_decoders.py": {
        "tensorflow": {
            "equal_259": {
                "variable": {
                    "value": "reach_max_time",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "time + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.max_decoding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_584": {
                "variable": {
                    "value": "flat_initial_state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_598": {
                "variable": {
                    "value": "reach_max_time",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "time + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.max_decoding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_415": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_555": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_290": {
                "structure": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_292": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._rnn_output_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_294": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._cell.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_650": {
                "structure": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_652": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._rnn_output_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_654": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._cell.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_656": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._alignments_size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_658": {
                "func": {
                    "value": "lambda _: dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._cell.state_size.attention",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_587": {
                "input": {
                    "value": "flat_initial_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_630": {
                "input": {
                    "value": "am._keys",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/rnn_decoders_test.py": {
        "tensorflow": {
            "Dense_86": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "_inputs_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size, self._max_time]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "_embedding_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._vocab_size, self._emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_125": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "_embedding_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [self._vocab_size, self._emb_dim], name='emb')",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "_inputs_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [self._batch_size, self._max_time], name='inputs')",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_128": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_186": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_245": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_298": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_348": {
                "variable": {
                    "value": "encoder_values_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.random.randint(self._max_time, size=[self._batch_size]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "main_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/tf_helpers.py": {
        "tensorflow": {
            "TensorArray_65": {
                "dtype": {
                    "value": "inp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "array_ops.shape(inp)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "inp.get_shape()[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unstack_65": {
                "value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_142": {
                "variable": {
                    "value": "self._sample_ids_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "sample_ids_shape or []",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_573": {
                "variable": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_tokens",
                            "Method Argument"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "start_tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_575": {
                "variable": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "end_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_token",
                            "Method Argument"
                        ],
                        [
                            "end_token",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_token",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_606": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_616": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_622": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(sample_ids, dtypes.bool)",
                            "Call"
                        ],
                        [
                            "math_ops.argmax(outputs, axis=-1, output_type=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self._end_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_623": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initialize_fn()",
                            "Call"
                        ],
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "self._end_fn(sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_703": {
                "variable": {
                    "value": "sample_id_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "outputs / self._softmax_temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_730": {
                "variable": {
                    "value": "self._sample_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "sample_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_734": {
                "variable": {
                    "value": "self._start_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "start_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "start_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_750": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[False]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_204": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_structure_209": {
                "variable": {
                    "value": "self._input_tas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "_unstack_ta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_unstack_ta",
                            "Call"
                        ]
                    ]
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_210": {
                "variable": {
                    "value": "self._sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length",
                            "Call"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sequence_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_structure_217": {
                "variable": {
                    "value": "self._zero_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda inp: array_ops.zeros_like(inp[0, :])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_236": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_244": {
                "variable": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "self._sequence_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_245": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initialize_fn()",
                            "Call"
                        ],
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "self._end_fn(sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_246": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._zero_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : nest.map_structure(lambda inp: inp.read(0), self._input_tas)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cast_254": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.argmax(outputs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_264": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initialize_fn()",
                            "Call"
                        ],
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "self._end_fn(sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_269": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._zero_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : nest.map_structure(read_from_ta, self._input_tas)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "convert_to_tensor_320": {
                "variable": {
                    "value": "self._sampling_probability",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sampling_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampling_probability",
                            "Method Argument"
                        ],
                        [
                            "sampling_probability",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sampling_probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Bernoulli_343": {
                "variable": {
                    "value": "select_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "self._sampling_probability",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_347": {
                "variable": {
                    "value": "sample_id_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_all_391": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initialize_fn()",
                            "Call"
                        ],
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "self._end_fn(sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_392": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : base_next_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "maybe_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maybe_sample",
                            "Call"
                        ],
                        [
                            "maybe_sample",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_430": {
                "variable": {
                    "value": "self._sampling_probability",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sampling_probability",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampling_probability",
                            "Method Argument"
                        ],
                        [
                            "sampling_probability",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sampling_probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Bernoulli_471": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "self._sampling_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_485": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(sample_ids, dtypes.bool)",
                            "Call"
                        ],
                        [
                            "math_ops.argmax(outputs, axis=-1, output_type=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtypes.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_527": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initialize_fn()",
                            "Call"
                        ],
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "self._end_fn(sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_528": {
                "variable": {
                    "value": "no_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.reduce_any(sample_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_529": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "math_ops.logical_or(all_finished, no_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : base_next_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "maybe_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maybe_sample",
                            "Call"
                        ],
                        [
                            "maybe_sample",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_599": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_or_625": {
                "variable": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "reach_max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_629": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._start_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._embedding_fn(sample_ids)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_160": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_163": {
                "variable": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initialize_fn()",
                            "Call"
                        ],
                        [
                            "math_ops.equal(0, self._sequence_length)",
                            "Call"
                        ],
                        [
                            "next_time >= self._sequence_length",
                            "Compare"
                        ],
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "math_ops.equal(sample_ids, self._end_token)",
                            "Call"
                        ],
                        [
                            "array_ops.tile([False], [self._batch_size])",
                            "Call"
                        ],
                        [
                            "self._end_fn(sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_167": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_172": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_203": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_207": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_transpose_batch_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder._transpose_batch_time",
                            "Attribute"
                        ]
                    ]
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_243": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_253": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_260": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_308": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_340": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_348": {
                "condition": {
                    "value": "select_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_sampler.sample(sample_shape=self.batch_size, seed=self._scheduling_seed)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "sample_id_sampler.sample(seed=self._seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "gen_array_ops.fill([self.batch_size], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_355": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_367": {
                "variable": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.where(sample_ids > -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_369": {
                "variable": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.where(sample_ids <= -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_371": {
                "variable": {
                    "value": "sample_ids_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(sample_ids, dtypes.bool)",
                            "Call"
                        ],
                        [
                            "math_ops.argmax(outputs, axis=-1, output_type=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids > -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(sample_ids), dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_372": {
                "variable": {
                    "value": "inputs_not_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids <= -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_383": {
                "variable": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_428": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_440": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_441": {
                "variable": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "auxiliary_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "map_structure_443": {
                "variable": {
                    "value": "maybe_concatenated_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x, y: array_ops.concat((x, y), -1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, inputs)",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(inputs, name='inputs')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_469": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_476": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_509": {
                "variable": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.where(sample_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_511": {
                "variable": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "array_ops.where(math_ops.logical_not(sample_ids))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_513": {
                "variable": {
                    "value": "outputs_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids > -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(sample_ids), dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_514": {
                "variable": {
                    "value": "inputs_not_sampling",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids <= -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_519": {
                "variable": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_588": {
                "variable": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_638": {
                "variable": {
                    "value": "next_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : self._start_inputs",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._embedding_fn(sample_ids, times)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_733": {
                "input": {
                    "value": "start_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_255": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fill_351": {
                "dims": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_structure_447": {
                "variable": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_transpose_batch_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder._transpose_batch_time",
                            "Attribute"
                        ]
                    ]
                },
                "*structure": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_451": {
                "func": {
                    "value": "_unstack_ta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_unstack_ta",
                            "Call"
                        ]
                    ]
                },
                "*structure": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_496": {
                "variable": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda ta: ta.read(next_time)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._auxiliary_input_tas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_528": {
                "input_tensor": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(sample_ids, dtypes.bool)",
                            "Call"
                        ],
                        [
                            "math_ops.argmax(outputs, axis=-1, output_type=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_or_530": {
                "x": {
                    "value": "all_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(finished)",
                            "Call"
                        ],
                        [
                            "tf.logical_or(all_finished, reach_max_time)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "no_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.logical_not(math_ops.reduce_any(sample_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_571": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_218": {
                "input": {
                    "value": "inp[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "map_structure_248": {
                "func": {
                    "value": "lambda inp: inp.read(0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._input_tas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_271": {
                "func": {
                    "value": "read_from_ta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_from_ta",
                            "Call"
                        ]
                    ]
                },
                "*structure": {
                    "value": "self._input_tas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_314": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_368": {
                "condition": {
                    "value": "sample_ids > -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_370": {
                "condition": {
                    "value": "sample_ids <= -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "scatter_nd_384": {
                "indices": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids > -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(sample_ids), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "sampled_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._embedding_fn(sample_ids_sampling)",
                            "Call"
                        ],
                        [
                            "self._embedding_fn(sample_ids_sampling, times)",
                            "Call"
                        ],
                        [
                            "maybe_concatenate_auxiliary_inputs(self._next_inputs_fn(outputs_sampling), where_sampling)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_387": {
                "indices": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids <= -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "inputs_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.gather_nd(base_next_inputs, where_not_sampling)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(base_next_inputs, where_not_sampling)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_499": {
                "variable": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_500": {
                "func": {
                    "value": "lambda x, y: array_ops.concat((x, y), -1)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "outputs_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "auxiliary_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(auxiliary_inputs, name='auxiliary_inputs')",
                            "Call"
                        ],
                        [
                            "nest.map_structure(_transpose_batch_time, auxiliary_inputs)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta: ta.read(next_time), self._auxiliary_input_tas)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(auxiliary_inputs, indices)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_505": {
                "condition": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(sample_ids, dtypes.bool)",
                            "Call"
                        ],
                        [
                            "math_ops.argmax(outputs, axis=-1, output_type=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "x": {
                    "value": "maybe_concatenate_auxiliary_inputs(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "base_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ScheduledEmbeddingTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ],
                        [
                            "super(ScheduledOutputTrainingHelper, self).next_inputs(time=time, outputs=outputs, state=state, sample_ids=sample_ids, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_510": {
                "condition": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(sample_ids, dtypes.bool)",
                            "Call"
                        ],
                        [
                            "math_ops.argmax(outputs, axis=-1, output_type=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_512": {
                "condition": {
                    "value": "math_ops.logical_not(sample_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scatter_nd_520": {
                "indices": {
                    "value": "where_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids > -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(sample_ids), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "sampled_next_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._embedding_fn(sample_ids_sampling)",
                            "Call"
                        ],
                        [
                            "self._embedding_fn(sample_ids_sampling, times)",
                            "Call"
                        ],
                        [
                            "maybe_concatenate_auxiliary_inputs(self._next_inputs_fn(outputs_sampling), where_sampling)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_523": {
                "indices": {
                    "value": "where_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(array_ops.where(sample_ids <= -1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(array_ops.where(math_ops.logical_not(sample_ids)), dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "inputs_not_sampling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.gather_nd(base_next_inputs, where_not_sampling)",
                            "Call"
                        ],
                        [
                            "array_ops.gather_nd(base_next_inputs, where_not_sampling)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "base_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ],
                        [
                            "array_ops.shape(base_next_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_637": {
                "shape": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_444": {
                "values": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_not_512": {
                "x": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(math_ops.argmax(outputs, axis=-1), dtypes.int32)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(sample_ids, dtypes.bool)",
                            "Call"
                        ],
                        [
                            "math_ops.argmax(outputs, axis=-1, output_type=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "sample_id_sampler.sample(seed=self._seed)",
                            "Call"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ],
                        [
                            "sample_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_380": {
                "shape": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_501": {
                "values": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/transformer_decoders.py": {
        "tensorflow": {
            "squeeze_278": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._self_attention_stack(tf.expand_dims(inputs, axis=1), memory=cache.get('memory'), cache=cache)",
                            "Call"
                        ],
                        [
                            "self._output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1])",
                            "Call"
                        ],
                        [
                            "self._self_attention_stack(tf.expand_dims(inputs, axis=1), memory=cache.get('memory'), cache=cache)",
                            "Call"
                        ],
                        [
                            "self._output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1])",
                            "Call"
                        ],
                        [
                            "dynamic_decode(decoder=self, impute_finished=impute_finished, maximum_iterations=max_decoding_length, output_time_major=False, scope=self.variable_scope)",
                            "Call"
                        ],
                        [
                            "TransformerDecoderOutput(logits=outputs.logits, sample_id=tf.concat([tf.expand_dims(start_tokens, 1), outputs.sample_id], axis=1))",
                            "Call"
                        ],
                        [
                            "beam_search.beam_search(_symbols_to_logits_fn, start_tokens, beam_width, decode_length, self._vocab_size, length_penalty, eos_id=end_token, states=self._cache)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "self._inputs_to_outputs(inputs, state)",
                            "Call"
                        ],
                        [
                            "TransformerDecoderOutput(logits=outputs, sample_id=sample_ids)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._self_attention_stack(tf.expand_dims(inputs, axis=1), memory=cache.get('memory'), cache=cache)",
                            "Call"
                        ],
                        [
                            "self._output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1])",
                            "Call"
                        ],
                        [
                            "self._self_attention_stack(tf.expand_dims(inputs, axis=1), memory=cache.get('memory'), cache=cache)",
                            "Call"
                        ],
                        [
                            "self._output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1])",
                            "Call"
                        ],
                        [
                            "dynamic_decode(decoder=self, impute_finished=impute_finished, maximum_iterations=max_decoding_length, output_time_major=False, scope=self.variable_scope)",
                            "Call"
                        ],
                        [
                            "TransformerDecoderOutput(logits=outputs.logits, sample_id=tf.concat([tf.expand_dims(start_tokens, 1), outputs.sample_id], axis=1))",
                            "Call"
                        ],
                        [
                            "beam_search.beam_search(_symbols_to_logits_fn, start_tokens, beam_width, decode_length, self._vocab_size, length_penalty, eos_id=end_token, states=self._cache)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "self._inputs_to_outputs(inputs, state)",
                            "Call"
                        ],
                        [
                            "TransformerDecoderOutput(logits=outputs, sample_id=sample_ids)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_613": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_ids, times)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self._hparams.embedding_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_712": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self._hparams.multihead_attention.num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_759": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._self_attention_stack(tf.expand_dims(inputs, axis=1), memory=cache.get('memory'), cache=cache)",
                            "Call"
                        ],
                        [
                            "self._output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1])",
                            "Call"
                        ],
                        [
                            "self._self_attention_stack(tf.expand_dims(inputs, axis=1), memory=cache.get('memory'), cache=cache)",
                            "Call"
                        ],
                        [
                            "self._output_layer(outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, axis=[1])",
                            "Call"
                        ],
                        [
                            "dynamic_decode(decoder=self, impute_finished=impute_finished, maximum_iterations=max_decoding_length, output_time_major=False, scope=self.variable_scope)",
                            "Call"
                        ],
                        [
                            "TransformerDecoderOutput(logits=outputs.logits, sample_id=tf.concat([tf.expand_dims(start_tokens, 1), outputs.sample_id], axis=1))",
                            "Call"
                        ],
                        [
                            "beam_search.beam_search(_symbols_to_logits_fn, start_tokens, beam_width, decode_length, self._vocab_size, length_penalty, eos_id=end_token, states=self._cache)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "self._inputs_to_outputs(inputs, state)",
                            "Call"
                        ],
                        [
                            "TransformerDecoderOutput(logits=outputs, sample_id=sample_ids)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_823": {
                "variable": {
                    "value": "reach_max_time",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "time + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.max_decoding_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_int32_512": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_value_691": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "pylist": {
                    "value": "tf.convert_to_tensor(batch_size, name='batch_size')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_819": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.context_sequence_length > _times",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.context[:, time]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._helper.sample(time=time, outputs=outputs, state=state)",
                            "Call"
                        ],
                        [
                            "tf.where(self.context_sequence_length > _times, self.context[:, time], sample_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_ids, times)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self._hparams.embedding_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_290": {
                "shape": {
                    "value": "[_batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_294": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_ids, times)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs, rate=self._hparams.embedding_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_694": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_694": {
                "arys": {
                    "value": "from_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "from_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorArray_697": {
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "clear_after_read": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "_shape(batch_size, s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_705": {
                "shape": {
                    "value": "[batch_size, 0] + s.as_list()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_512": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_layer(decoder_output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_545": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0] for _ in range(get_rank(self.context))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "variable_scope_627": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'layer_{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'layer_{}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_661": {
                "variable": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "poswise_network(_layer_norm(x, past_poswise_ln_scope))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_689": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "convert_to_tensor_692": {
                "value": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Call"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "tf.contrib.util.constant_value(tf.convert_to_tensor(batch_size, name='batch_size'))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorShape_771": {
                "dims": {
                    "value": "[self._vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_818": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'layer_{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'layer_{}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_481": {
                "lengths": {
                    "value": "memory_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "shape_list(memory)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_628": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_659": {
                "name_or_scope": {
                    "value": "past_poswise_ln",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_638": {
                "x": {
                    "value": "selfatt_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention(queries=_layer_norm(x, layer_scope), memory=None, memory_attention_bias=decoder_self_attention_bias, cache=layer_cache, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_644": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_562": {
                "values": {
                    "value": "[tf.expand_dims(start_tokens, 1), outputs.sample_id]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_654": {
                "x": {
                    "value": "encdec_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention(queries=_layer_norm(x, encdec_attention_scope), memory=memory, memory_attention_bias=memory_attention_bias, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_563": {
                "input": {
                    "value": "start_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "context[:, 0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "start_tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/decoders/transformer_decoders_test.py": {
        "tensorflow": {
            "fill_55": {
                "variable": {
                    "value": "self._start_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self._batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "self._context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[3, 4, 5, 2, 0], [4, 3, 5, 7, 2]]",
                            "List"
                        ]
                    ]
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "self._context_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "_context_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[4, 5]",
                            "List"
                        ]
                    ]
                }
            },
            "main_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "x_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self._embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "y_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self._pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/embedders/embedder_base.py": {
        "tensorflow": {
            "Dropout_87": {
                "variable": {
                    "value": "dropout_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "hparams.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([tf.shape(dropout_input)[:ids_rank], tf.ones([self._dim_rank], tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "[None] + [1] * self._dim_rank",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_79": {
                "variable": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(dropout_input)[:ids_rank], tf.ones([self._dim_rank], tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_80": {
                "shape": {
                    "value": "[self._dim_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/embedders/embedder_utils.py": {
        "tensorflow": {
            "tensordot_242": {
                "a": {
                    "value": "tf.to_float(soft_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w', initializer=tf.to_float(init_value), regularizer=regularizer, trainable=hparams['trainable'])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='w', shape=[num_embeds] + dim, initializer=initializer, regularizer=regularizer, trainable=hparams['trainable'])",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[-1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Embedding'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_embeds] + dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.get_initializer(hparams['initializer'])",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.get_regularizer(hparams['regularizer'])",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "hparams['trainable']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HParams(hparams, default_embedding_hparams())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_211": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.to_float(init_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.get_regularizer(hparams['regularizer'])",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "hparams['trainable']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "HParams(hparams, default_embedding_hparams())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_242": {
                "x": {
                    "value": "soft_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_212": {
                "x": {
                    "value": "init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/embedders/embedder_utils_test.py": {
        "tensorflow": {
            "main_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_31": {
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1L2_34": {
                "l1": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "l2": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/embedders/embedders.py": {
        "tensorflow": {
            "stop_gradient_239": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Call"
                        ],
                        [
                            "self._embedding",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(embedding)",
                            "Call"
                        ],
                        [
                            "dropout_layer.apply(inputs=embedding, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_249": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Call"
                        ],
                        [
                            "self._embedding",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(embedding)",
                            "Call"
                        ],
                        [
                            "dropout_layer.apply(inputs=embedding, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/embedders/embedders_test.py": {
        "tensorflow": {
            "ones_31": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_34": {
                "variable": {
                    "value": "inputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, embedder.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "inputs_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_75": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_168": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 10, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_96": {
                "input_tensor": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([64], maxval=pos_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/embedders/position_embedders.py": {
        "tensorflow": {
            "embedding_lookup_185": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Call"
                        ],
                        [
                            "self._embedding",
                            "Attribute"
                        ],
                        [
                            "dropout_layer.apply(inputs=embedding, training=is_training)",
                            "Call"
                        ],
                        [
                            "self.signal",
                            "Attribute"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions",
                            "variable"
                        ],
                        [
                            "expander * tf.expand_dims(single_inputs, 0)",
                            "BinOp"
                        ],
                        [
                            "positions",
                            "variable"
                        ],
                        [
                            "expander * tf.expand_dims(single_inputs, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_259": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(position_size, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_267": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_268": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(dim, 2)]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, tf.mod(dim, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_326": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding",
                            "Call"
                        ],
                        [
                            "self._embedding",
                            "Attribute"
                        ],
                        [
                            "dropout_layer.apply(inputs=embedding, training=is_training)",
                            "Call"
                        ],
                        [
                            "self.signal",
                            "Attribute"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positions",
                            "variable"
                        ],
                        [
                            "expander * tf.expand_dims(single_inputs, 0)",
                            "BinOp"
                        ],
                        [
                            "positions",
                            "variable"
                        ],
                        [
                            "expander * tf.expand_dims(single_inputs, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_156": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_159": {
                "variable": {
                    "value": "expander",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ones_like(sequence_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_319": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "range_320": {
                "variable": {
                    "value": "single_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(sequence_length)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_322": {
                "variable": {
                    "value": "expander",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ones_like(sequence_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_259": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_263": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_265": {
                "input": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.range(position_size, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_266": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_159": {
                "input": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_160": {
                "input": {
                    "value": "single_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(start=0, limit=max_length, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(start=0, limit=max_length, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_262": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_267": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_267": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(positions, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_322": {
                "input": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_323": {
                "input": {
                    "value": "single_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(start=0, limit=max_length, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(start=0, limit=max_length, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_264": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_268": {
                "x1": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Call"
                        ],
                        [
                            "self._hparams.dim",
                            "Attribute"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_264": {}
        }
    },
    "third_party/texar/texar/modules/encoders/conv_encoders_test.py": {
        "tensorflow": {
            "ones_31": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_62": {
                "variable": {
                    "value": "inputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "inputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 300, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/encoders/hierarchical_encoders.py": {
        "tensorflow": {
            "reshape_253": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, shape + [inputs.shape[3]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape + [inputs.shape[3]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "states_minor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "states_minor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder_minor(inputs, **kwargs_minor)",
                            "Call"
                        ],
                        [
                            "self.flatten(states_minor)",
                            "Call"
                        ],
                        [
                            "tf.reshape(states_minor, tf.concat([expand, tf.shape(states_minor)[1:]], 0))",
                            "Call"
                        ],
                        [
                            "self.flatten(states_minor)",
                            "Call"
                        ],
                        [
                            "fn(states_minor)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([expand, tf.shape(states_minor)[1:]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "sequence_length_minor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_length_minor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_length_minor, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_251": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, shape + [inputs.shape[3]])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_273": {
                "values": {
                    "value": "[expand, tf.shape(states_minor)[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_structure_309": {
                "func": {
                    "value": "lambda x: tf.tile(x, multiplier)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_362": {
                "values": {
                    "value": "[HierarchicalRNNEncoder.flatten(v) for v in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "self.variable_scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "encoder_major",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "self.variable_scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "self.variable_scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_309": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiplier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multiplier",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "encoder_minor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "encoder_minor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_273": {
                "input": {
                    "value": "states_minor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder_minor(inputs, **kwargs_minor)",
                            "Call"
                        ],
                        [
                            "self.flatten(states_minor)",
                            "Call"
                        ],
                        [
                            "tf.reshape(states_minor, tf.concat([expand, tf.shape(states_minor)[1:]], 0))",
                            "Call"
                        ],
                        [
                            "self.flatten(states_minor)",
                            "Call"
                        ],
                        [
                            "fn(states_minor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/encoders/hierarchical_encoders_test.py": {
        "tensorflow": {
            "main_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/encoders/multihead_attention.py": {
        "tensorflow": {
            "reshape_235": {
                "variable": {
                    "value": "splitted_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(x)[0], tf.shape(x)[1], self._hparams.num_heads, depth // self._hparams.num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_247": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_58": {
                "variable": {
                    "value": "self.Q_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.use_bias",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_61": {
                "variable": {
                    "value": "self.K_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.use_bias",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "variable": {
                    "value": "self.V_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hparams.num_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.use_bias",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_67": {
                "variable": {
                    "value": "self.O_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hparams.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hparams.use_bias",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(Q)",
                            "Call"
                        ],
                        [
                            "Q_ * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(K)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_212": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, K_, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + memory_attention_bias",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_213": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(weights, rate=self._hparams.dropout_rate, training=is_train_mode(mode))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(weights, rate=self._hparams.dropout_rate, training=is_train_mode(mode))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(V)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_237": {
                "a": {
                    "value": "splitted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [tf.shape(x)[0], tf.shape(x)[1], self._hparams.num_heads, depth // self._hparams.num_heads])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(t)[0], tf.shape(t)[1], num_heads * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_189": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(size, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : layer(memory)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "false_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : transpose_batch_time(res.stack())",
                            "Lambda"
                        ],
                        [
                            "lambda : res",
                            "Lambda"
                        ]
                    ]
                }
            },
            "shape_235": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_250": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_172": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[res, out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_190": {
                "x": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res.size()",
                            "Call"
                        ],
                        [
                            "tf.shape(res)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_168": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(queries)",
                            "Call"
                        ],
                        [
                            "layer(memory)",
                            "Call"
                        ],
                        [
                            "transpose_batch_time(res.stack())",
                            "Call"
                        ],
                        [
                            "res",
                            "variable"
                        ],
                        [
                            "tf.cond(tf.equal(size, 0), true_fn=lambda : layer(memory), false_fn=false_fn)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_187": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cache[key]",
                            "Subscript"
                        ],
                        [
                            "cache[key]",
                            "Subscript"
                        ],
                        [
                            "res.write(res.size(), tf.squeeze(out, axis=[1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([res, out], axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/encoders/rnn_encoders.py": {
        "tensorflow": {
            "reshape_105": {
                "variable": {
                    "value": "inputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.reshape(inputs_flat, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(inputs)[:2], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_layer(inputs_flat)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.shape(inputs)[:2], output_size], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_191": {
                "variable": {
                    "value": "cell_outputs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "cell_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell=self._cell, inputs=inputs, sequence_length=sequence_length, initial_state=initial_state, time_major=time_major, dtype=tf.float32, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell=self._cell, inputs=inputs, sequence_length=sequence_length, initial_state=initial_state, time_major=time_major, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw=self._cell_fw, cell_bw=self._cell_bw, inputs=inputs, sequence_length=sequence_length, initial_state_fw=initial_state_fw, initial_state_bw=initial_state_bw, time_major=time_major, dtype=tf.float32, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw=self._cell_fw, cell_bw=self._cell_bw, inputs=inputs, sequence_length=sequence_length, initial_state_fw=initial_state_fw, initial_state_bw=initial_state_bw, time_major=time_major, **kwargs)",
                            "Call"
                        ],
                        [
                            "cell_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_192": {
                "variable": {
                    "value": "cell_output_size_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "cell_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_sequence_as_196": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "cell_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell=self._cell, inputs=inputs, sequence_length=sequence_length, initial_state=initial_state, time_major=time_major, dtype=tf.float32, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell=self._cell, inputs=inputs, sequence_length=sequence_length, initial_state=initial_state, time_major=time_major, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw=self._cell_fw, cell_bw=self._cell_bw, inputs=inputs, sequence_length=sequence_length, initial_state_fw=initial_state_fw, initial_state_bw=initial_state_bw, time_major=time_major, dtype=tf.float32, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw=self._cell_fw, cell_bw=self._cell_bw, inputs=inputs, sequence_length=sequence_length, initial_state_fw=initial_state_fw, initial_state_bw=initial_state_bw, time_major=time_major, **kwargs)",
                            "Call"
                        ],
                        [
                            "cell_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "outputs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*o)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_197": {
                "variable": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "cell_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell=self._cell, inputs=inputs, sequence_length=sequence_length, initial_state=initial_state, time_major=time_major, dtype=tf.float32, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(cell=self._cell, inputs=inputs, sequence_length=sequence_length, initial_state=initial_state, time_major=time_major, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw=self._cell_fw, cell_bw=self._cell_bw, inputs=inputs, sequence_length=sequence_length, initial_state_fw=initial_state_fw, initial_state_bw=initial_state_bw, time_major=time_major, dtype=tf.float32, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_fw=self._cell_fw, cell_bw=self._cell_bw, inputs=inputs, sequence_length=sequence_length, initial_state_fw=initial_state_fw, initial_state_bw=initial_state_bw, time_major=time_major, **kwargs)",
                            "Call"
                        ],
                        [
                            "cell_outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "output_size_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*o)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_128": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "hparams.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[1, None, None]",
                            "List"
                        ],
                        [
                            "[None, 1, None]",
                            "List"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "is_train_mode(mode)",
                            "Call"
                        ],
                        [
                            "training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dynamic_rnn_491": {
                "variable": {
                    "value": "(cell_outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self._cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "time_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_500": {
                "variable": {
                    "value": "(cell_outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self._cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "time_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_820": {
                "variable": {
                    "value": "(cell_outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self._cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self._cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "initial_state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "initial_state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "time_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_831": {
                "variable": {
                    "value": "(cell_outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "self._cell_fw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell_bw": {
                    "value": "self._cell_bw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "initial_state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "initial_state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "time_major": {
                    "value": "time_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "time_major",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_288": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_607": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_624": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/encoders/rnn_encoders_test.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_117": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/encoders/transformer_encoders.py": {
        "tensorflow": {
            "dropout_311": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.layer_normalize(input_embedding)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(x, rate=self._hparams.embedding_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(input_embedding, rate=self._hparams.embedding_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "layers.layer_normalize(x)",
                            "Call"
                        ],
                        [
                            "x + attention_output",
                            "BinOp"
                        ],
                        [
                            "layers.layer_normalize(x)",
                            "Call"
                        ],
                        [
                            "x + sub_output",
                            "BinOp"
                        ],
                        [
                            "layers.layer_normalize(x)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_315": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_297": {
                "lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length",
                            "Method Argument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_341": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multihead_attention(queries=_queries_input, memory=_queries_input, memory_attention_bias=encoder_self_attention_bias, mode=mode)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attention_output, rate=self._hparams.residual_dropout, training=is_train_mode(mode))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_326": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_357": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layers.layer_normalize(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, self._hparams.dim])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pad_remover.remove(y), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._hparams.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_362": {
                "variable": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poswise_network(y, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._hparams.residual_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_298": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "poswise_network.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_359": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_remover.remove(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_368": {
                "variable": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pad_remover.restore(tf.squeeze(sub_output, axis=0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_372": {
                "variable": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(layer_output, rate=self._hparams.residual_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pad_remover.restore(tf.squeeze(sub_output, axis=0)), original_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sub_output, original_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_368": {
                "input": {
                    "value": "sub_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(layer_output, rate=self._hparams.residual_dropout, training=is_train_mode(mode))",
                            "Call"
                        ],
                        [
                            "tf.reshape(pad_remover.restore(tf.squeeze(sub_output, axis=0)), original_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sub_output, original_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/memory/memory_network.py": {
        "tensorflow": {
            "matmul_87": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(u, axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(m, tf.expand_dims(u, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(p, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(m, tf.expand_dims(u, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(p, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(m, tf.expand_dims(u, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(p, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(p)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(p, c)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(o, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_98": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, self._H)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(p, c)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(o, axis=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, self._H)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_290": {
                "variable": {
                    "value": "temporal_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_embedder(sequence_length=tf.constant([memory_size]), mode=mode)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_embedded, [tf.shape(embedded_memory)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(embedded_memory)[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_459": {
                "variable": {
                    "value": "self._W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "raw_memory_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_memory_dim",
                            "Call"
                        ],
                        [
                            "raw_memory_dim",
                            "Method Argument"
                        ],
                        [
                            "raw_memory_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_576": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._B(_unsqueeze(query), _unsqueeze(soft_query), mode=mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u, self._H)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_170": {
                "variable": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "H",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._memory_dim, self._memory_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_454": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_588": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_609": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(u, o)",
                            "Call"
                        ],
                        [
                            "self._AC(self._u[-1], self._m, self._c)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(u_)",
                            "Call"
                        ],
                        [
                            "_variational_dropout(u_)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(u_, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[linear_part, relued_part])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(1 - self.hparams.dropout_rate, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_294": {
                "x": {
                    "value": "embedded_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(ids=memory, soft_ids=soft_memory, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temporal_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_embedder(sequence_length=tf.constant([memory_size]), mode=mode)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_embedded, [tf.shape(embedded_memory)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_585": {
                "name_or_scope": {
                    "value": "variational_dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_597": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(u, o)",
                            "Call"
                        ],
                        [
                            "self._AC(self._u[-1], self._m, self._c)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(u_)",
                            "Call"
                        ],
                        [
                            "_variational_dropout(u_)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(u_, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[linear_part, relued_part])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_289": {
                "value": {
                    "value": "[memory_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_296": {
                "values": {
                    "value": "[embedded_memory, temporal_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_575": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_586": {
                "input": {
                    "value": "self._u[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_590": {
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "switch_dropout(1 - self.hparams.dropout_rate, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_601": {
                "variable": {
                    "value": "relued_part",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "relu_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_[:, self._memory_dim - self._relu_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_602": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[linear_part, relued_part]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_291": {
                "input": {
                    "value": "embedded_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedder(ids=memory, soft_ids=soft_memory, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/modules/memory/memory_network_test.py": {
        "tensorflow": {
            "main_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_71": {
                "variable": {
                    "value": "kwargs[memory]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(memory_size, dtype=tf.int32), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "tf.range(memory_size, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_72": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/networks/conv_networks.py": {
        "tensorflow": {
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/networks/conv_networks_test.py": {
        "tensorflow": {
            "ones_31": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_62": {
                "variable": {
                    "value": "inputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, None, 300]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "inputs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 300, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_119": {
                "variable": {
                    "value": "inputs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 16, 300]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "main_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/networks/network_base.py": {
        "tensorflow": {
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "network.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/networks/networks.py": {
        "tensorflow": {
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/networks/networks_test.py": {
        "tensorflow": {
            "main_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_37": {
                "shape": {
                    "value": "[64, 16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/policies/policy_nets.py": {
        "tensorflow": {
            "Categorical_306": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._network(inputs, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_311": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "tf.reshape(action, to_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "to_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/policies/policy_nets_test.py": {
        "tensorflow": {
            "main_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/modules/qnets/qnets.py": {
        "tensorflow": {
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "self.variable_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/run/executor.py": {
        "tensorflow": {
            "Estimator_94": {
                "variable": {
                    "value": "self._estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "params": {
                    "value": "self._model_hparams",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TrainSpec_104": {
                "input_fn": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model.get_input_fn(mode=tf.estimator.ModeKeys.TRAIN, hparams=self._data_hparams['train'])",
                            "Call"
                        ],
                        [
                            "self._model.get_input_fn(mode=tf.estimator.ModeKeys.EVAL, hparams=self._data_hparams['eval'])",
                            "Call"
                        ]
                    ]
                },
                "max_steps": {
                    "value": "max_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "hooks": {
                    "value": "self._train_hooks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EvalSpec_116": {
                "input_fn": {
                    "value": "input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model.get_input_fn(mode=tf.estimator.ModeKeys.TRAIN, hparams=self._data_hparams['train'])",
                            "Call"
                        ],
                        [
                            "self._model.get_input_fn(mode=tf.estimator.ModeKeys.EVAL, hparams=self._data_hparams['eval'])",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "hooks": {
                    "value": "self._eval_hooks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_and_evaluate_174": {
                "estimator": {
                    "value": "self._estimator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_train_spec(max_steps=max_steps)",
                            "Call"
                        ],
                        [
                            "self._get_train_spec(max_steps=max_train_steps)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_eval_spec(steps=steps)",
                            "Call"
                        ],
                        [
                            "self._get_eval_spec(steps=eval_steps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/run/executor_test.py": {
        "tensorflow": {
            "RunConfig_67": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tempfile.mkdtemp()",
                            "Call"
                        ]
                    ]
                },
                "save_summary_steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "save_checkpoints_secs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "main_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/average_recorder_test.py": {
        "tensorflow": {
            "main_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/beam_search.py": {
        "tensorflow": {
            "expand_dims_76": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size * beam_size) // beam_size",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_pos, [batch_size, beam_size])",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size)",
                            "Call"
                        ],
                        [
                            "compute_batch_indices(batch_size, beam_size * 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_158": {
                "variable": {
                    "value": "(_, topk_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_169": {
                "variable": {
                    "value": "top_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_indexes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_250": {
                "variable": {
                    "value": "initial_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0] + [-float('inf')] * (beam_size - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_253": {
                "variable": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [-float('inf')] * (beam_size - 1)])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_257": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "alive_seq",
                            "Method Argument"
                        ],
                        [
                            "alive_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_list(alive_seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_567": {
                "variable": {
                    "value": "(_, alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_is_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_is_finished",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "inner_loop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_loop",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_594": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape_list(alive_seq), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_seq, alive_seq)",
                            "Call"
                        ],
                        [
                            "tf.concat([finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)], axis=2)",
                            "Call"
                        ],
                        [
                            "grow_finished(finished_seq, finished_scores, finished_flags, topk_seq, topk_scores, topk_finished)",
                            "Call"
                        ],
                        [
                            "finished_seq",
                            "Method Argument"
                        ],
                        [
                            "finished_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "alive_seq",
                            "Method Argument"
                        ],
                        [
                            "alive_seq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_596": {
                "variable": {
                    "value": "finished_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([batch_size, beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ],
                        [
                            "grow_finished(finished_seq, finished_scores, finished_flags, topk_seq, topk_scores, topk_finished)",
                            "Call"
                        ],
                        [
                            "finished_scores",
                            "Method Argument"
                        ],
                        [
                            "finished_scores",
                            "Method Argument"
                        ],
                        [
                            "finished_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "alive_log_probs",
                            "Method Argument"
                        ],
                        [
                            "alive_log_probs",
                            "Method Argument"
                        ],
                        [
                            "alive_log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size] + [beam_size] + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_80": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_88": {
                "dims": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_181": {
                "variable": {
                    "value": "topk_gathered_states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: gather(state, '_topk_states')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states_to_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_260": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: _expand_to_beam_size(state, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "grow_topk(i, alive_seq, alive_log_probs, states)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_303": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, tf.zeros([batch_size, beam_size, 1], tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_311": {
                "variable": {
                    "value": "curr_finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, curr_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_312": {
                "variable": {
                    "value": "curr_finished_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_scores, curr_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_314": {
                "variable": {
                    "value": "curr_finished_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_flags, curr_finished]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_381": {
                "variable": {
                    "value": "flat_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "alive_seq",
                            "Method Argument"
                        ],
                        [
                            "alive_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_393": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symbols_to_logits_fn(flat_ids, i, flat_states)",
                            "Call"
                        ],
                        [
                            "symbols_to_logits_fn(flat_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, beam_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_404": {
                "variable": {
                    "value": "length_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(i + 1)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_409": {
                "variable": {
                    "value": "flat_curr_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_scores + tf.to_float(curr_finished) * -INF",
                            "BinOp"
                        ],
                        [
                            "log_probs / length_penalty",
                            "BinOp"
                        ],
                        [
                            "curr_scores",
                            "Method Argument"
                        ],
                        [
                            "curr_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, beam_size * vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_412": {
                "variable": {
                    "value": "(topk_scores, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(curr_scores, [-1, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_431": {
                "variable": {
                    "value": "topk_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, topk_beam_index]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_435": {
                "variable": {
                    "value": "topk_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_to_beam_size(initial_ids, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "alive_seq",
                            "Method Argument"
                        ],
                        [
                            "alive_seq",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "topk_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_beam_index], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_442": {
                "variable": {
                    "value": "topk_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[topk_seq, tf.expand_dims(topk_ids, axis=2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_445": {
                "variable": {
                    "value": "topk_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(flat_curr_scores, k=beam_size * 2)",
                            "Call"
                        ],
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "eos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eos_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_537": {
                "variable": {
                    "value": "max_length_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(decode_length)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_548": {
                "variable": {
                    "value": "lowest_score_of_fininshed_in_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores * tf.to_float(finished_in_finished)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_559": {
                "variable": {
                    "value": "bound_is_met",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.greater(lowest_score_of_fininshed_in_finished, lower_bound_alive_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_92": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flat_logits, [batch_size, beam_size, -1])",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_nd_176": {
                "params": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_indexes], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefix + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_272": {
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_385": {
                "variable": {
                    "value": "flat_states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_merge_beam_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_merge_beam_dim",
                            "Call"
                        ]
                    ]
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "grow_topk(i, alive_seq, alive_log_probs, states)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "map_structure_388": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _unmerge_beam_dim(t, batch_size, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "flat_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(_merge_beam_dim, states)",
                            "Call"
                        ],
                        [
                            "symbols_to_logits_fn(flat_ids, i, flat_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_437": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda state: tf.gather_nd(state, topk_coordinates)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "grow_topk(i, alive_seq, alive_log_probs, states)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_563": {
                "x": {
                    "value": "tf.less(i, decode_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(bound_is_met)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_any_595": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "grow_finished(finished_seq, finished_scores, finished_flags, topk_seq, topk_scores, topk_finished)",
                            "Call"
                        ],
                        [
                            "finished_flags",
                            "Method Argument"
                        ],
                        [
                            "finished_flags",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_597": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "grow_finished(finished_seq, finished_scores, finished_flags, topk_seq, topk_scores, topk_finished)",
                            "Call"
                        ],
                        [
                            "finished_flags",
                            "Method Argument"
                        ],
                        [
                            "finished_flags",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_346": {
                "x": {
                    "value": "curr_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_finished",
                            "Method Argument"
                        ],
                        [
                            "curr_finished",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_401": {
                "input": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(initial_log_probs, [batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.while_loop(_is_finished, inner_loop, [tf.constant(0), alive_seq, alive_log_probs, finished_seq, finished_scores, finished_flags, states], shape_invariants=[tf.TensorShape([]), tf.TensorShape([None, None, None]), alive_log_probs.get_shape(), tf.TensorShape([None, None, None]), finished_scores.get_shape(), finished_flags.get_shape(), nest.map_structure(get_state_shape_invariants, states)], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "alive_log_probs",
                            "Method Argument"
                        ],
                        [
                            "alive_log_probs",
                            "Method Argument"
                        ],
                        [
                            "alive_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_536": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(1, len(shape) - 1)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "decode_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decode_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_560": {
                "x": {
                    "value": "lowest_score_of_fininshed_in_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(finished_scores * tf.to_float(finished_in_finished), axis=1)",
                            "Call"
                        ],
                        [
                            "lowest_score_of_fininshed_in_finished + (1.0 - tf.to_float(tf.reduce_any(finished_in_finished, 1))) * -INF",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound_alive_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alive_log_probs[:, 0] / max_length_penalty",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_564": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(1, len(shape) - 1)",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "decode_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decode_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_not_564": {
                "x": {
                    "value": "bound_is_met",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.greater(lowest_score_of_fininshed_in_finished, lower_bound_alive_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_570": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "shape": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_309": {
                "x": {
                    "value": "curr_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_finished",
                            "Method Argument"
                        ],
                        [
                            "curr_finished",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_442": {
                "input": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.top_k(flat_curr_scores, k=beam_size * 2)",
                            "Call"
                        ],
                        [
                            "topk_ids % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_549": {
                "x": {
                    "value": "finished_in_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_in_finished",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_556": {
                "x": {
                    "value": "tf.reduce_any(finished_in_finished, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_574": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_575": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_577": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_580": {
                "func": {
                    "value": "get_state_shape_invariants",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_state_shape_invariants",
                            "Call"
                        ]
                    ]
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda state: _expand_to_beam_size(state, beam_size), states)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "nest.map_structure(lambda t: _unmerge_beam_dim(t, batch_size, beam_size), flat_states)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda state: tf.gather_nd(state, topk_coordinates), states)",
                            "Call"
                        ],
                        [
                            "grow_topk(i, alive_seq, alive_log_probs, states)",
                            "Call"
                        ],
                        [
                            "grow_alive(topk_seq, topk_scores, topk_log_probs, topk_finished, states)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ],
                        [
                            "states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_404": {
                "x": {
                    "value": "i + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_nd_438": {
                "params": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "topk_coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, topk_beam_index], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_537": {
                "x": {
                    "value": "decode_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decode_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_any_556": {
                "input_tensor": {
                    "value": "finished_in_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_in_finished",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/dtypes.py": {
        "tensorflow": {
            "as_text_134": {
                "bytes_or_text": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_text_136": {
                "bytes_or_text": {
                    "value": "str(s)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/mode.py": {
        "tensorflow": {
            "equal_54": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.TRAIN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_64": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.EVAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_74": {
                "x": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "mode",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.estimator.ModeKeys.PREDICT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_148": {
                "x": {
                    "value": "is_train_mode(mode)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/mode_test.py": {
        "tensorflow": {
            "main_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/shapes.py": {
        "tensorflow": {
            "flatten_60": {
                "variable": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_186": {
                "variable": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(sequence)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_189": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.to_int32(sequence_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.shape(sequence)[1])",
                            "Call"
                        ],
                        [
                            "sequence.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.dtype",
                            "Attribute"
                        ],
                        [
                            "dtype or sequence.dtype",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_363": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(tensor)[:preserve_dims], [flattened_dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_365": {
                "variable": {
                    "value": "tensor_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.shape",
                            "Attribute"
                        ],
                        [
                            "tf.concat([tf.shape(tensor)[:preserve_dims], [flattened_dim]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_381": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.asarray(x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_386": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.asarray(x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_516": {
                "variable": {
                    "value": "x_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x_length)",
                            "Call"
                        ],
                        [
                            "x_length",
                            "Method Argument"
                        ],
                        [
                            "x_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_525": {
                "variable": {
                    "value": "zeros_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_526": {
                "variable": {
                    "value": "x_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_masked, zeros_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_528": {
                "variable": {
                    "value": "zeros_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.asarray(x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_529": {
                "variable": {
                    "value": "y_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros_x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_536": {
                "variable": {
                    "value": "initial_index",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_537": {
                "variable": {
                    "value": "initial_outputs_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype or x.dtype",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_553": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cond",
                            "Call"
                        ],
                        [
                            "_cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_body",
                            "Call"
                        ],
                        [
                            "_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[initial_index, initial_outputs_ta]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_668": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(shift)",
                            "Call"
                        ],
                        [
                            "shift",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_672": {
                "variable": {
                    "value": "initial_index",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorArray_673": {
                "variable": {
                    "value": "initial_outputs_ta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype or x.dtype",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_688": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_cond",
                            "Call"
                        ],
                        [
                            "_cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_body",
                            "Call"
                        ],
                        [
                            "_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[initial_index, initial_outputs_ta]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_sequence_as_64": {
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(inputs)",
                            "Call"
                        ],
                        [
                            "[ops.convert_to_tensor(input_) for input_ in flat_input]",
                            "ListComp"
                        ],
                        [
                            "[rnn._transpose_batch_time(input_) for input_ in flat_input]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "is_tensor_85": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_192": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.to_int32(sequence_length), max_time, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.asarray(steps < sequence_length[:, None], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(mask, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_333": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_469": {
                "variable": {
                    "value": "max_dim_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.shape(v)[pa] for v in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "concat_473": {
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roll_546": {
                "variable": {
                    "value": "y_aug_i_rolled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_aug[index]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.concat([zeros_x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([zeros_x, y], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "x_length[index] - max_length_x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_682": {
                "variable": {
                    "value": "x_i_rolled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[index]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.asarray(x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shift": {
                    "value": "shift[index]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(shift)",
                            "Call"
                        ],
                        [
                            "shift",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_61": {
                "value": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_190": {
                "x": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(sequence_length)",
                            "Call"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ],
                        [
                            "sequence_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_335": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_384": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.asarray(x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_460": {
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "variable"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([rank, 2], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "paddings * (size - tf.shape(value)[axis_])",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "pad_constant_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_533": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.asarray(x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_534": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.asarray(x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_543": {
                "x": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(batch_size)",
                            "Call"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_670": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "np.asarray(x, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_679": {
                "x": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(batch_size)",
                            "Call"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence.shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_186": {
                "input": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "sequence * mask",
                            "BinOp"
                        ],
                        [
                            "rnn._transpose_batch_time(sequence)",
                            "Call"
                        ],
                        [
                            "np.array(sequence)",
                            "Call"
                        ],
                        [
                            "np.transpose(sequence, axes=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "sequence * mask",
                            "BinOp"
                        ],
                        [
                            "np.transpose(sequence, axes=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ],
                        [
                            "sequence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_321": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "np.arange(1, tensor_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_323": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "np.arange(1, tensor_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_324": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(weights, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "np.arange(1, tensor_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_327": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "np.arange(1, tensor_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_363": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tensor / weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tensor, axis=np.arange(1, tensor_rank))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tensor, axis=[0])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_459": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "values",
                            "variable"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_469": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(values)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/utils/shapes_test.py": {
        "tensorflow": {
            "constant_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[10, 10, 2, 2], [20, 2, 2, 2]])",
                            "Call"
                        ],
                        [
                            "tf.constant(x)",
                            "Call"
                        ],
                        [
                            "np.asarray([[1, 1, 0, 0], [1, 0, 0, 0], [1, 1, 1, 1]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.asarray([[[1], [1], [0], [0]], [[1], [0], [0], [0]], [[1], [1], [1], [1]]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.asarray([[1, 1, 0, 0], [1, 0, 0, 0], [1, 1, 1, 1]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "np.asarray([[[1], [1], [0], [0]], [[1], [0], [0], [0]], [[1], [1], [1], [1]]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_51": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 10, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_52": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 20, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_53": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[6, None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/transformer_attentions.py": {
        "tensorflow": {
            "expand_dims_86": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_padding * bias_value",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_104": {
                "variable": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ones_matrix_band_part(length, length, max_backward, max_forward, out_shape=[1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(tf.ones([rows, cols]), tf.cast(num_lower, tf.int64), tf.cast(num_upper, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(band, out_shape)",
                            "Call"
                        ],
                        [
                            "np.ones((rows, cols)) * lower_mask * upper_mask",
                            "BinOp"
                        ],
                        [
                            "band.reshape(out_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(band, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "band",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ones_matrix_band_part(length, length, max_backward, max_forward, out_shape=[1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "tf.matrix_band_part(tf.ones([rows, cols]), tf.cast(num_lower, tf.int64), tf.cast(num_upper, tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.reshape(band, out_shape)",
                            "Call"
                        ],
                        [
                            "np.ones((rows, cols)) * lower_mask * upper_mask",
                            "BinOp"
                        ],
                        [
                            "band.reshape(out_shape)",
                            "Call"
                        ],
                        [
                            "tf.constant(band, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_106": {
                "shape": {
                    "value": "[rows, cols]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_107": {
                "x": {
                    "value": "num_lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rows - 1",
                            "BinOp"
                        ],
                        [
                            "num_lower",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_108": {
                "x": {
                    "value": "num_upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cols - 1",
                            "BinOp"
                        ],
                        [
                            "num_upper",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/transformer_utils.py": {
        "tensorflow": {
            "reduce_sum_126": {
                "variable": {
                    "value": "emb_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_127": {
                "x": {
                    "value": "tf.equal(emb_sum, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "pad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pad_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pad_mask, [-1])",
                            "Call"
                        ],
                        [
                            "pad_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_71": {
                "variable": {
                    "value": "self.nonpad_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(pad_mask < 1e-09)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(x, indices=self.nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=self.nonpad_ids, updates=x, shape=tf.concat([self.dim_origin, tf.shape(x)[1:]], axis=0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.nonpad_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.nonpad_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "updates": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(x, indices=self.nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=self.nonpad_ids, updates=x, shape=tf.concat([self.dim_origin, tf.shape(x)[1:]], axis=0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([self.dim_origin, tf.shape(x)[1:]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_126": {
                "x": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_127": {
                "x": {
                    "value": "emb_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(emb), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_153": {
                "name": {
                    "value": "smoothing_cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits, labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_163": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_164": {
                "variable": {
                    "value": "normal_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "confidence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_171": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_dist.prob(tf.cast(tf.range(vocab_size), tf.float32)[:, None, None])",
                            "Call"
                        ],
                        [
                            "tf.transpose(soft_targets, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=confidence, off_value=low_confidence, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(tf.zeros_like(labels, dtype=tf.float32), 2), soft_targets[:, :, 1:]], -1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_173": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "confidence",
                            "Method Argument"
                        ]
                    ]
                },
                "off_value": {
                    "value": "low_confidence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.0 - confidence) / tf.to_float(vocab_size - 2)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - confidence) / tf.to_float(vocab_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_180": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.zeros_like(labels, dtype=tf.float32), 2), soft_targets[:, :, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "pad_reduce/get_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_84": {
                "name": {
                    "value": "pad_reduce/remove",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "pad_reduce/restore",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_190": {
                "input": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_dist.prob(tf.cast(tf.range(vocab_size), tf.float32)[:, None, None])",
                            "Call"
                        ],
                        [
                            "tf.transpose(soft_targets, perm=[1, 2, 0])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=confidence, off_value=low_confidence, dtype=logits.dtype)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.expand_dims(tf.zeros_like(labels, dtype=tf.float32), 2), soft_targets[:, :, 1:]], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_71": {
                "condition": {
                    "value": "pad_mask < 1e-09",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "shape_72": {
                "input": {
                    "value": "pad_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pad_mask, [-1])",
                            "Call"
                        ],
                        [
                            "pad_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_156": {
                "x": {
                    "value": "vocab_size - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_159": {
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_174": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_111": {
                "values": {
                    "value": "[self.dim_origin, tf.shape(x)[1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_167": {
                "x": {
                    "value": "tf.range(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "tf.zeros_like(labels, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(x, indices=self.nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=self.nonpad_ids, updates=x, shape=tf.concat([self.dim_origin, tf.shape(x)[1:]], axis=0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/utils/utils.py": {
        "tensorflow": {
            "stop_gradient_975": {
                "input": {
                    "value": "fw_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fw_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/utils/utils_io.py": {
        "tensorflow": {
            "GFile_76": {
                "name": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gfile.ListDirectory(config_path)",
                            "Call"
                        ],
                        [
                            "config_path.split(',')",
                            "Call"
                        ],
                        [
                            "fnames",
                            "variable"
                        ],
                        [
                            "os.path.join(config_path, fname)",
                            "Call"
                        ],
                        [
                            "fname.strip()",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "IsDirectory_134": {
                "dirname": {
                    "value": "config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "IsDirectory_226": {
                "dirname": {
                    "value": "dirname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dirname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MakeDirs_227": {
                "dirname": {
                    "value": "dirname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dirname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Glob_253": {
                "variable": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ListDirectory_135": {
                "dirname": {
                    "value": "config_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "IsDirectory_137": {
                "dirname": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gfile.ListDirectory(config_path)",
                            "Call"
                        ],
                        [
                            "config_path.split(',')",
                            "Call"
                        ],
                        [
                            "fnames",
                            "variable"
                        ],
                        [
                            "os.path.join(config_path, fname)",
                            "Call"
                        ],
                        [
                            "fname.strip()",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/texar/texar/utils/utils_test.py": {
        "tensorflow": {
            "main_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "third_party/texar/texar/utils/variables.py": {
        "tensorflow": {
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "base_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train_emosup.py": {
        "tensorflow": {
            "transpose_172": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embedder.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "x1_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "x1x4_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1x4_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_249": {
                "variable": {
                    "value": "x1x4_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1x4_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_254": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tau",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_354": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_371": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_372": {
                "variable": {
                    "value": "saver_best",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_602": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_88": {
                "msg": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "msg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_verbosity_110": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_183": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size__]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(ids)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_189": {
                "variable": {
                    "value": "max_full_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['%s_len' % target_name]",
                            "Subscript"
                        ],
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_296": {
                "variable": {
                    "value": "max_full_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['%s_len' % target_name]",
                            "Subscript"
                        ],
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_307": {
                "variable": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_645": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_158": {
                "input": {
                    "value": "batch['x1x4_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_202": {
                "variable": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_606": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_182": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids[1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "batch['%s_ids' % target_name]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "print_212": {
                "variable": {
                    "value": "print_op_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(full_len - 1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask_recon * mask_recon_prefix",
                            "BinOp"
                        ],
                        [
                            "tf.sequence_mask(full_len - 1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask_recon * mask_recon_prefix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "print_219": {
                "variable": {
                    "value": "print_op_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "loss_recon_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tx.utils.reduce_with_weights(tensor=loss_recon, weights=mask_recon, average_across_remaining=False, sum_over_remaining=False, average_across_batch=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_310": {
                "lengths": {
                    "value": "batch['%s_len' % context_name] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_608": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_183": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids[1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "batch['%s_ids' % target_name]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_205": {
                "lengths": {
                    "value": "prefix_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_181": {
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['%s_len' % target_name]",
                            "Subscript"
                        ],
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_220": {
                "control_inputs": {
                    "value": "[print_op_1, print_op_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_284": {
                "input_tensor": {
                    "value": "yy_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len_infer - batch['%s_len' % context_name]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_293": {
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['%s_len' % target_name]",
                            "Subscript"
                        ],
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train_rl.py": {
        "tensorflow": {
            "RunOptions_46": {
                "variable": {
                    "value": "run_opts",
                    "type": "variable",
                    "possible_values": []
                },
                "report_tensor_allocations_upon_oom": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_219": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "word_embedder.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_374": {
                "variable": {
                    "value": "x1_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_375": {
                "variable": {
                    "value": "x1x4_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1x4_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_376": {
                "variable": {
                    "value": "x1x4_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1x4_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_380": {
                "variable": {
                    "value": "x1_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_381": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "sampled_story",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sampled_story",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_383": {
                "variable": {
                    "value": "sampled_story_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_story_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_390": {
                "variable": {
                    "value": "rl_loss_fine",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_loss_rl * reward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_414": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tau",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_478": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_495": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_496": {
                "variable": {
                    "value": "saver_best",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_804": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_109": {
                "msg": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'loss_fine: %.4f, bleu: %.4f, meteor: %.4f, reward: %.4f' % (avg_loss, metrics['bleu'], metrics['meteor'], metrics['best_reward'])",
                            "BinOp"
                        ],
                        [
                            "msg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_verbosity_156": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_233": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size__]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(ids)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_242": {
                "variable": {
                    "value": "max_full_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_323": {
                "variable": {
                    "value": "max_full_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sample_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(decoding_strategy='infer_sample', embedding=_embedding_fn, context=context_ids, context_sequence_length=context_len, max_decoding_length=max_decoding_length, end_token=end_token, softmax_temperature=FLAGS.temperature, mode=tf.estimator.ModeKeys.PREDICT)",
                            "Call"
                        ],
                        [
                            "sample_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_336": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sample_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_807": {
                "variable": {
                    "value": "session_config.gpu_options",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_846": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_205": {
                "input": {
                    "value": "batch['x1x4_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sequence_mask_255": {
                "variable": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_809": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_232": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids[1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "output.sample_id",
                            "Attribute"
                        ],
                        [
                            "tx.utils.varlength_roll(ids, -context_len)",
                            "Call"
                        ],
                        [
                            "ids[:, :tf.reduce_max(ids_len)]",
                            "Subscript"
                        ],
                        [
                            "output.sample_id[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "print_265": {
                "variable": {
                    "value": "print_op_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "mask_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(full_len - 1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask_recon * mask_recon_prefix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "print_272": {
                "variable": {
                    "value": "print_op_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "loss_recon_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tx.utils.reduce_with_weights(tensor=loss_recon, weights=mask_recon, average_across_remaining=False, sum_over_remaining=False, average_across_batch=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_339": {
                "lengths": {
                    "value": "context_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_810": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_811": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_812": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_233": {
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids[1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :tf.reduce_max(full_len)]",
                            "Subscript"
                        ],
                        [
                            "ids[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "output.sample_id",
                            "Attribute"
                        ],
                        [
                            "tx.utils.varlength_roll(ids, -context_len)",
                            "Call"
                        ],
                        [
                            "ids[:, :tf.reduce_max(ids_len)]",
                            "Subscript"
                        ],
                        [
                            "output.sample_id[:, :max_full_len]",
                            "Subscript"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ],
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sequence_mask_258": {
                "lengths": {
                    "value": "prefix_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_full_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_231": {
                "input_tensor": {
                    "value": "full_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_273": {
                "control_inputs": {
                    "value": "[print_op_1, print_op_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_318": {
                "input_tensor": {
                    "value": "ids_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length - context_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_368": {
                "input_tensor": {
                    "value": "greedy_ids_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "greedy_len - context_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_450": {
                "input_tensor": {
                    "value": "yy_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len_infer - batch['%s_len' % context_name]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Reinforcement/run_evaluation.py": {
        "torch": {}
    },
    "comet_generate.py": {
        "torch": {
            "set_device_37": {
                "device": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}