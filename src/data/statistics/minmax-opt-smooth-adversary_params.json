{
    "MoG_Gan/exps.py": {
        "torch": {
            "from_numpy_25": {
                "variable": {
                    "value": "d_real_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dset.sample(config.minibatch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_27": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_real_decision",
                    "type": "Call",
                    "possible_values": [
                        [
                            "D(d_real_data)",
                            "Call"
                        ],
                        [
                            "D(d_real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "d_gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise_sampler(config.minibatch_size, config.g_inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_decision",
                    "type": "Call",
                    "possible_values": [
                        [
                            "D(d_fake_data)",
                            "Call"
                        ],
                        [
                            "D(d_fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "d_real_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dset.sample(config.minibatch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_51": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_real_decision",
                    "type": "Call",
                    "possible_values": [
                        [
                            "D(d_real_data)",
                            "Call"
                        ],
                        [
                            "D(d_real_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "d_gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise_sampler(config.minibatch_size, config.g_inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_decision",
                    "type": "Call",
                    "possible_values": [
                        [
                            "D(d_fake_data)",
                            "Call"
                        ],
                        [
                            "D(d_fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_71": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dg_real_decision",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(disc_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dg_fake_decision",
                    "type": "Call",
                    "possible_values": [
                        [
                            "D(g_fake_data)",
                            "Call"
                        ],
                        [
                            "D(g_fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_86": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dg_fake_decision",
                    "type": "Call",
                    "possible_values": [
                        [
                            "D(g_fake_data)",
                            "Call"
                        ],
                        [
                            "D(g_fake_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise_sampler(config.minibatch_size, config.g_inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "disc_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dset.sample(config.minibatch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "fixed_fake_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise_sampler(2048, config.g_inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_203": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.g_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.optim_betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_204": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.optim_betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise_sampler(2048, config.g_inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_206": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.g_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_207": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_209": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.g_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.optim_betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_210": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_227": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.optim_betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "G",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Generator(input_size=config.g_inp, hidden_size=config.g_hid, output_size=config.g_out).cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'model', 'model_' + str(it))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_212": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.g_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_213": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.optim_betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_229": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_231": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_233": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.d_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "config.optim_betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MoG_Gan/model.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.map1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.map2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.map3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.map1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.map3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_31": {
                "input": {
                    "value": "self.map3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "adversarial_training/adversary.py": {
        "torch": {
            "cross_entropy_86": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_211": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[X]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "step_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ],
                        [
                            "args.learning_rate_inner",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cross_entropy_43": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_130": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_172": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_215": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ],
                        [
                            "Variable(y_.type(dtype), requires_grad=False).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adversarial_training/budget_attack.py": {
        "torch": {
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_42": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(folder, 'model', 'model_' + str(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adversarial_training/budget_attack_adam.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_44": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(folder, 'model', 'model_' + str(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adversarial_training/compute_grad_norms.py": {
        "torch": {
            "CrossEntropyLoss_22": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_23": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_outer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_33": {
                "variable": {
                    "value": "max_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "max_player.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "Call"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_92": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(folder, 'model', 'model_' + str(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adversarial_training/dataprocess.py": {
        "torch": {
            "DataLoader_26": {
                "variable": {
                    "value": "loader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNIST_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dset.MNIST(args.data_dir, train=True, transform=T.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNIST_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dset.MNIST(args.data_dir, train=False, transform=T.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "adversarial_training/experiments.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_outer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_outer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_148": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_149": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_outer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_217": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_218": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_outer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_286": {
                "variable": {
                    "value": "loss_function",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_287": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_outer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_383": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_302": {
                "variable": {
                    "value": "max_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "max_player.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_inner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normal_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "unrolled(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "pgd_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_higher_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.folder, 'model', 'model_' + str(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normal_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "unrolled(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "pgd_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_higher_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.folder, 'model', 'model_' + str(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normal_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "unrolled(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "pgd_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_higher_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.folder, 'model', 'model_' + str(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_275": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normal_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "unrolled(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "pgd_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_higher_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.folder, 'model', 'model_' + str(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_343": {
                "obj": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "normal_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "unrolled(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "pgd_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "minmax_higher_train(args, loader_train, loader_test, dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ],
                        [
                            "ConvNet()",
                            "Call"
                        ],
                        [
                            "model.type(dtype)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.folder, 'model', 'model_' + str(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_177": {
                "input": {
                    "value": "X - X_original",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_243": {
                "input": {
                    "value": "X - X_original",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_313": {
                "input": {
                    "value": "max_player_functional.params - X_original",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "adversarial_training/lossfns.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[jj for jj in range(10)] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_46": {
                "outputs": {
                    "value": "maxLoss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(output.gather(1, index) - output.gather(1, y)).mean()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X.repeat(1, 10, 1, 1).reshape(N * 10, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "X + X_grad.sign() * step_size_max",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_56": {
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adversarial_training/model.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "800",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_16": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}