{
    "tf_blazeFace.py": {
        "tensorflow": {
            "Interpreter_6": {
                "variable": {
                    "value": "interpreter",
                    "type": "variable",
                    "possible_values": []
                },
                "model_path": {
                    "value": "face_detection_front.tflite",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "blazeface.py": {
        "torch": {
            "min_371": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_373": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_375": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_channels, out_channels=in_channels, kernel_size=kernel_size, stride=stride, padding=padding, groups=in_channels, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.backbone1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=24, kernel_size=5, stride=2, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.backbone2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BlazeBlock(88, 96, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.classifier_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "88",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.classifier_16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.regressor_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "88",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.regressor_16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_pool(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, 0, self.channel_pad), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (1, 2, 1, 2), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.backbone1(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "x.to(self._device())",
                            "Call"
                        ],
                        [
                            "self._preprocess(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 2, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c1, c2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r1, r2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load(path)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_276": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_boxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argsort_322": {
                "variable": {
                    "value": "remaining",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "detections[:, 16]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_34": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_pool(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, 0, self.channel_pad), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (1, 2, 1, 2), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.backbone1(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "x.to(self._device())",
                            "Call"
                        ],
                        [
                            "self._preprocess(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 2, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_pool(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, 0, self.channel_pad), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (1, 2, 1, 2), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.backbone1(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "x.to(self._device())",
                            "Call"
                        ],
                        [
                            "self._preprocess(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, 0, self.channel_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).permute((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_179": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_pool(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, 0, 0, self.channel_pad), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (1, 2, 1, 2), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.backbone1(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "x.to(self._device())",
                            "Call"
                        ],
                        [
                            "self._preprocess(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_201": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(0, 3, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_223": {
                "tensors": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weighted_non_max_suppression(detections[i])",
                            "Call"
                        ],
                        [
                            "torch.stack(faces) if len(faces) > 0 else torch.zeros((0, 17))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "*size": {
                    "value": "(0, 17)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_268": {
                "tensors": {
                    "value": "(boxes, scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "my_blazeface.py": {
        "torch": {
            "save_119": {
                "obj": {
                    "value": "myNet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyBlazeFace(net, 'anchors.npy').to('cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "myBlazeface.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_10": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load(anchors_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_25": {
                "variable": {
                    "value": "detection_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "blazeface.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argsort_65": {
                "variable": {
                    "value": "remaining",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_detections[i][:, 16]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "(boxes, scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_79": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(faces) if len(faces) > 0 else torch.zeros((0, 17))",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "(0, 17)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pt_blazeFace.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}