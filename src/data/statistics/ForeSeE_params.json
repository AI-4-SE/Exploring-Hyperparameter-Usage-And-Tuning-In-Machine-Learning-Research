{
    "prepocessing/kitti_process_RANSAC.py": {
        "sklearn": {
            "RANSACRegressor_35": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/kitti_dataset.py": {
        "torch": {
            "from_numpy_198": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log10_189": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/kitti_gt_dataset.py": {
        "torch": {
            "from_numpy_142": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "rois_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois_mask.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_213": {
                "variable": {
                    "value": "cur_fg_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['B'] * 80",
                            "BinOp"
                        ],
                        [
                            "B[0, ...]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(B_path, -1) / self.depth_normalize",
                            "BinOp"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_0 & rois_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_214": {
                "variable": {
                    "value": "cur_bg_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['B'] * 80",
                            "BinOp"
                        ],
                        [
                            "B[0, ...]",
                            "Subscript"
                        ],
                        [
                            "cv2.imread(B_path, -1) / self.depth_normalize",
                            "BinOp"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_0 & 1 - rois_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log10_133": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/kitti_object_dataset.py": {
        "torch": {
            "from_numpy_75": {
                "variable": {
                    "value": "rois_mask_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois_mask_crop.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_221": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log10_212": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/kitti_object_roi_dataset.py": {
        "torch": {
            "from_numpy_98": {
                "variable": {
                    "value": "rois_mask_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois_mask_crop.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "rois_mask_crop_l",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois_mask_crop_l.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "rois_mask_crop_m",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois_mask_crop_m.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "rois_mask_crop_r",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois_mask_crop_r.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log10_300": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/kitti_prediction_dataset.py": {
        "torch": {
            "from_numpy_132": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log10_123": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/load_dataset.py": {
        "torch": {}
    },
    "experiments/foresee/lateral_net.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.topdown_lateral_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.aspp_conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.aspp_conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.dilate_rates[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilate_rates[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.aspp_conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.dilate_rates[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilate_rates[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.aspp_conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.dilate_rates[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilate_rates[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.aspp_bn1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.aspp_bn3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.aspp_bn3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.aspp_bn3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_110": {
                "variable": {
                    "value": "self.globalpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.globalpool_conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.globalpool_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "upsample_128": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.globalpool(x)",
                            "Call"
                        ],
                        [
                            "self.globalpool_conv1x1(x5)",
                            "Call"
                        ],
                        [
                            "self.globalpool_bn(x5)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=x5, size=(w, h), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.topdown_fcn5(x4, backbone_stage_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2, x3, x4, x5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.dim_in[0] * 5, self.dim_in[0], 1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_172": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_256": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_258": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_271": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_273": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_274": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_295": {
                "variable": {
                    "value": "self.globalpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_296": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_298": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_299": {
                "variable": {
                    "value": "self.sigmd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lateral, top]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_320": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(backbone_stage_size[4][0], backbone_stage_size[4][1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_322": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x1, x2, x3, x4, x5], 1)",
                            "Call"
                        ],
                        [
                            "self.lateral(x)",
                            "Call"
                        ],
                        [
                            "self.afa_block(lateral, top)",
                            "Call"
                        ],
                        [
                            "self.ftb_block(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "w * lateral + top",
                            "BinOp"
                        ],
                        [
                            "F.upsample(input=input, size=(backbone_stage_size[4][0], backbone_stage_size[4][1]), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.ftb(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=out, size=(backbone_stage_size[5][0], backbone_stage_size[5][1]), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(backbone_stage_size[5][0], backbone_stage_size[5][1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_245": {
                "variable": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=top, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "top",
                            "Method Argument"
                        ],
                        [
                            "top",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "self.dim_in[0] * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "num_features": {
                    "value": "self.dim_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/foresee/loss.py": {
        "torch": {
            "squeeze_14": {
                "variable": {
                    "value": "gt_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(gt_class)",
                            "Call"
                        ],
                        [
                            "gt_class.to(device=pred_nosoftmax.device, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "gt_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "cfg.MODEL.DECODER_OUTPUT_C + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "cfg.DATA.WCE_LOSS_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.DATA.WCE_LOSS_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_nosoftmax.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_31": {
                "variable": {
                    "value": "classes_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cfg.MODEL.DECODER_OUTPUT_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gt.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_32": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_nosoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ],
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ],
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_33": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_reshape == classes_range).to(dtype=torch.float, device=pred_nosoftmax.device)",
                            "Call"
                        ],
                        [
                            "(gt_reshape == classes_range).to(dtype=torch.float, device=pred_nosoftmax.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "weight / torch.sum(weight, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ],
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "valid_pixes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_nosoftmax.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "cfg.DATA.WCE_LOSS_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.DATA.WCE_LOSS_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_nosoftmax.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_58": {
                "variable": {
                    "value": "classes_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cfg.MODEL.DECODER_OUTPUT_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gt.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_59": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_nosoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ],
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ],
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_60": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_reshape == classes_range).to(dtype=torch.float, device=pred_nosoftmax.device)",
                            "Call"
                        ],
                        [
                            "(gt_reshape == classes_range).to(dtype=torch.float, device=pred_nosoftmax.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "weight / torch.sum(weight, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ],
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_146": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_depth - pred_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "threshold_150": {
                "variable": {
                    "value": "part2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff ** 2 + delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2 * delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy(pred_nosoftmax, gt_class)",
                            "Call"
                        ],
                        [
                            "loss_mean / pred_depth.size(0)",
                            "BinOp"
                        ],
                        [
                            "loss_mean / pred_depth.size(0)",
                            "BinOp"
                        ],
                        [
                            "part1 + part2",
                            "BinOp"
                        ],
                        [
                            "loss[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.mean(diff ** 2))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.mean(diff ** 2))",
                            "Call"
                        ],
                        [
                            "torch.mean(diff ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.mean(diff ** 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_177": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(diff ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_197": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(diff ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_216": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_239": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(diff ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "weight / torch.sum(weight, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ],
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "weight / torch.sum(weight, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ],
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_rois_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois_mask[j, :, int(invalid_side[j][0]):rois_mask.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numel_120": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ],
                        [
                            "diff_log * valid_rois_mask.to(dtype=diff_log.dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_33": {
                "input": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(pred_nosoftmax, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(pred_nosoftmax, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "input": {
                    "value": "log_pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "weight_log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * log_pred",
                            "BinOp"
                        ],
                        [
                            "weight * log_pred",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_60": {
                "input": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(pred_nosoftmax, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(pred_nosoftmax, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "input": {
                    "value": "log_pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "weight_log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * log_pred",
                            "BinOp"
                        ],
                        [
                            "weight * log_pred",
                            "BinOp"
                        ]
                    ]
                }
            },
            "threshold_149": {
                "input": {
                    "value": "-diff",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-delta",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "pred_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_depth * mask.to(dtype=pred_depth.dtype)",
                            "BinOp"
                        ],
                        [
                            "pred_depth * scale",
                            "BinOp"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_177": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_197": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_236": {
                "input": {
                    "value": "pred_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_depth * mask.to(dtype=pred_depth.dtype)",
                            "BinOp"
                        ],
                        [
                            "pred_depth * scale",
                            "BinOp"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_239": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "valid_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[i, :, int(invalid_side[i][0]):gt.size(2) - int(invalid_side[i][1]), :]",
                            "Subscript"
                        ],
                        [
                            "gt_depth[j, :, int(invalid_side[j][0]):gt_depth.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ],
                        [
                            "gt_depth[j, :, int(invalid_side[j][0]):gt_depth.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_118": {
                "input": {
                    "value": "valid_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[i, :, int(invalid_side[i][0]):gt.size(2) - int(invalid_side[i][1]), :]",
                            "Subscript"
                        ],
                        [
                            "gt_depth[j, :, int(invalid_side[j][0]):gt_depth.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ],
                        [
                            "gt_depth[j, :, int(invalid_side[j][0]):gt_depth.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "diff_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ],
                        [
                            "diff_log * valid_rois_mask.to(dtype=diff_log.dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_125": {
                "input": {
                    "value": "diff_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ],
                        [
                            "diff_log * valid_rois_mask.to(dtype=diff_log.dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_147": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(gt_depth - pred_depth)",
                            "Call"
                        ],
                        [
                            "torch.log(gt_depth) - torch.log(pred_depth)",
                            "BinOp"
                        ],
                        [
                            "diff[mask]",
                            "Subscript"
                        ],
                        [
                            "gt_depth - pred_depth",
                            "BinOp"
                        ],
                        [
                            "diff[mask]",
                            "Subscript"
                        ],
                        [
                            "gt_depth - pred_depth",
                            "BinOp"
                        ],
                        [
                            "diff[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.log(gt_depth) - torch.log(pred_depth)",
                            "BinOp"
                        ],
                        [
                            "diff[mask]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/foresee/pc/kitti_prediction.py": {
        "torch": {
            "DataParallel_48": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DepthNormal()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/foresee/pc/kitti_prediction_colorps.py": {
        "torch": {
            "DataParallel_48": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DepthNormal()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/foresee/val_kitti.py": {
        "torch": {
            "DataParallel_39": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DepthNormal()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/MobileNetV2.py": {
        "torch": {
            "Sequential_18": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.res1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_bn(3, input_channel, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, groups=hidden_dim, bias=False, padding=dilation, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/ResNeXt.py": {
        "torch": {
            "Conv2d_63": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "OrderedDict([('conv1', conv1), ('bn1', nn.BatchNorm2d(64)), ('relu', nn.ReLU(inplace=True)), ('maxpool', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * base_width * int(width_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * base_width * int(width_ratio)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * base_width * int(width_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * base_width * int(width_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_init",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilate",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilate",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality",
                            "Method Argument"
                        ],
                        [
                            "cardinality",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * base_width * int(width_ratio)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * base_width * int(width_ratio)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "*res_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride_init",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/image_transfer.py": {
        "torch": {
            "cat_18": {
                "variable": {
                    "value": "clses_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(clses_fg, clses_bg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool2d_20": {
                "variable": {
                    "value": "clses_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clses_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((clses_fg, clses_bg), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "clses_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clses_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(clses_cat, kernel_size=(1, 2))",
                            "Call"
                        ],
                        [
                            "clses_final.squeeze(-1).reshape((B, H, W, C))",
                            "Call"
                        ],
                        [
                            "clses_final.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(clses_final, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes * cfg.DATA.DEPTH_CLASSES",
                            "BinOp"
                        ],
                        [
                            "torch.sum(depth, dim=3, dtype=torch.float32, keepdim=True)",
                            "Call"
                        ],
                        [
                            "10 ** depth",
                            "BinOp"
                        ],
                        [
                            "depth.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "classes * cfg.DATA.DEPTH_CLASSES",
                            "BinOp"
                        ],
                        [
                            "torch.sum(depth, dim=3, dtype=torch.float32, keepdim=True)",
                            "Call"
                        ],
                        [
                            "10 ** depth",
                            "BinOp"
                        ],
                        [
                            "depth.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "variable": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(classes, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "classes.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "classes.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "variable"
                        ],
                        [
                            "torch.round((torch.log10(depth) - cfg.DATA.DATA_MIN_LOG) / cfg.DATA.DEPTH_RANGE_INTERVAL)",
                            "Call"
                        ],
                        [
                            "classes.to(torch.long)",
                            "Call"
                        ],
                        [
                            "classes",
                            "Method Argument"
                        ],
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes * cfg.DATA.DEPTH_CLASSES",
                            "BinOp"
                        ],
                        [
                            "torch.sum(depth, dim=3, dtype=torch.float32, keepdim=True)",
                            "Call"
                        ],
                        [
                            "10 ** depth",
                            "BinOp"
                        ],
                        [
                            "depth.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "classes * cfg.DATA.DEPTH_CLASSES",
                            "BinOp"
                        ],
                        [
                            "torch.sum(depth, dim=3, dtype=torch.float32, keepdim=True)",
                            "Call"
                        ],
                        [
                            "10 ** depth",
                            "BinOp"
                        ],
                        [
                            "depth.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "round_79": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.log10(depth) - cfg.DATA.DATA_MIN_LOG) / cfg.DATA.DEPTH_RANGE_INTERVAL",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(left)",
                            "Call"
                        ],
                        [
                            "left",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(right)",
                            "Call"
                        ],
                        [
                            "right",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_95": {
                "variable": {
                    "value": "middle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "middle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(middle)",
                            "Call"
                        ],
                        [
                            "middle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "left.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "left.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(crops)",
                            "Call"
                        ],
                        [
                            "crops",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(classes, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "classes.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "classes.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "variable"
                        ],
                        [
                            "torch.round((torch.log10(depth) - cfg.DATA.DATA_MIN_LOG) / cfg.DATA.DEPTH_RANGE_INTERVAL)",
                            "Call"
                        ],
                        [
                            "classes.to(torch.long)",
                            "Call"
                        ],
                        [
                            "classes",
                            "Method Argument"
                        ],
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "cfg.DATA.DEPTH_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.DATA.DEPTH_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(classes, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "classes.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "classes.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "variable"
                        ],
                        [
                            "torch.round((torch.log10(depth) - cfg.DATA.DATA_MIN_LOG) / cfg.DATA.DEPTH_RANGE_INTERVAL)",
                            "Call"
                        ],
                        [
                            "classes.to(torch.long)",
                            "Call"
                        ],
                        [
                            "classes",
                            "Method Argument"
                        ],
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "cfg.DATA.DEPTH_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.DATA.DEPTH_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log10_79": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes * cfg.DATA.DEPTH_CLASSES",
                            "BinOp"
                        ],
                        [
                            "torch.sum(depth, dim=3, dtype=torch.float32, keepdim=True)",
                            "Call"
                        ],
                        [
                            "10 ** depth",
                            "BinOp"
                        ],
                        [
                            "depth.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "classes * cfg.DATA.DEPTH_CLASSES",
                            "BinOp"
                        ],
                        [
                            "torch.sum(depth, dim=3, dtype=torch.float32, keepdim=True)",
                            "Call"
                        ],
                        [
                            "10 ** depth",
                            "BinOp"
                        ],
                        [
                            "depth.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/lateral_net.py": {
        "torch": {
            "ModuleList_29": {
                "variable": {
                    "value": "self.topdown_lateral_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.aspp_conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.aspp_conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.dilate_rates[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilate_rates[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.aspp_conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.dilate_rates[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilate_rates[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.aspp_conv3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.dilate_rates[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilate_rates[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.aspp_bn1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.aspp_bn3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.aspp_bn3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.aspp_bn3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_110": {
                "variable": {
                    "value": "self.globalpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.globalpool_conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.globalpool_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "upsample_128": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.globalpool(x)",
                            "Call"
                        ],
                        [
                            "self.globalpool_conv1x1(x5)",
                            "Call"
                        ],
                        [
                            "self.globalpool_bn(x5)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=x5, size=(w, h), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.topdown_fcn5(x4, backbone_stage_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(w, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2, x3, x4, x5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.dim_in[0] * 5, self.dim_in[0], 1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_223": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_225": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_238": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_240": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_241": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_262": {
                "variable": {
                    "value": "self.globalpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_264": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_266": {
                "variable": {
                    "value": "self.sigmd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lateral, top]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "upsample_287": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(backbone_stage_size[4][0], backbone_stage_size[4][1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_289": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x1, x2, x3, x4, x5], 1)",
                            "Call"
                        ],
                        [
                            "self.lateral(x)",
                            "Call"
                        ],
                        [
                            "self.afa_block(lateral, top)",
                            "Call"
                        ],
                        [
                            "self.ftb_block(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "w * lateral + top",
                            "BinOp"
                        ],
                        [
                            "F.upsample(input=input, size=(backbone_stage_size[4][0], backbone_stage_size[4][1]), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.ftb(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=out, size=(backbone_stage_size[5][0], backbone_stage_size[5][1]), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(backbone_stage_size[5][0], backbone_stage_size[5][1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_212": {
                "variable": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=top, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "top",
                            "Method Argument"
                        ],
                        [
                            "top",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "self.dim_in[0] * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.dim_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "num_features": {
                    "value": "self.dim_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/loss.py": {
        "torch": {
            "squeeze_14": {
                "variable": {
                    "value": "gt_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(gt_class)",
                            "Call"
                        ],
                        [
                            "gt_class.to(device=pred_nosoftmax.device, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "gt_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "cfg.MODEL.DECODER_OUTPUT_C + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "cfg.DATA.WCE_LOSS_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.DATA.WCE_LOSS_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_nosoftmax.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_31": {
                "variable": {
                    "value": "classes_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cfg.MODEL.DECODER_OUTPUT_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gt.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_32": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_nosoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ],
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ],
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_33": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_reshape == classes_range).to(dtype=torch.float, device=pred_nosoftmax.device)",
                            "Call"
                        ],
                        [
                            "(gt_reshape == classes_range).to(dtype=torch.float, device=pred_nosoftmax.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "weight / torch.sum(weight, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ],
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "valid_pixes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_nosoftmax.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "cfg.DATA.WCE_LOSS_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cfg.DATA.WCE_LOSS_WEIGHT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_nosoftmax.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_58": {
                "variable": {
                    "value": "classes_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "cfg.MODEL.DECODER_OUTPUT_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "gt.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_59": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_nosoftmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ],
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ],
                        [
                            "pred_nosoftmax",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_60": {
                "variable": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gt_reshape == classes_range).to(dtype=torch.float, device=pred_nosoftmax.device)",
                            "Call"
                        ],
                        [
                            "(gt_reshape == classes_range).to(dtype=torch.float, device=pred_nosoftmax.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "weight / torch.sum(weight, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ],
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_146": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_depth - pred_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "threshold_150": {
                "variable": {
                    "value": "part2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff ** 2 + delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "2 * delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entropy(pred_nosoftmax, gt_class)",
                            "Call"
                        ],
                        [
                            "-1 * torch.sum(weight_log_pred) / valid_pixes",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sum(weight_log_pred) / valid_pixels",
                            "BinOp"
                        ],
                        [
                            "loss_mean / pred_depth.size(0)",
                            "BinOp"
                        ],
                        [
                            "loss_mean / pred_depth.size(0)",
                            "BinOp"
                        ],
                        [
                            "part1 + part2",
                            "BinOp"
                        ],
                        [
                            "loss[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.mean(diff ** 2))",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.mean(diff ** 2))",
                            "Call"
                        ],
                        [
                            "torch.mean(diff ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(torch.mean(diff ** 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_177": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(diff ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_197": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(diff ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_216": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_239": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(diff ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "weight / torch.sum(weight, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ],
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "weight / torch.sum(weight, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ],
                        [
                            "cfg.DATA.WCE_LOSS_WEIGHT",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(one_hot, weight)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_rois_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois_mask[j, :, int(invalid_side[j][0]):rois_mask.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "numel_120": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ],
                        [
                            "diff_log * valid_rois_mask.to(dtype=diff_log.dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_33": {
                "input": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(pred_nosoftmax, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(pred_nosoftmax, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "input": {
                    "value": "log_pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "input": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(pred_nosoftmax, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(pred_nosoftmax, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(torch.transpose(log_pred, 0, 1).reshape(log_pred.size(1), -1))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "input": {
                    "value": "log_pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "threshold_149": {
                "input": {
                    "value": "-diff",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-delta",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "pred_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_depth * mask.to(dtype=pred_depth.dtype)",
                            "BinOp"
                        ],
                        [
                            "pred_depth * scale",
                            "BinOp"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_177": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_197": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_236": {
                "input": {
                    "value": "pred_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_depth * mask.to(dtype=pred_depth.dtype)",
                            "BinOp"
                        ],
                        [
                            "pred_depth * scale",
                            "BinOp"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "variable"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ],
                        [
                            "pred_depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_239": {
                "input": {
                    "value": "diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "weight_log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * log_pred",
                            "BinOp"
                        ],
                        [
                            "weight * log_pred",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_68": {
                "input": {
                    "value": "weight_log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight * log_pred",
                            "BinOp"
                        ],
                        [
                            "weight * log_pred",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_89": {
                "input": {
                    "value": "valid_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[i, :, int(invalid_side[i][0]):gt.size(2) - int(invalid_side[i][1]), :]",
                            "Subscript"
                        ],
                        [
                            "gt_depth[j, :, int(invalid_side[j][0]):gt_depth.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ],
                        [
                            "gt_depth[j, :, int(invalid_side[j][0]):gt_depth.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_118": {
                "input": {
                    "value": "valid_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[i, :, int(invalid_side[i][0]):gt.size(2) - int(invalid_side[i][1]), :]",
                            "Subscript"
                        ],
                        [
                            "gt_depth[j, :, int(invalid_side[j][0]):gt_depth.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ],
                        [
                            "gt_depth[j, :, int(invalid_side[j][0]):gt_depth.size(2) - int(invalid_side[j][1]), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "diff_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ],
                        [
                            "diff_log * valid_rois_mask.to(dtype=diff_log.dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_125": {
                "input": {
                    "value": "diff_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ],
                        [
                            "diff_log * valid_rois_mask.to(dtype=diff_log.dtype)",
                            "BinOp"
                        ],
                        [
                            "torch.log(valid_pred) - torch.log(valid_gt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_147": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(gt_depth - pred_depth)",
                            "Call"
                        ],
                        [
                            "torch.log(gt_depth) - torch.log(pred_depth)",
                            "BinOp"
                        ],
                        [
                            "diff[mask]",
                            "Subscript"
                        ],
                        [
                            "gt_depth - pred_depth",
                            "BinOp"
                        ],
                        [
                            "diff[mask]",
                            "Subscript"
                        ],
                        [
                            "gt_depth - pred_depth",
                            "BinOp"
                        ],
                        [
                            "diff[mask]",
                            "Subscript"
                        ],
                        [
                            "torch.log(gt_depth) - torch.log(pred_depth)",
                            "BinOp"
                        ],
                        [
                            "diff[mask]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils/bounding_box.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoxList([[0, 0, 10, 10], [0, 0, 5, 5]], (10, 10))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(bbox, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(transposed_boxes, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(cropped_box, (w, h), mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox.to(device), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox[item], self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox, self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "bbox",
                            "Method Argument"
                        ],
                        [
                            "bbox",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox.device if isinstance(bbox, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_116": {
                "variable": {
                    "value": "scaled_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "transposed_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "cropped_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/chamfer_distance/chamfer_distance.py": {
        "torch": {
            "load_5": {
                "variable": {
                    "value": "cd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cd",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "['../../lib/utils/chamfer_distance/chamfer_distance.cpp', '../../lib/utils/chamfer_distance/chamfer_distance.cu']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz2.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz2.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "gradxyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/evaluate_depth_error.py": {
        "torch": {}
    },
    "lib/utils/mobilenetv2_weight_helper.py": {
        "torch": {
            "load_16": {
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.ROOT_DIR, cfg.MODEL.MODEL_REPOSITORY, 'MobileNetV2_ImageNet', cfg.MODEL.PRETRAINED_WEIGHTS)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils/net_tools.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                },
                "pickle_module": {
                    "value": "dill",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "{'step': step, 'epoch': epoch, 'batch_size': args.batchsize, 'scheduler': scheduler.state_dict(), 'val_err': val_err, 'model_state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'epoch%d_step%d.pth' % (epoch, step))",
                            "Call"
                        ]
                    ]
                },
                "pickle_module": {
                    "value": "dill",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_cache_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/resnext_weights_helper.py": {
        "torch": {
            "load_14": {
                "f": {
                    "value": "weights_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.ROOT_DIR, cfg.MODEL.MODEL_REPOSITORY, 'ResNeXt_ImageNet', cfg.MODEL.PRETRAINED_WEIGHTS)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/kitti_prediction.py": {
        "torch": {
            "DataParallel_44": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DepthNormal()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/kitti_prediction_sample.py": {
        "torch": {
            "DataParallel_44": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DepthNormal()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/kitti_prediction_sample_diff.py": {
        "torch": {
            "DataParallel_44": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DepthNormal()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/test_kitti.py": {
        "torch": {
            "DataParallel_38": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DepthNormal()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/val_kitti.py": {
        "torch": {
            "DataParallel_38": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DepthNormal()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}