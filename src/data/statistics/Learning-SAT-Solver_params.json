{
    "model.py": {
        "tensorflow": {
            "placeholder_99": {
                "variable": {
                    "value": "self.time_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "time_steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_placeholder_100": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "M",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "self.instance_SAT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "instance_SAT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self.num_vars_on_instance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "instance_n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_107": {
                "variable": {
                    "value": "self.L_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "L_init",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "self.C_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "C_init",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floordiv_162": {
                "variable": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_168": {
                "variable": {
                    "value": "assert_length_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(self.p, tf.shape(self.num_vars_on_instance)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.instance_SAT, self.num_vars_on_instance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_232": {
                "variable": {
                    "value": "L_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "L_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(tf.constant(0), self.n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_234": {
                "variable": {
                    "value": "L_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "L_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(self.n, self.l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_235": {
                "variable": {
                    "value": "L_inverted",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[L_neg, L_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_246": {
                "variable": {
                    "value": "L_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "L_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(tf.constant(0), self.n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_247": {
                "variable": {
                    "value": "L_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "L_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(self.n, self.l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_248": {
                "variable": {
                    "value": "L_inverted",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[L_neg, L_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_265": {
                "variable": {
                    "value": "pos_lits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "L_vote",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(n_acc, tf.add(n_acc, i_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_266": {
                "variable": {
                    "value": "neg_lits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "L_vote",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(tf.add(n, n_acc), tf.add(n, tf.add(n_acc, i_n)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_268": {
                "variable": {
                    "value": "problem_predicted_SAT",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat([pos_lits, neg_lits], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_41": {
                "variable": {
                    "value": "new_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "bias_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "kernel_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias_regularizer": {
                    "value": "bias_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "activity_regularizer": {
                    "value": "activity_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_constraint": {
                    "value": "kernel_constraint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias_constraint": {
                    "value": "bias_constraint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "internal_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "name + '_MLP_layer_{}'.format(i + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_171": {
                "variable": {
                    "value": "L_cell_h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.L_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.l, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "variable": {
                    "value": "L_cell_c0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L_cell_h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(self.L_init, [self.l, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_173": {
                "variable": {
                    "value": "L_state",
                    "type": "variable",
                    "possible_values": []
                },
                "h": {
                    "value": "L_cell_h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(self.L_init, [self.l, 1])",
                            "Call"
                        ]
                    ]
                },
                "c": {
                    "value": "L_cell_c0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(L_cell_h0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_175": {
                "variable": {
                    "value": "C_cell_h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.C_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.m, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_176": {
                "variable": {
                    "value": "C_cell_c0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C_cell_h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(self.C_init, [self.m, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_177": {
                "variable": {
                    "value": "C_state",
                    "type": "variable",
                    "possible_values": []
                },
                "h": {
                    "value": "C_cell_h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(self.C_init, [self.m, 1])",
                            "Call"
                        ]
                    ]
                },
                "c": {
                    "value": "C_cell_c0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(C_cell_h0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_179": {
                "variable": {
                    "value": "(_, _, L_state, C_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "self._message_while_cond",
                    "type": "Attribute",
                    "possible_values": []
                },
                "body": {
                    "value": "self._message_while_body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0), self.time_steps, L_state, C_state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_189": {
                "variable": {
                    "value": "predicted_SAT",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_190": {
                "variable": {
                    "value": "(_, _, _, _, _, predicted_SAT, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "self._vote_while_cond",
                    "type": "Attribute",
                    "possible_values": []
                },
                "body": {
                    "value": "self._vote_while_body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0, dtype=tf.int32), self.p, tf.constant(0, dtype=tf.int32), self.n, self.num_vars_on_instance, predicted_SAT, self.L_vote]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_197": {
                "variable": {
                    "value": "self.predict_costs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.instance_SAT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.predicted_SAT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_198": {
                "variable": {
                    "value": "self.predict_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.predict_costs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "variable": {
                    "value": "self.vars_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_200": {
                "variable": {
                    "value": "self.tvars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Print_204": {
                "variable": {
                    "value": "self.vars_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.vars_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.shape(self.vars_cost)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Vars ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_205": {
                "variable": {
                    "value": "self.predict_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_": {
                    "value": "self.predict_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.shape(self.predict_cost)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Pred ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_206": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predict_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(self.vars_cost, self.parameter_l2norm_scaling)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_207": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Adam",
                    "type": "str",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_208": {
                "variable": {
                    "value": "(self.grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, self.tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.global_norm_gradient_clipping_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_211": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.cast(self.instance_SAT, tf.bool), tf.cast(tf.round(tf.nn.sigmoid(self.predicted_SAT)), tf.bool)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_258": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_275": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "SAT_solver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_161": {
                "input": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_162": {
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_163": {
                "input": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_164": {
                "input": {
                    "value": "self.instance_SAT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_168": {
                "x": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(self.num_vars_on_instance)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_169": {
                "control_inputs": {
                    "value": "[assert_length_equal]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_202": {
                "variable": {
                    "value": "self.vars_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.vars_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "C_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "L_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_254": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_268": {
                "values": {
                    "value": "[pos_lits, neg_lits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_271": {
                "x": {
                    "value": "n_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "i_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_var_list[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "placeholders",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "parameters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "utilities",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "solve",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_206": {
                "x": {
                    "value": "self.vars_cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.parameter_l2norm_scaling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_208": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.tvars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "tf.equal(tf.cast(self.instance_SAT, tf.bool), tf.cast(tf.round(tf.nn.sigmoid(self.predicted_SAT)), tf.bool))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_232": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_246": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_254": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_265": {
                "x": {
                    "value": "n_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "i_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_var_list[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "add_266": {
                "x": {
                    "value": "n_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "i_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_var_list[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_271": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_168": {
                "input": {
                    "value": "self.num_vars_on_instance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_182": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_193": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_202": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tvars",
                            "Attribute"
                        ]
                    ]
                }
            },
            "shape_204": {
                "input": {
                    "value": "self.vars_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_205": {
                "input": {
                    "value": "self.predict_cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_213": {
                "x": {
                    "value": "tf.cast(self.instance_SAT, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(tf.round(tf.nn.sigmoid(self.predicted_SAT)), tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_251": {
                "values": {
                    "value": "[M_x_C_msg, L_inverted]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_214": {
                "x": {
                    "value": "self.instance_SAT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_215": {
                "x": {
                    "value": "tf.round(tf.nn.sigmoid(self.predicted_SAT))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_215": {
                "x": {
                    "value": "tf.nn.sigmoid(self.predicted_SAT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_215": {
                "x": {
                    "value": "self.predicted_SAT",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sat-test.py": {
        "tensorflow": {
            "Saver_23": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sat.py": {
        "tensorflow": {
            "Saver_31": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_34": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_35": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}