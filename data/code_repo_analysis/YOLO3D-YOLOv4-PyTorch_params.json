{
    "src/data_process/train_val_split.py": {
        "sklearn": {
            "train_test_split_22": {
                "variable": {
                    "value": "(train_ids, val_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "file_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5037",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/config/train_config.py": {
        "torch": {
            "device_144": {
                "variable": {
                    "value": "configs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if configs.no_cuda else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_145": {
                "variable": {
                    "value": "configs.ngpus_per_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/data_process/kitti_dataloader.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KittiDataset(configs.dataset_dir, mode='train', lidar_transforms=train_lidar_transforms, aug_transforms=train_aug_transforms, multiscale=configs.multiscale_training, num_samples=configs.num_samples, mosaic=configs.mosaic, random_padding=configs.random_padding)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "configs.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "configs.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "configs.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "train_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KittiDataset(configs.dataset_dir, mode='val', lidar_transforms=None, aug_transforms=None, multiscale=False, num_samples=configs.num_samples, mosaic=False, random_padding=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "configs.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "configs.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "configs.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "val_dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KittiDataset(configs.dataset_dir, mode='test', lidar_transforms=None, aug_transforms=None, multiscale=False, num_samples=configs.num_samples, mosaic=False, random_padding=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "configs.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "configs.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "configs.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_42": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KittiDataset(configs.dataset_dir, mode='train', lidar_transforms=train_lidar_transforms, aug_transforms=train_aug_transforms, multiscale=configs.multiscale_training, num_samples=configs.num_samples, mosaic=configs.mosaic, random_padding=configs.random_padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_56": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KittiDataset(configs.dataset_dir, mode='val', lidar_transforms=None, aug_transforms=None, multiscale=False, num_samples=configs.num_samples, mosaic=False, random_padding=False)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_71": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KittiDataset(configs.dataset_dir, mode='test', lidar_transforms=None, aug_transforms=None, multiscale=False, num_samples=configs.num_samples, mosaic=False, random_padding=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data_process/kitti_dataset.py": {
        "torch": {
            "zeros_109": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_target, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "rgb_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rgb_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.load_mosaic(index)",
                            "Call"
                        ],
                        [
                            "kitti_bev_utils.makeBVFeature(lidarData, cnf.DISCRETIZATION, cnf.boundary)",
                            "Call"
                        ],
                        [
                            "kitti_bev_utils.makeBVFeature(lidarData, cnf.DISCRETIZATION, cnf.boundary)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rgb_map).float()",
                            "Call"
                        ],
                        [
                            "self.aug_transforms(rgb_map, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_220": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.load_mosaic(index)",
                            "Call"
                        ],
                        [
                            "torch.zeros((n_target, 10))",
                            "Call"
                        ],
                        [
                            "self.aug_transforms(rgb_map, targets)",
                            "Call"
                        ],
                        [
                            "self.load_img_with_targets(index)",
                            "Call"
                        ],
                        [
                            "list(zip(*batch))",
                            "Call"
                        ],
                        [
                            "[boxes for boxes in targets if boxes is not None]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_225": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(zip(*batch))",
                            "Call"
                        ],
                        [
                            "torch.stack(imgs)",
                            "Call"
                        ],
                        [
                            "F.interpolate(imgs, size=self.img_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "targets[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kitti_bev_utils.build_yolo_target(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "targets_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets_s4, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_227": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(zip(*batch))",
                            "Call"
                        ],
                        [
                            "torch.stack(imgs)",
                            "Call"
                        ],
                        [
                            "F.interpolate(imgs, size=self.img_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.img_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_141": {
                "variable": {
                    "value": "img_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(c, self.img_size * 2, self.img_size * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_168": {
                "input": {
                    "value": "targets_s4[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 0.5 / self.img_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "targets_s4[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(targets_s4, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/data_process/transformation.py": {
        "torch": {
            "flip_387": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(img, [-1])",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate.py": {
        "torch": {
            "device_136": {
                "variable": {
                    "value": "configs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cpu' if configs.no_cuda else 'cuda:{}'.format(configs.gpu_idx)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "configs.pretrained_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/darknet2pytorch.py": {
        "torch": {
            "max_pool2d_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pad(x, (padding3, padding4, padding1, padding2), mode='replicate')",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.tanh(F.softplus(x))",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(F.pad(x, (padding3, padding4, padding1, padding2), mode='replicate'), self.size, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs, hs, W / ws, ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs * W / ws, hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, H / hs, W / ws).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, H / hs, W / ws)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "outputs[layers[0]][:, b // groups * group_id:b // groups * (group_id + 1)]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x, targets, img_size, self.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool2d_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.tanh(F.softplus(x))",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(F.pad(x, (padding3, padding4, padding1, padding2), mode='replicate'), self.size, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs, hs, W / ws, ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs * W / ws, hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, H / hs, W / ws).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, H / hs, W / ws)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "outputs[layers[0]][:, b // groups * group_id:b // groups * (group_id + 1)]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x, targets, img_size, self.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_236": {
                "variable": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_407": {
                "variable": {
                    "value": "self.header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "header",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.fromfile(fp, count=5, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_27": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.tanh(F.softplus(x))",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(F.pad(x, (padding3, padding4, padding1, padding2), mode='replicate'), self.size, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs, hs, W / ws, ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs * W / ws, hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, H / hs, W / ws).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, H / hs, W / ws)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "outputs[layers[0]][:, b // groups * group_id:b // groups * (group_id + 1)]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x, targets, img_size, self.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding3, padding4, padding1, padding2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "yolo_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "to_cpu(torch.cat(yolo_outputs, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.tanh(F.softplus(x))",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(F.pad(x, (padding3, padding4, padding1, padding2), mode='replicate'), self.size, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs, hs, W / ws, ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs * W / ws, hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, H / hs, W / ws).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, H / hs, W / ws)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "outputs[layers[0]][:, b // groups * group_id:b // groups * (group_id + 1)]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x, targets, img_size, self.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_285": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pool_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.tanh(F.softplus(x))",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(F.pad(x, (padding3, padding4, padding1, padding2), mode='replicate'), self.size, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs, hs, W / ws, ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs * W / ws, hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, H / hs, W / ws).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, H / hs, W / ws)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "outputs[layers[0]][:, b // groups * group_id:b // groups * (group_id + 1)]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x, targets, img_size, self.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] // int(block['groups'])",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]] + out_filters[layers[2]] + out_filters[layers[3]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2 if is_pad else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_260": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_264": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] // int(block['groups'])",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]] + out_filters[layers[2]] + out_filters[layers[3]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2 if is_pad else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "LeakyReLU_266": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_289": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "self.stride",
                            "Attribute"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_301": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_218": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.tanh(F.softplus(x))",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(F.pad(x, (padding3, padding4, padding1, padding2), mode='replicate'), self.size, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, stride, W, stride).contiguous().view(B, C, H * stride, W * stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs, hs, W / ws, ws).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H / hs * W / ws, hs * ws).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, hs * ws, H / hs, W / ws).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, hs * ws * C, H / hs, W / ws)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "outputs[layers[0]][:, b // groups * group_id:b // groups * (group_id + 1)]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x, targets, img_size, self.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), 1)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_268": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_307": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "L1Loss_309": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_311": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] // int(block['groups'])",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]] + out_filters[layers[2]] + out_filters[layers[3]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_369": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prev_filters, filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_373": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prev_filters, filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_370": {
                "in_features": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] // int(block['groups'])",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]] + out_filters[layers[2]] + out_filters[layers[3]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_371": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_374": {
                "in_features": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] // int(block['groups'])",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]] + out_filters[layers[2]] + out_filters[layers[3]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_375": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/darknet_utils.py": {
        "torch": {
            "from_numpy_202": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "ndarray": {
                    "value": "buf[start:start + num_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "input": {
                    "value": "conv_model.weight.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_221": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "buf[start:start + num_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "input": {
                    "value": "conv_model.weight.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "ndarray": {
                    "value": "buf[start:start + num_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/model_utils.py": {
        "torch": {
            "device_84": {
                "variable": {
                    "value": "configs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_87": {
                "variable": {
                    "value": "sample_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 608, 608)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_54": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(configs).to(device=configs.device)",
                            "Call"
                        ],
                        [
                            "Darknet(cfgfile=configs.cfgfile, use_giou_loss=configs.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[configs.gpu_idx])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(configs.gpu_idx)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[configs.gpu_idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_59": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(configs).to(device=configs.device)",
                            "Call"
                        ],
                        [
                            "Darknet(cfgfile=configs.cfgfile, use_giou_loss=configs.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[configs.gpu_idx])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(configs.gpu_idx)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_65": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(configs).to(device=configs.device)",
                            "Call"
                        ],
                        [
                            "Darknet(cfgfile=configs.cfgfile, use_giou_loss=configs.use_giou_loss)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[configs.gpu_idx])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(configs.gpu_idx)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_47": {
                "device": {
                    "value": "configs.gpu_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_61": {
                "device": {
                    "value": "configs.gpu_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/yolo_layer.py": {
        "torch": {
            "arange_56": {
                "variable": {
                    "value": "self.grid_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.grid_size",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_57": {
                "variable": {
                    "value": "self.grid_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.grid_size",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_57": {
                "variable": {
                    "value": "self.grid_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "self.scaled_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[(a_h / self.stride, a_w / self.stride, a_l / self.stride, im, re) for (a_h, a_w, a_l, im, re) in self.anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_81": {
                "variable": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_82": {
                "variable": {
                    "value": "noobj_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_83": {
                "variable": {
                    "value": "class_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_84": {
                "variable": {
                    "value": "iou_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_85": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_86": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_87": {
                "variable": {
                    "value": "tz",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_88": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_89": {
                "variable": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_90": {
                "variable": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_91": {
                "variable": {
                    "value": "tim",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_92": {
                "variable": {
                    "value": "tre",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_93": {
                "variable": {
                    "value": "tcls",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nB, nA, nG, nG, nC)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "giou_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_168": {
                "variable": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "pred_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "pred_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "variable": {
                    "value": "pred_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[..., 9:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_185": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prediction[..., :8].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_boxes[..., :2].view(num_samples, -1, 2) * self.stride, pred_boxes[..., 2:3].view(num_samples, -1, 1), pred_boxes[..., 3:6].view(num_samples, -1, 3) * self.stride, pred_boxes[..., 6:8].view(num_samples, -1, 2), pred_conf.view(num_samples, -1, 1), pred_cls.view(num_samples, -1, self.num_classes))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target[:, 2:4] * nG, target[:, 4:5], target[:, 5:8] * nG, target[:, 8:10])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_129": {
                "variable": {
                    "value": "th[b, best_n, gj, gi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / anchors[best_n][:, 0] + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_130": {
                "variable": {
                    "value": "tw[b, best_n, gj, gi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / anchors[best_n][:, 1] + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_131": {
                "variable": {
                    "value": "tl[b, best_n, gj, gi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "gl / anchors[best_n][:, 2] + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_213": {
                "variable": {
                    "value": "loss_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_x[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tx[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_214": {
                "variable": {
                    "value": "loss_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "ty[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_215": {
                "variable": {
                    "value": "loss_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_z[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tz[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_217": {
                "variable": {
                    "value": "loss_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_h[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "th[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_218": {
                "variable": {
                    "value": "loss_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_w[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tw[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_219": {
                "variable": {
                    "value": "loss_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_l[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tl[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_221": {
                "variable": {
                    "value": "loss_im",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_im[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tim[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_222": {
                "variable": {
                    "value": "loss_re",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_re[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tre[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_226": {
                "variable": {
                    "value": "loss_conf_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_conf[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tconf[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_227": {
                "variable": {
                    "value": "loss_conf_noobj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_conf[noobj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tconf[noobj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_228": {
                "variable": {
                    "value": "loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_cls[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "tcls[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_190": {
                "input": {
                    "value": "pred_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction[..., 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_190": {
                "max": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_191": {
                "input": {
                    "value": "pred_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction[..., 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_191": {
                "max": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_192": {
                "input": {
                    "value": "pred_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction[..., 5]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_192": {
                "max": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_245": {
                "input": {
                    "value": "iou50 * detected_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_246": {
                "input": {
                    "value": "iou50 * detected_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_247": {
                "input": {
                    "value": "iou75 * detected_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "device_99": {
                "variable": {
                    "value": "configs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cpu' if configs.no_cuda else 'cuda:{}'.format(configs.gpu_idx)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "configs.pretrained_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "atan2_129": {
                "variable": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "detections",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "detections",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "configs.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cpu' if configs.gpu_idx is None else 'cuda:{}'.format(configs.gpu_idx)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_91": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(configs.logs_dir, 'tensorboard')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_125": {
                "variable": {
                    "value": "utils_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "utils_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "configs.resume_path.replace('Model_', 'Utils_')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(configs.gpu_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "configs.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_220": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(imgs, targets)",
                            "Call"
                        ],
                        [
                            "torch.mean(total_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_102": {
                "f": {
                    "value": "configs.pretrained_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "configs.resume_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/cal_intersection_rotated_boxes.py": {
        "torch": {
            "roll_57": {
                "variable": {
                    "value": "roll_rect2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rect2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rect2",
                            "Method Argument"
                        ]
                    ]
                },
                "shifts": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_94": {
                "variable": {
                    "value": "roll_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts",
                            "Method Argument"
                        ],
                        [
                            "pts",
                            "Method Argument"
                        ]
                    ]
                },
                "shifts": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "box1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[100, 100, 40, 10, np.pi / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "box2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[100, 100, 40, 20, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_70": {
                "variable": {
                    "value": "roll_intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box2_polygon.intersection(box1_polygon).area",
                            "Attribute"
                        ],
                        [
                            "rect1",
                            "variable"
                        ],
                        [
                            "torch.stack(new_intersection)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_71": {
                "variable": {
                    "value": "roll_line_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "line_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line.cal_values(intersection)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "bev_corners",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cos_118": {
                "variable": {
                    "value": "cos_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yaw",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_119": {
                "variable": {
                    "value": "sin_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yaw",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_38": {
                "data": {
                    "value": "[(self.b * other.c - self.c * other.b) / w, (self.c * other.a - self.a * other.c) / w]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/evaluation_utils.py": {
        "torch": {
            "cat_297": {
                "variable": {
                    "value": "detections",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pred[:, :9].float(), class_confs.float(), class_preds.float())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_311": {
                "variable": {
                    "value": "output[image_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "keep_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "keep_boxes + [detections[0]]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/iou_rotated_boxes_utils.py": {
        "torch": {
            "zeros_41": {
                "variable": {
                    "value": "box_conners",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(8, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ],
                        [
                            "a_volumes.device",
                            "Attribute"
                        ],
                        [
                            "pred_boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_42": {
                "variable": {
                    "value": "cos_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(im, re)",
                            "Call"
                        ],
                        [
                            "yaw",
                            "Method Argument"
                        ],
                        [
                            "yaw",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_43": {
                "variable": {
                    "value": "sin_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(im, re)",
                            "Call"
                        ],
                        [
                            "yaw",
                            "Method Argument"
                        ],
                        [
                            "yaw",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "box_conners",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), 8, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ],
                        [
                            "a_volumes.device",
                            "Attribute"
                        ],
                        [
                            "pred_boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_93": {
                "variable": {
                    "value": "cos_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(im, re)",
                            "Call"
                        ],
                        [
                            "yaw",
                            "Method Argument"
                        ],
                        [
                            "yaw",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_94": {
                "variable": {
                    "value": "sin_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(im, re)",
                            "Call"
                        ],
                        [
                            "yaw",
                            "Method Argument"
                        ],
                        [
                            "yaw",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_boxes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fix_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ],
                        [
                            "a_volumes.device",
                            "Attribute"
                        ],
                        [
                            "pred_boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_146": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_boxes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fix_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ],
                        [
                            "a_volumes.device",
                            "Attribute"
                        ],
                        [
                            "pred_boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_147": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_boxes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fix_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ],
                        [
                            "a_volumes.device",
                            "Attribute"
                        ],
                        [
                            "pred_boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan2_149": {
                "variable": {
                    "value": "yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_anchors, num_targets_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ],
                        [
                            "a_volumes.device",
                            "Attribute"
                        ],
                        [
                            "pred_boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan2_186": {
                "variable": {
                    "value": "t_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_boxes.t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "t_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_boxes.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_193": {
                "variable": {
                    "value": "p_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_boxes.t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_boxes.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "giou_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ],
                        [
                            "a_volumes.device",
                            "Attribute"
                        ],
                        [
                            "pred_boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan2_247": {
                "variable": {
                    "value": "s_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_im",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "s_re",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "atan2_255": {
                "variable": {
                    "value": "m_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_boxes.transpose(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "m_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_boxes.transpose(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "box1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[100, 100, 100, 80, 20, 30, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "variable": {
                    "value": "box2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[100, 100, 100, 40, 20, 30, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "convex_conners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box1_conners[:4, :2], box2_conners[:4, :2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "data": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(num_anchors, num_targets_boxes), device=device, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "convex_conners",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_cons[:4, :2], t_cons[:4, :2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "data": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(num_anchors, num_targets_boxes), device=device, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ],
                        [
                            "a_volumes.device",
                            "Attribute"
                        ],
                        [
                            "pred_boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/misc.py": {
        "torch": {
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/torch_utils.py": {
        "torch": {}
    },
    "src/utils/train_utils.py": {
        "torch": {
            "Adam_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pg0 + [v]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "configs.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "configs.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LambdaLR_68": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(net.parameters(), 0.001)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(pg0, lr=configs.lr, momentum=configs.momentum, nesterov=True)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(pg0, lr=configs.lr)",
                            "Call"
                        ],
                        [
                            "copy.copy(optimizer)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "burnin_schedule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "burnin_schedule",
                            "Call"
                        ]
                    ]
                }
            },
            "save_101": {
                "obj": {
                    "value": "model_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.state_dict()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "model_state_dict",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoints_dir, 'Model_{}_epoch_{}.pth'.format(saved_fn, epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_102": {
                "obj": {
                    "value": "utils_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'configs': configs, 'optimizer': copy.deepcopy(optimizer.state_dict()), 'lr_scheduler': copy.deepcopy(lr_scheduler.state_dict())}",
                            "Dict"
                        ],
                        [
                            "utils_state_dict",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "utils_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoints_dir, 'Utils_{}_epoch_{}.pth'.format(saved_fn, epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pg0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pg0 + [v]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "configs.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_72": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(net.parameters(), 0.001)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(pg0, lr=configs.lr, momentum=configs.momentum, nesterov=True)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(pg0, lr=configs.lr)",
                            "Call"
                        ],
                        [
                            "copy.copy(optimizer)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: ((1 + math.cos(x * math.pi / configs.num_epochs)) / 2) ** 1.0 * 0.9 + 0.1",
                            "Lambda"
                        ]
                    ]
                }
            }
        }
    }
}