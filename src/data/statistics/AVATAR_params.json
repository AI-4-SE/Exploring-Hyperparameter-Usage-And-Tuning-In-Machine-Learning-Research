{
    "avatar/training.py": {
        "sklearn": {
            "train_test_split_40": {
                "variable": {
                    "value": "(train, eval, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "indices",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "indices",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "reset_default_graph_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/playout.py": {
        "sklearn": {
            "train_test_split_142": {
                "variable": {
                    "value": "(train_indices, test_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "indices",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.7",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "avatar/relgan/models/__init__.py": {
        "tensorflow": {
            "make_template_25": {
                "name_": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'prob_discriminator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "func_": {
                    "value": "model_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generator_dict[model_name]",
                            "Subscript"
                        ],
                        [
                            "discriminator_dict[model_name]",
                            "Subscript"
                        ],
                        [
                            "prob_discriminator_dict[model_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "make_template_30": {
                "name_": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'prob_discriminator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "func_": {
                    "value": "model_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generator_dict[model_name]",
                            "Subscript"
                        ],
                        [
                            "discriminator_dict[model_name]",
                            "Subscript"
                        ],
                        [
                            "prob_discriminator_dict[model_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "make_template_34": {
                "name_": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'generator'",
                            "MethodArgument"
                        ],
                        [
                            "'discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'prob_discriminator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "func_": {
                    "value": "model_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generator_dict[model_name]",
                            "Subscript"
                        ],
                        [
                            "discriminator_dict[model_name]",
                            "Subscript"
                        ],
                        [
                            "prob_discriminator_dict[model_name]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "avatar/relgan/models/lstm_vanilla.py": {
        "tensorflow": {
            "constant_8": {
                "variable": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_11": {
                "variable": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "g_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, gen_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "h0",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_18": {
                "variable": {
                    "value": "init_states",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[h0, h0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_21": {
                "variable": {
                    "value": "gen_o",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_22": {
                "variable": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_23": {
                "variable": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_47": {
                "variable": {
                    "value": "(_, _, _, gen_o, gen_x, gen_x_onehot_adv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5: i < seq_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_gen_recurrence",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(g_embeddings, start_tokens), init_states, gen_o, gen_x, gen_x_onehot_adv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "gen_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_o.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_x_onehot_adv.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "variable": {
                    "value": "x_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(g_embeddings, x_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_60": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_62": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "while_loop_74": {
                "variable": {
                    "value": "(_, _, _, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < seq_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(g_embeddings, start_tokens), init_states, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_101": {
                "variable": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "d_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_onehot, [-1, vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d_emb', shape=[vocab_size, dis_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(input_x_re, d_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_len, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "variable": {
                    "value": "emb_x_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(emb_x_re, [batch_size, seq_len, dis_emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_124": {
                "variable": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "h_drop",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "Name",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.75",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_137": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(hidden_state, Wo) + bo",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "Wi",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wi",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[emb_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "Ui",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Ui",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_146": {
                "variable": {
                    "value": "bi",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bi",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_bias_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "Wf",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wf",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[emb_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_149": {
                "variable": {
                    "value": "Uf",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Uf",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "bf",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bf",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_bias_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_152": {
                "variable": {
                    "value": "Wog",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wog",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[emb_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_153": {
                "variable": {
                    "value": "Uog",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Uog",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_154": {
                "variable": {
                    "value": "bog",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bog",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_bias_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "Wc",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[emb_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "Uc",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Uc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_158": {
                "variable": {
                    "value": "bc",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_bias_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_199": {
                "variable": {
                    "value": "Wo",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wo",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_dim, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "variable": {
                    "value": "bo",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bo",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_bias_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_31": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(gumbel_t, axis=1, output_type=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_32": {
                "variable": {
                    "value": "next_token_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.argmax(gumbel_t, axis=1, output_type=tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "x_onehot_appr",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.multiply(gumbel_t, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_37": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.argmax(gumbel_t, axis=1, output_type=tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_116": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(emb_x_expanded, num_filter, k_h=filter_size, k_w=emb_dim_single, d_h=1, d_w=emb_dim_single, sn=sn, stddev=None, padding='VALID', scope='conv-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_117": {
                "variable": {
                    "value": "pooled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv, name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, seq_len - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_161": {
                "variable": {
                    "value": "(previous_hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tm1",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, Wi) + tf.matmul(previous_hidden_state, Ui) + bi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, Wf) + tf.matmul(previous_hidden_state, Uf) + bf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_176": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, Wog) + tf.matmul(previous_hidden_state, Uog) + bog",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_182": {
                "variable": {
                    "value": "c_",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, Wc) + tf.matmul(previous_hidden_state, Uc) + bc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_203": {
                "variable": {
                    "value": "(hidden_state, c_prev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_memory_tuple",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "embedding_lookup_59": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_193": {
                "values": {
                    "value": "[current_hidden_state, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_31": {
                "input": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_gumbel(o_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_34": {
                "x": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_gumbel(o_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "tf.multiply(next_token_onehot, x_onehot_appr)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "logits": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_output_unit(h_t)",
                            "Call"
                        ],
                        [
                            "g_output_unit(h_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(x_real, [-1])), vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(g_predictions, [-1, vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_191": {
                "x": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f * c_prev + i * c_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_204": {
                "a": {
                    "value": "hidden_state",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Wo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Wo', shape=[hidden_dim, vocab_size], initializer=create_linear_initializer(hidden_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_39": {
                "x": {
                    "value": "next_token_onehot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(next_token, vocab_size, 1.0, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_onehot_appr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.multiply(gumbel_t, temperature))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_50": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([start_token] * batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_77": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_77": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([start_token] * batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_85": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(x_real, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_85": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(g_predictions, [-1, vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Wi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Wi', shape=[emb_dim, hidden_dim], initializer=create_linear_initializer(emb_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_166": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Ui",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Ui', shape=[hidden_dim, hidden_dim], initializer=create_linear_initializer(hidden_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_171": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Wf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Wf', shape=[emb_dim, hidden_dim], initializer=create_linear_initializer(emb_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_172": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Uf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Uf', shape=[hidden_dim, hidden_dim], initializer=create_linear_initializer(hidden_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_177": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Wog",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Wog', shape=[emb_dim, hidden_dim], initializer=create_linear_initializer(emb_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_178": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Uog",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Uog', shape=[hidden_dim, hidden_dim], initializer=create_linear_initializer(hidden_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_183": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Wc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Wc', shape=[emb_dim, hidden_dim], initializer=create_linear_initializer(emb_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_184": {
                "a": {
                    "value": "previous_hidden_state",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Uc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Uc', shape=[hidden_dim, hidden_dim], initializer=create_linear_initializer(hidden_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_85": {
                "x": {
                    "value": "tf.reshape(x_real, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_86": {
                "t": {
                    "value": "tf.reshape(g_predictions, [-1, vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "tensor": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.float32, size=seq_len, dynamic_size=False, infer_shape=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(g_predictions.stack(), perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "g_predictions.write(i, tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "avatar/relgan/models/rmc_att.py": {
        "tensorflow": {
            "constant_9": {
                "variable": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_12": {
                "variable": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "g_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, gen_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorArray_21": {
                "variable": {
                    "value": "gen_o",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_22": {
                "variable": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_23": {
                "variable": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_40": {
                "variable": {
                    "value": "(_, _, _, gen_o, gen_x, gen_x_onehot_adv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5: i < seq_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_gen_recurrence",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(g_embeddings, start_tokens), init_states, gen_o, gen_x, gen_x_onehot_adv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_47": {
                "variable": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.int32, size=seq_len, dynamic_size=False, infer_shape=True)",
                            "Call"
                        ],
                        [
                            "gen_x.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(gen_x, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "gen_x.write(i, next_token)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.float32, size=seq_len, dynamic_size=False, infer_shape=True)",
                            "Call"
                        ],
                        [
                            "gen_x_onehot_adv.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(gen_x_onehot_adv, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "gen_x_onehot_adv.write(i, x_onehot_appr)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "x_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(g_embeddings, x_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_54": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_56": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "while_loop_66": {
                "variable": {
                    "value": "(_, _, _, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < seq_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(g_embeddings, start_tokens), init_states, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "d_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_onehot, [-1, vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d_emb', shape=[vocab_size, dis_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(input_x_re, d_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_len, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "variable": {
                    "value": "emb_x_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(emb_x_re, [batch_size, seq_len, dis_emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(emb_x_expanded, dis_emb_dim * 2, k_h=2, d_h=2, sn=sn, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 2, k_h=1, d_h=1, sn=sn, scope='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "self_attention(out, dis_emb_dim * 2, sn=sn)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=2, d_h=2, sn=sn, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=1, d_h=1, sn=sn, scope='conv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_97": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(emb_x_expanded, dis_emb_dim * 2, k_h=2, d_h=2, sn=sn, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 2, k_h=1, d_h=1, sn=sn, scope='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "self_attention(out, dis_emb_dim * 2, sn=sn)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=2, d_h=2, sn=sn, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=1, d_h=1, sn=sn, scope='conv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_104": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(emb_x_expanded, dis_emb_dim * 2, k_h=2, d_h=2, sn=sn, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 2, k_h=1, d_h=1, sn=sn, scope='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "self_attention(out, dis_emb_dim * 2, sn=sn)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=2, d_h=2, sn=sn, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=1, d_h=1, sn=sn, scope='conv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_106": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(emb_x_expanded, dis_emb_dim * 2, k_h=2, d_h=2, sn=sn, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 2, k_h=1, d_h=1, sn=sn, scope='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "self_attention(out, dis_emb_dim * 2, sn=sn)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=2, d_h=2, sn=sn, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=1, d_h=1, sn=sn, scope='conv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_109": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(emb_x_expanded, dis_emb_dim * 2, k_h=2, d_h=2, sn=sn, scope='conv1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 2, k_h=1, d_h=1, sn=sn, scope='conv2')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "self_attention(out, dis_emb_dim * 2, sn=sn)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=2, d_h=2, sn=sn, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "conv2d(out, dis_emb_dim * 4, k_h=1, d_h=1, sn=sn, scope='conv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(out, output_size=1, use_bias=True, sn=sn, scope='fc5')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1, name='discriminator-logits')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminator-logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(gumbel_t, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "x_onehot_appr",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.multiply(gumbel_t, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_33": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(gumbel_t, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_53": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "argmax_30": {
                "input": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_gumbel(o_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_31": {
                "x": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_gumbel(o_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, vocab_size, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_62": {
                "logits": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ],
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(x_real, [-1])), vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(g_predictions, [-1, vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_34": {
                "x": {
                    "value": "tf.one_hot(next_token, vocab_size, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_43": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([start_token] * batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_69": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_69": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([start_token] * batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_34": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(gumbel_t, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "logits": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ],
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_77": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(x_real, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_77": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(g_predictions, [-1, vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_77": {
                "x": {
                    "value": "tf.reshape(x_real, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_78": {
                "t": {
                    "value": "tf.reshape(g_predictions, [-1, vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "tensor": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.float32, size=seq_len, dynamic_size=False, infer_shape=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(g_predictions.stack(), perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "g_predictions.write(i, tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "avatar/relgan/models/rmc_vanilla.py": {
        "tensorflow": {
            "constant_10": {
                "variable": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_14": {
                "variable": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "g_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, gen_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorArray_23": {
                "variable": {
                    "value": "gen_o",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_24": {
                "variable": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_25": {
                "variable": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_49": {
                "variable": {
                    "value": "(_, _, _, gen_o, gen_x, gen_x_onehot_adv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5: i < seq_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_gen_recurrence",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(g_embeddings, start_tokens), init_states, gen_o, gen_x, gen_x_onehot_adv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "gen_o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_o.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_x.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_x_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_58": {
                "variable": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_x_onehot_adv.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "variable": {
                    "value": "x_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(g_embeddings, x_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_62": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_64": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "while_loop_76": {
                "variable": {
                    "value": "(_, _, _, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < seq_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(g_embeddings, start_tokens), init_states, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_105": {
                "variable": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "d_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_onehot, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_onehot, [-1, vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d_emb', shape=[vocab_size, dis_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('d_emb', shape=[vocab_size, dis_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(input_x_re, d_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_x_re, d_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_len, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "variable": {
                    "value": "emb_x_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(emb_x_re, [batch_size, seq_len, dis_emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb_x_re, [batch_size, seq_len, dis_emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_131": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "h_drop",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "Name",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ],
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.75",
                            "Constant"
                        ],
                        [
                            "0.75",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_149": {
                "variable": {
                    "value": "prob_out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1, name='discriminator-logits')",
                            "Call"
                        ],
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, (batch_size, num_rep))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prob_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1, name='discriminator-logits')",
                            "Call"
                        ],
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, (batch_size, num_rep))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminator-logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_166": {
                "variable": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "d_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "variable": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_onehot, [-1, vocab_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_onehot, [-1, vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d_emb', shape=[vocab_size, dis_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('d_emb', shape=[vocab_size, dis_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(input_x_re, d_embeddings)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_x_re, d_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_len, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "variable": {
                    "value": "emb_x_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(emb_x_re, [batch_size, seq_len, dis_emb_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb_x_re, [batch_size, seq_len, dis_emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ],
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_197": {
                "variable": {
                    "value": "h_drop",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h_highway",
                    "type": "Name",
                    "possible_values": [
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ],
                        [
                            "highway(h_pool_flat, h_pool_flat.get_shape()[1], 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.75",
                            "Constant"
                        ],
                        [
                            "0.75",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1, name='discriminator-logits')",
                            "Call"
                        ],
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, (batch_size, num_rep))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, num_rep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dense_207": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1, name='discriminator-logits')",
                            "Call"
                        ],
                        [
                            "linear(fc_out, output_size=1, use_bias=True, sn=sn, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, (batch_size, num_rep))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_210": {
                "variable": {
                    "value": "prob_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=logits, units=1, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_disc_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_33": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.argmax(gumbel_t, axis=1, output_type=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_34": {
                "variable": {
                    "value": "next_token_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.argmax(gumbel_t, axis=1, output_type=tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "x_onehot_appr",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.multiply(gumbel_t, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_39": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tf.argmax(gumbel_t, axis=1, output_type=tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_120": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(emb_x_expanded, num_filter, k_h=filter_size, k_w=emb_dim_single, d_h=1, d_w=emb_dim_single, sn=sn, stddev=None, padding='VALID', scope='conv-%s' % filter_size)",
                            "Call"
                        ],
                        [
                            "conv2d(emb_x_expanded, num_filter, k_h=filter_size, k_w=emb_dim_single, d_h=1, d_w=emb_dim_single, sn=sn, stddev=None, padding='VALID', scope='conv-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_121": {
                "variable": {
                    "value": "pooled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, seq_len - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_181": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(emb_x_expanded, num_filter, k_h=filter_size, k_w=emb_dim_single, d_h=1, d_w=emb_dim_single, sn=sn, stddev=None, padding='VALID', scope='conv-%s' % filter_size)",
                            "Call"
                        ],
                        [
                            "conv2d(emb_x_expanded, num_filter, k_h=filter_size, k_w=emb_dim_single, d_h=1, d_w=emb_dim_single, sn=sn, stddev=None, padding='VALID', scope='conv-%s' % filter_size)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_182": {
                "variable": {
                    "value": "pooled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv, name='relu')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv, name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, seq_len - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "argmax_33": {
                "input": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_gumbel(o_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_36": {
                "x": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_gumbel(o_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_41": {
                "input_tensor": {
                    "value": "tf.multiply(next_token_onehot, x_onehot_appr)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "logits": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ],
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(x_real, [-1])), vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(g_predictions, [-1, vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_41": {
                "x": {
                    "value": "next_token_onehot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(next_token, vocab_size, 1.0, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_onehot_appr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.multiply(gumbel_t, temperature))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_52": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([start_token] * batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_79": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_79": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([start_token] * batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_87": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(x_real, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_87": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(g_predictions, [-1, vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_87": {
                "x": {
                    "value": "tf.reshape(x_real, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_88": {
                "t": {
                    "value": "tf.reshape(g_predictions, [-1, vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.float32, size=seq_len, dynamic_size=False, infer_shape=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(g_predictions.stack(), perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "g_predictions.write(i, tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "avatar/relgan/models/rmc_vdcnn.py": {
        "tensorflow": {
            "he_normal_12": {
                "variable": {
                    "value": "cnn_initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_13": {
                "variable": {
                    "value": "fc_initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_18": {
                "variable": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[start_token] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "g_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, gen_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorArray_30": {
                "variable": {
                    "value": "gen_o",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_31": {
                "variable": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_32": {
                "variable": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_49": {
                "variable": {
                    "value": "(_, _, _, gen_o, gen_x, gen_x_onehot_adv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3, _4, _5: i < seq_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_gen_recurrence",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(g_embeddings, start_tokens), init_states, gen_o, gen_x, gen_x_onehot_adv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "variable": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.int32, size=seq_len, dynamic_size=False, infer_shape=True)",
                            "Call"
                        ],
                        [
                            "gen_x.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(gen_x, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "gen_x.write(i, next_token)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "variable": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gen_x_onehot_adv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.float32, size=seq_len, dynamic_size=False, infer_shape=True)",
                            "Call"
                        ],
                        [
                            "gen_x_onehot_adv.stack()",
                            "Call"
                        ],
                        [
                            "tf.transpose(gen_x_onehot_adv, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "gen_x_onehot_adv.write(i, x_onehot_appr)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "variable": {
                    "value": "x_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.embedding_lookup(g_embeddings, x_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorArray_63": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorArray_65": {
                "variable": {
                    "value": "ta_emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "seq_len",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "while_loop_75": {
                "variable": {
                    "value": "(_, _, _, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, _1, _2, _3: i < seq_len",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "_pretrain_recurrence",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(tf.constant(0, dtype=tf.int32), tf.nn.embedding_lookup(g_embeddings, start_tokens), init_states, g_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "variable": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "g_predictions.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "d_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "input_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_onehot, [-1, vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "d_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('d_emb', shape=[vocab_size, dis_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_x_re",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(input_x_re, d_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_len, dis_emb_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "variable": {
                    "value": "emb_x_expanded",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(emb_x_re, [batch_size, seq_len, dis_emb_dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(conv2)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "h_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "top_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.top_k(h, k=1, sorted=False).values",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_132": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(top_k, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "fc_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=0.05)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(h_flat, 1, activation=None, kernel_initializer=fc_initializer)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(gumbel_t, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "x_onehot_appr",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.multiply(gumbel_t, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_42": {
                "variable": {
                    "value": "x_tp1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(gumbel_t, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "conv0",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_x_expanded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(emb_x, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[128, 256, 128, 256, 512]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[filter_sizes[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "cnn_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_62": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "conv-0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "input": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_block(conv1, 2, max_pool=False, is_train=is_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_124": {
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(tf.squeeze(conv2), [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "'conv-block-%s' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_158": {
                "variable": {
                    "value": "pool",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, filters=num_filters[i], kernel_size=[filter_sizes[i], 1], kernel_initializer=cnn_initializer, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_39": {
                "input": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_gumbel(o_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_40": {
                "x": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_gumbel(o_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "tf.multiply(tf.one_hot(next_token, vocab_size, 1.0, 0.0), tf.nn.softmax(o_t))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "logits": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ],
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "tf.one_hot(tf.to_int32(tf.reshape(x_real, [-1])), vocab_size, 1.0, 0.0) * tf.log(tf.clip_by_value(tf.reshape(g_predictions, [-1, vocab_size]), 1e-20, 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_145": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filters[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[128, 256, 128, 256, 512]",
                            "List"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[filter_sizes[i], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "cnn_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_152": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, filters=num_filters[i], kernel_size=[filter_sizes[i], 1], kernel_initializer=cnn_initializer, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_154": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input, filters=num_filters[i], kernel_size=[filter_sizes[i], 1], kernel_initializer=cnn_initializer, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_43": {
                "x": {
                    "value": "tf.one_hot(next_token, vocab_size, 1.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.softmax(o_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_52": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([start_token] * batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_78": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_78": {
                "params": {
                    "value": "g_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('g_emb', shape=[vocab_size, gen_emb_dim], initializer=create_linear_initializer(vocab_size))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "start_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([start_token] * batch_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "'conv-%s' % j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_43": {
                "indices": {
                    "value": "next_token",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(gumbel_t, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "logits": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ],
                        [
                            "g_output_unit(mem_o_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_86": {
                "indices": {
                    "value": "tf.to_int32(tf.reshape(x_real, [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_86": {
                "x": {
                    "value": "tf.clip_by_value(tf.reshape(g_predictions, [-1, vocab_size]), 1e-20, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_86": {
                "x": {
                    "value": "tf.reshape(x_real, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_87": {
                "t": {
                    "value": "tf.reshape(g_predictions, [-1, vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "g_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor_array_ops.TensorArray(dtype=tf.float32, size=seq_len, dynamic_size=False, infer_shape=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(g_predictions.stack(), perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "g_predictions.write(i, tf.nn.softmax(o_t))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "avatar/relgan/real/real_gan/real_train.py": {
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_real",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "temperature",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_59": {
                "variable": {
                    "value": "x_real_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "x_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size, seq_len], name='x_real')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['vocab_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "time_diff",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "Wall_clock_time",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "temp_var",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_103": {
                "variable": {
                    "value": "loss_summary_op",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "loss_summaries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('loss/discriminator', d_loss), tf.summary.scalar('loss/prob_discriminator', d_prob_loss), tf.summary.scalar('loss/g_loss', g_loss), tf.summary.scalar('loss/log_pg', log_pg), tf.summary.scalar('loss/Wall_clock_time', Wall_clock_time), tf.summary.scalar('loss/temperature', temperature)]",
                            "List"
                        ]
                    ]
                }
            },
            "Saver_109": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_240": {
                "variable": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_out_real - d_out_fake",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(d_out_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "disc_sigmoid_out_real",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_241": {
                "variable": {
                    "value": "g_in",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_out_fake - d_out_real",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(d_out_fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "disc_sigmoid_out_fake",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_243": {
                "variable": {
                    "value": "d_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_real - d_out_fake, labels=tf.ones_like(d_out_real), name='disc_sigmoid_out_real')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_real - d_out_fake, labels=tf.ones_like(d_out_real), name='disc_sigmoid_out_real')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "g_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake - d_out_real, labels=tf.ones_like(d_out_fake), name='disc_sigmoid_out_fake')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake - d_out_real, labels=tf.ones_like(d_out_fake), name='disc_sigmoid_out_fake')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_255": {
                "variable": {
                    "value": "log_pg",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(gen_o + EPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_334": {
                "variable": {
                    "value": "log_pg",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(gen_o + EPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_347": {
                "variable": {
                    "value": "g_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_348": {
                "variable": {
                    "value": "d_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_349": {
                "variable": {
                    "value": "d_prob_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "prob_discriminator",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_354": {
                "variable": {
                    "value": "pretrain_opt",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "gpre_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['gpre_lr']",
                            "Subscript"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_355": {
                "variable": {
                    "value": "(pretrain_grad, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(g_pretrain_loss, g_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_380": {
                "variable": {
                    "value": "(g_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(g_loss, g_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_387": {
                "variable": {
                    "value": "(d_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(d_loss, d_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_391": {
                "variable": {
                    "value": "(d_prob_grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(d_prob_loss, d_prob_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "merge_445": {
                "variable": {
                    "value": "metric_summary_op",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "metrics_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "FileWriter_116": {
                "variable": {
                    "value": "sum_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(log_dir, 'summary')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_265": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_real, labels=tf.ones_like(d_out_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_268": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake, labels=tf.zeros_like(d_out_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_273": {
                "variable": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake, labels=tf.ones_like(d_out_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exponential_decay_360": {
                "variable": {
                    "value": "d_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "d_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['d_lr']",
                            "Subscript"
                        ],
                        [
                            "tf.train.exponential_decay(d_lr, global_step=global_step, decay_steps=nadv_steps, decay_rate=0.1)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "nadv_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['nadv_steps']",
                            "Subscript"
                        ],
                        [
                            "config['nadv_steps']",
                            "Subscript"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_361": {
                "variable": {
                    "value": "gadv_lr",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "gadv_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['gadv_lr']",
                            "Subscript"
                        ],
                        [
                            "tf.train.exponential_decay(gadv_lr, global_step=global_step, decay_steps=nadv_steps, decay_rate=0.1)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "nadv_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['nadv_steps']",
                            "Subscript"
                        ],
                        [
                            "config['nadv_steps']",
                            "Subscript"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_365": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "d_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['d_lr']",
                            "Subscript"
                        ],
                        [
                            "tf.train.exponential_decay(d_lr, global_step=global_step, decay_steps=nadv_steps, decay_rate=0.1)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_366": {
                "variable": {
                    "value": "d_prob_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "d_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['d_lr']",
                            "Subscript"
                        ],
                        [
                            "tf.train.exponential_decay(d_lr, global_step=global_step, decay_steps=nadv_steps, decay_rate=0.1)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_367": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "gadv_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['gadv_lr']",
                            "Subscript"
                        ],
                        [
                            "tf.train.exponential_decay(gadv_lr, global_step=global_step, decay_steps=nadv_steps, decay_rate=0.1)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_368": {
                "variable": {
                    "value": "temp_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_424": {
                "variable": {
                    "value": "nll_gen",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_429": {
                "variable": {
                    "value": "doc_embsim",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_96": {
                "name": {
                    "value": "loss/discriminator",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(d_in)",
                            "Call"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.tanh(d_out_fake) - tf.tanh(d_out_real))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(d_out_fake) - tf.reduce_mean(d_out_real)",
                            "BinOp"
                        ],
                        [
                            "d_loss + GP",
                            "BinOp"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(d_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_97": {
                "name": {
                    "value": "loss/prob_discriminator",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "d_prob_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_prob_loss_real + d_prob_loss_fake",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_98": {
                "name": {
                    "value": "loss/g_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(g_in)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake, labels=tf.ones_like(d_out_fake)))",
                            "Call"
                        ],
                        [
                            "-d_loss_fake",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(-d_out_fake)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(d_out_fake)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(-tf.tanh(d_out_fake))",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(d_out_fake)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(tf.squared_difference(d_out_fake, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(g_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_99": {
                "name": {
                    "value": "loss/log_pg",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "log_pg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.log(gen_o + EPS))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.log(gen_o + EPS))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_100": {
                "name": {
                    "value": "loss/Wall_clock_time",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "Wall_clock_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_101": {
                "name": {
                    "value": "loss/temperature",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(1.0, trainable=False, name='temperature')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_251": {
                "input": {
                    "value": "d_prob_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prob_discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_252": {
                "input": {
                    "value": "d_prob_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prob_discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_255": {
                "x": {
                    "value": "gen_o + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_278": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_real, labels=tf.ones_like(d_out_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_281": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake, labels=tf.zeros_like(d_out_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_334": {
                "x": {
                    "value": "gen_o + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_355": {
                "ys": {
                    "value": "g_pretrain_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "xs": {
                    "value": "g_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='generator')",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_372": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "d_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['d_lr']",
                            "Subscript"
                        ],
                        [
                            "tf.train.exponential_decay(d_lr, global_step=global_step, decay_steps=nadv_steps, decay_rate=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_373": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "gadv_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config['gadv_lr']",
                            "Subscript"
                        ],
                        [
                            "tf.train.exponential_decay(gadv_lr, global_step=global_step, decay_steps=nadv_steps, decay_rate=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_374": {
                "variable": {
                    "value": "temp_optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_380": {
                "ys": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(g_in)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake, labels=tf.ones_like(d_out_fake)))",
                            "Call"
                        ],
                        [
                            "-d_loss_fake",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(-d_out_fake)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(d_out_fake)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(-tf.tanh(d_out_fake))",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(d_out_fake)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(tf.squared_difference(d_out_fake, 1.0))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(g_in)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "g_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='generator')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_387": {
                "ys": {
                    "value": "d_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(d_in)",
                            "Call"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.tanh(d_out_fake) - tf.tanh(d_out_real))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(d_out_fake) - tf.reduce_mean(d_out_real)",
                            "BinOp"
                        ],
                        [
                            "d_loss + GP",
                            "BinOp"
                        ],
                        [
                            "d_loss_real + d_loss_fake",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(d_in)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "d_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='discriminator')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_391": {
                "ys": {
                    "value": "d_prob_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_prob_loss_real + d_prob_loss_fake",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "d_prob_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='prob_discriminator')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_435": {
                "variable": {
                    "value": "temp_pl",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'bleu{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_441": {
                "variable": {
                    "value": "temp_pl",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'selfbleu{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_240": {
                "input": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_241": {
                "input": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_265": {
                "logits": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(d_out_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_268": {
                "logits": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(d_out_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_273": {
                "logits": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(d_out_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_289": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_real, labels=tf.ones_like(d_out_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_292": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake, labels=tf.zeros_like(d_out_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_297": {
                "variable": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-d_out_fake",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_426": {
                "name": {
                    "value": "metrics/nll_gen",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "nll_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Nll(oracle_loader, g_pretrain_loss, x_real, sess, name='nll_gen')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_431": {
                "name": {
                    "value": "metrics/doc_embsim",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "doc_embsim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DocEmbSim(test_file, gen_file, config['vocab_size'], name='doc_embsim')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_278": {
                "logits": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(d_out_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_281": {
                "logits": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(d_out_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_300": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(1.0 - d_out_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_301": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(1.0 + d_out_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_437": {
                "name": {
                    "value": "'metrics/bleu{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "temp_pl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='bleu{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='selfbleu{}'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_443": {
                "name": {
                    "value": "'metrics/selfbleu{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "temp_pl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='bleu{}'.format(i))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='selfbleu{}'.format(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_266": {
                "input": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_269": {
                "input": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_274": {
                "input": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_289": {
                "logits": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(d_out_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_292": {
                "logits": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(d_out_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_307": {
                "variable": {
                    "value": "d_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.tanh(d_out_fake) - tf.tanh(d_out_real)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_308": {
                "variable": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.tanh(d_out_fake)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_279": {
                "input": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_282": {
                "input": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_300": {
                "features": {
                    "value": "1.0 - d_out_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_301": {
                "features": {
                    "value": "1.0 + d_out_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_304": {
                "input_tensor": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_290": {
                "input": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_293": {
                "input": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_318": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(d_out_real, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(d_out_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_322": {
                "variable": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(d_out_fake, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_307": {
                "x": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_308": {
                "x": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_311": {
                "input_tensor": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_315": {
                "input_tensor": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_325": {
                "variable": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_out_real - d_out_fake",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(d_out_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "disc_sigmoid_out_real",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_326": {
                "variable": {
                    "value": "g_in",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_out_fake - d_out_real",
                    "type": "BinOp",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(d_out_fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "disc_sigmoid_out_fake",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_328": {
                "variable": {
                    "value": "d_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_real - d_out_fake, labels=tf.ones_like(d_out_real), name='disc_sigmoid_out_real')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_real - d_out_fake, labels=tf.ones_like(d_out_real), name='disc_sigmoid_out_real')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_329": {
                "variable": {
                    "value": "g_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "g_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake - d_out_real, labels=tf.ones_like(d_out_fake), name='disc_sigmoid_out_fake')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_out_fake - d_out_real, labels=tf.ones_like(d_out_fake), name='disc_sigmoid_out_fake')",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_318": {
                "x": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_319": {
                "x": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_322": {
                "x": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_325": {
                "input": {
                    "value": "d_out_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_real_onehot)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_326": {
                "input": {
                    "value": "d_out_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=x_fake_onehot_appr)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avatar/relgan/utils/metrics/DocEmbSim.py": {
        "tensorflow": {
            "Graph_88": {
                "variable": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "train_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "valid_dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "self.valid_examples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_109": {
                "variable": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0, seed=11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "softmax_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([vocabulary_size, embedding_size], stddev=1.0 / math.sqrt(embedding_size), seed=12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "variable": {
                    "value": "softmax_biases",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocabulary_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_118": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0, seed=11))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sampled_softmax_loss(weights=softmax_weights, biases=softmax_biases, inputs=embed, labels=train_labels, num_sampled=num_sampled, num_classes=vocabulary_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_127": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_129": {
                "variable": {
                    "value": "valid_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "normalized_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                },
                "ids": {
                    "value": "valid_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.valid_examples, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "similarity",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "valid_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(normalized_embeddings, valid_dataset)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(normalized_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_135": {
                "graph": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_112": {
                "shape": {
                    "value": "[vocabulary_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / math.sqrt(embedding_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "seed": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "shape": {
                    "value": "[vocabulary_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_121": {
                "weights": {
                    "value": "softmax_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([vocabulary_size, embedding_size], stddev=1.0 / math.sqrt(embedding_size), seed=12))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "softmax_biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([vocabulary_size]))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "train_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "vocabulary_size",
                            "Name"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "vocabulary_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_vocabulary",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_127": {
                "input_tensor": {
                    "value": "tf.square(embeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "a": {
                    "value": "normalized_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embeddings / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_127": {
                "x": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0, seed=11))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "avatar/relgan/utils/models/relational_memory.py": {
        "tensorflow": {
            "make_template_69": {
                "variable": {
                    "value": "self._template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "self._build",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_86": {
                "variable": {
                    "value": "init_state",
                    "type": "Name",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "self._mem_slots",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "memory_flattened",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(memory)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(memory + attended_memory, trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(memory + memory_mlp, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "qkv",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qkv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(memory_flattened, total_size, use_bias=False, scope='lin_qkv')",
                            "Call"
                        ],
                        [
                            "tf.reshape(qkv, [batch_size, -1, total_size])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(qkv, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "qkv_reshape",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qkv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(memory_flattened, total_size, use_bias=False, scope='lin_qkv')",
                            "Call"
                        ],
                        [
                            "tf.reshape(qkv, [batch_size, -1, total_size])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(qkv, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, self._num_heads, qkv_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "qkv_transpose",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "qkv_reshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(qkv, [batch_size, -1, self._num_heads, qkv_size])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_124": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "qkv_transpose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(qkv_reshape, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[self._key_size, self._key_size, self._head_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "variable": {
                    "value": "dot_product",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q * qkv_size ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "dot_product",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(dot_product)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_133": {
                "variable": {
                    "value": "output_transpose",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_memory, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "new_memory",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_transpose",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(output, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, self._mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_176": {
                "variable": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(memory)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(memory + attended_memory, trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(memory + memory_mlp, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "linear(inputs, self._mem_size, use_bias=True, scope='input_for_cancat')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gate_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(inputs, num_gates, use_bias=False, scope='gate_in')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(gate_inputs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "memory_flattened",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(memory)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(memory + attended_memory, trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(memory + memory_mlp, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "gate_memory",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gate_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear(memory_flattened, num_gates, use_bias=False, scope='gate_mem')",
                            "Call"
                        ],
                        [
                            "tf.reshape(gate_memory, [batch_size, self._mem_slots, num_gates])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, self._mem_slots, num_gates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_186": {
                "variable": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_memory + gate_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_189": {
                "variable": {
                    "value": "input_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "input_gate + self._input_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_190": {
                "variable": {
                    "value": "forget_gate",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "forget_gate + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "linear(inputs, self._mem_size, use_bias=True, scope='input_for_cancat')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_237": {
                "variable": {
                    "value": "inputs_reshape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "linear(inputs, self._mem_size, use_bias=True, scope='input_for_cancat')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_239": {
                "variable": {
                    "value": "memory_plus_input",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[memory, inputs_reshape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._attend_over_memory(memory_plus_input)",
                            "Call"
                        ],
                        [
                            "next_memory[:, :-n, :]",
                            "Subscript"
                        ],
                        [
                            "self._input_gate * tf.tanh(next_memory)",
                            "BinOp"
                        ],
                        [
                            "next_memory + self._forget_gate * memory",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_288": {
                "variable": {
                    "value": "rmc_params",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_296": {
                "variable": {
                    "value": "rmc_params",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, self._mem_slots, difference)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_92": {
                "variable": {
                    "value": "init_state",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[init_state, pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TensorShape_141": {
                "dims": {
                    "value": "[self._mem_slots, self._mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_145": {
                "dims": {
                    "value": "self._mem_slots * self._mem_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "memory_mlp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tanh(memory)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(memory + attended_memory, trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(memory + memory_mlp, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "memory_mlp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "memory_mlp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(memory, [-1, self._mem_size])",
                            "Call"
                        ],
                        [
                            "mlp(memory_mlp, [self._mem_size] * self._attention_mlp_layers)",
                            "Call"
                        ],
                        [
                            "tf.reshape(memory_mlp, [batch_size, -1, self._mem_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, self._mem_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_284": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_292": {
                "variable": {
                    "value": "rmc_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_rmc_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_247": {
                "x": {
                    "value": "next_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._attend_over_memory(memory_plus_input)",
                            "Call"
                        ],
                        [
                            "next_memory[:, :-n, :]",
                            "Subscript"
                        ],
                        [
                            "self._input_gate * tf.tanh(next_memory)",
                            "BinOp"
                        ],
                        [
                            "next_memory + self._forget_gate * memory",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_300": {
                "input": {
                    "value": "ref_rmc_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "avatar/relgan/utils/ops.py": {
        "tensorflow": {
            "matmul_127": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "hw_flatten(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "hw_flatten(f)",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(hw_flatten(g), hw_flatten(f), transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(s, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hw_flatten(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(beta, hw_flatten(h))",
                            "Call"
                        ],
                        [
                            "tf.reshape(o, [-1] + x.get_shape().as_list()[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + x.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "l2_norm(v_)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_171": {
                "variable": {
                    "value": "Wo",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Wo",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_172": {
                "variable": {
                    "value": "bo",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bo",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_bias_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_185": {
                "variable": {
                    "value": "gumbel_t",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "g_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.log(-tf.log(u + eps) + eps)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_202": {
                "variable": {
                    "value": "topgumbel",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "next_token_onehot * topgumbels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_216": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.layers.flatten(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_6": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gamma * o + x",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, x.shape[1] * x.shape[2], x.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_14": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gamma * o + x",
                            "BinOp"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[config['batch_size'], 1, 1], minval=0.0, maxval=1.0)",
                            "Call"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_20": {
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / math.sqrt(input_size * 1.0)",
                            "BinOp"
                        ],
                        [
                            "math.sqrt(2.0 / (k_h * k_w * in_nums))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_25": {
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size, input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_linear_initializer(input_size, input_.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "output_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "input_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, in_nums, out_nums]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_nums]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "filter": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', shape=[output_size, input_size], initializer=create_linear_initializer(input_size, input_.dtype), dtype=input_.dtype)",
                            "Call"
                        ],
                        [
                            "spectral_norm(W)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('Matrix', shape=[k_h, k_w, in_nums, out_nums], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_norm(W)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_115": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, filter=W, strides=[1, d_h, d_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Bias', shape=[out_nums], initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "l2_norm(u_)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "l2_norm(v_)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "bias_term",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "Bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_bias_initializer(input_.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Highway'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "linear(input_, size, scope='highway_gate_%d' % idx) + bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "scope or 'Conv2d'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "transpose_160": {
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "l2_norm(u_)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_163": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_183": {
                "input": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_184": {
                "x": {
                    "value": "u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_195": {
                "input": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "log_200": {
                "x": {
                    "value": "v + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_201": {
                "input_tensor": {
                    "value": "o_t",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_215": {
                "ys": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "discriminator(x_onehot=interpolated)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "interpolated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * x_real_onehot + (1.0 - alpha) * x_fake_onehot_appr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_216": {
                "structure": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(logit, interpolated)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_218": {
                "input_tensor": {
                    "value": "tf.square(grad_norm - 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_56": {
                "a": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', shape=[output_size, input_size], initializer=create_linear_initializer(input_size, input_.dtype), dtype=input_.dtype)",
                            "Call"
                        ],
                        [
                            "spectral_norm(W)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('Matrix', shape=[k_h, k_w, in_nums, out_nums], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "spectral_norm(W)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_132": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_154": {
                "a": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_175": {
                "a": {
                    "value": "hidden_mem_o",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "Wo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('Wo', shape=[output_size, vocab_size], initializer=create_linear_initializer(output_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_193": {
                "x": {
                    "value": "eps + tf.exp(-gumbel) + tf.exp(-truncation)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_218": {
                "x": {
                    "value": "grad_norm - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_10": {
                "input_tensor": {
                    "value": "v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_110": {
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / math.sqrt(input_size * 1.0)",
                            "BinOp"
                        ],
                        [
                            "math.sqrt(2.0 / (k_h * k_w * in_nums))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_193": {
                "x": {
                    "value": "-gumbel",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "avatar/relgan/utils/utils.py": {
        "tensorflow": {
            "ConfigProto_35": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_37": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avatar/sampling.py": {
        "tensorflow": {
            "reset_default_graph_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "avatar/util/LoadRelgan.py": {
        "tensorflow": {
            "import_meta_graph_17": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "os.path.join(path, system + '.adv_model-' + str(suffix) + '.meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_21": {
                "variable": {
                    "value": "self.disc_in_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_23": {
                "variable": {
                    "value": "self.disc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_25": {
                "variable": {
                    "value": "self.gen_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_84": {
                "variable": {
                    "value": "i0",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "while_loop_89": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "cond": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda i, m: i < n_batches",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda i, m: [i + 1, tf.concat([m, self.gen_out], axis=0)]",
                            "Lambda"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[i0, m0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[i0.get_shape(), tf.TensorShape([None, None])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_88": {
                "values": {
                    "value": "[m, self.gen_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorShape_91": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "avatar/util/MHGAN.py": {
        "tensorflow": {
            "placeholder_23": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "total_count",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "k_count",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.real_output_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "real_output_tensor",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.fake_output_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fake_output_tensor",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c * k,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([self.real_output_tensor, self.fake_output_tensor], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.c, self.k + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_22": {
                "name": {
                    "value": "MH",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_37": {
                "values": {
                    "value": "[self.real_output_tensor, self.fake_output_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}