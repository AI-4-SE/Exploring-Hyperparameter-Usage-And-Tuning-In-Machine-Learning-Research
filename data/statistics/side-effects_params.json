{
    "ddi/dataset.py": {
        "sklearn": {
            "StratifiedKFold_248": {
                "variable": {
                    "value": "skf_trte",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StratifiedShuffleSplit_250": {
                "variable": {
                    "value": "skf_trv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "valid_set_portion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "compute_class_weight_344": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                },
                "classes": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(labels, return_counts=True)",
                            "Call"
                        ],
                        [
                            "np.unique(labels_tensor, return_counts=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels_tensor.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_64": {
                "variable": {
                    "value": "X_a_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_a, X_a_gip]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "X_b_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_b, X_b_gip]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "X_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_a_comb, X_b_comb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "data_loaders[dsettype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_fold[dsettype]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_375": {
                "variable": {
                    "value": "datatensor_partitions[fold_num][class_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "compute_class_weights(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ddi/utilities.py": {
        "sklearn": {
            "f1_score_230": {
                "variable": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_target",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_233": {
                "variable": {
                    "value": "micro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_target",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_236": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_239": {
                "variable": {
                    "value": "s_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probscore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probscore",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_241": {
                "variable": {
                    "value": "(precision_scores, recall_scores, __)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "probscore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probscore",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "auc_242": {
                "variable": {
                    "value": "s_aupr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(ref_target, probscore)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "precision_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(ref_target, probscore)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_244": {
                "variable": {
                    "value": "s_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "recall_score_246": {
                "variable": {
                    "value": "s_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_score_247": {
                "variable": {
                    "value": "s_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_256": {
                "variable": {
                    "value": "(pr, rec, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "prob_poslabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_poslabel",
                            "Method Argument"
                        ],
                        [
                            "prob_poslabel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_precision_score_257": {
                "variable": {
                    "value": "avg_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "prob_poslabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_poslabel",
                            "Method Argument"
                        ],
                        [
                            "prob_poslabel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_curve_270": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "prob_poslabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_poslabel",
                            "Method Argument"
                        ],
                        [
                            "prob_poslabel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "classification_report_228": {
                "y_true": {
                    "value": "ref_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ],
                        [
                            "ref_target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_target",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "is_available_186": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_136": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda', i)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_191": {
                "type": {
                    "value": "target_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(index)",
                            "Call"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_196": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_127": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(file_name, map_location=device)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_200": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(num_metrics)",
                            "Call"
                        ],
                        [
                            "i in range(n_gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "memory_allocated_208": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda', i)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_memory_allocated_209": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda', i)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "memory_cached_210": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda', i)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_memory_cached_211": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda', i)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_device_properties_207": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda', i)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_device_name_199": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(num_metrics)",
                            "Call"
                        ],
                        [
                            "i in range(n_gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ddi/losses.py": {
        "torch": {
            "mean_30": {
                "variable": {
                    "value": "loss_contrastive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repel + attract",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "loss_contrastive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repel + attract",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_24": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "loss_contrastive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repel + attract",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_56": {
                "input": {
                    "value": "sim - margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "loss_contrastive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repel + attract",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_23": {
                "input": {
                    "value": "torch.clamp(margin - dist, min=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_23": {
                "input": {
                    "value": "margin - dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ddi/model.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1096",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "D_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_12": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ddi/model_attn.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_16": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_31": {
                "variable": {
                    "value": "attn_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_q_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_q / self.embed_size ** (1 / 4)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X_k_scaled.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_36": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(attn_w)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wv(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.multihead_pipeline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[SH_SelfAttention(input_size) for i in range(num_attn_heads)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.Wz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_attn_heads * embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_embed_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_82": {
                "variable": {
                    "value": "self.layernorm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_embed_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_size, embed_size * mlp_embed_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_90": {
                "variable": {
                    "value": "self.layernorm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_embed_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_92": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pdropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pdropout",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.queryv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(input_dim, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_122": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.Wembed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_embed_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.trfunit_pipeline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trfunit_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.Wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_embed_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_174": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_embed_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_size * mlp_embed_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "embed_size * mlp_embed_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_embed_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "randn_121": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ddi/model_attn_siamese.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.Wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.Wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.Wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_16": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_31": {
                "variable": {
                    "value": "attn_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_q_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_q / self.embed_size ** (1 / 4)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X_k_scaled.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_36": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_w_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(attn_w)",
                            "Call"
                        ],
                        [
                            "SH_layer(X)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Wv(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.multihead_pipeline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[SH_SelfAttention(input_size) for i in range(num_attn_heads)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.Wz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_attn_heads * embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_69": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([Z_a, Z_b, dist], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_85": {
                "variable": {
                    "value": "self.layernorm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(embed_size, embed_size * mlp_embed_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_93": {
                "variable": {
                    "value": "self.layernorm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_95": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pdropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pdropout",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ],
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.queryv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(input_dim, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_125": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.Wembed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ]
                    ]
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.trfunit_pipeline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "trfunit_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[TransformerUnit(embed_size, num_attn_heads, mlp_embed_factor, nonlin_func, pdropout) for i in range(num_transformer_units)]",
                            "ListComp"
                        ],
                        [
                            "[TransformerUnit(embed_size, num_attn_heads, mlp_embed_factor, nonlin_func, pdropout) for i in range(num_transformer_units)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "self.Wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * input_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_236": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Z_a, Z_b, dist]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_268": {
                "variable": {
                    "value": "self.Wembed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ],
                        [
                            "586",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "self.trfunit_pipeline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trfunit_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.Wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_281": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PairwiseDistance_225": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_size * mlp_embed_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "embed_size * mlp_embed_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "variable"
                        ]
                    ]
                }
            },
            "randn_124": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PairwiseDistance_228": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CosineSimilarity_231": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ddi/run_workflow.py": {
        "torch": {
            "BCEWithLogitsLoss_189": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_weights['train'][1].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1]).type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "class_weights['train'].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1] * 2).type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "class_weights['train'].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1] * 2).type(fdtype).to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NLLLoss_190": {
                "variable": {
                    "value": "loss_nlll",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_weights['train'][1].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1]).type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "class_weights['train'].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1] * 2).type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "class_weights['train'].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1] * 2).type(fdtype).to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sigmoid_248": {
                "variable": {
                    "value": "sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_367": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_weights['train'][1].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1]).type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "class_weights['train'].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1] * 2).type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "class_weights['train'].type(fdtype).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1] * 2).type(fdtype).to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_227": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "models_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(ddi_model.parameters())",
                            "Call"
                        ],
                        [
                            "list(ddi_model.parameters()) + list(ddi_siamese.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "options.get('weight_decay', 0.001)",
                            "Call"
                        ],
                        [
                            "options.get('weight_decay', 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CyclicLR_236": {
                "variable": {
                    "value": "cyc_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(models_param, weight_decay=weight_decay, lr=0.001)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(models_param, weight_decay=weight_decay, lr=base_lr)",
                            "Call"
                        ]
                    ]
                },
                "base_lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "max_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 * base_lr",
                            "BinOp"
                        ],
                        [
                            "5 * base_lr",
                            "BinOp"
                        ]
                    ]
                },
                "step_size_up": {
                    "value": "c_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(2 * num_iter))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(5 * num_iter))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "triangular",
                    "type": "str",
                    "possible_values": []
                },
                "cycle_momentum": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_418": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "models_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(ddi_model.parameters())",
                            "Call"
                        ],
                        [
                            "list(ddi_model.parameters()) + list(ddi_siamese.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "options.get('weight_decay', 0.001)",
                            "Call"
                        ],
                        [
                            "options.get('weight_decay', 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                }
            },
            "CyclicLR_419": {
                "variable": {
                    "value": "cyc_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(models_param, weight_decay=weight_decay, lr=0.001)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(models_param, weight_decay=weight_decay, lr=base_lr)",
                            "Call"
                        ]
                    ]
                },
                "base_lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "float"
                        ],
                        [
                            "0.0003",
                            "float"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "max_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 * base_lr",
                            "BinOp"
                        ],
                        [
                            "5 * base_lr",
                            "BinOp"
                        ]
                    ]
                },
                "step_size_up": {
                    "value": "c_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(2 * num_iter))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(5 * num_iter))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "triangular",
                    "type": "str",
                    "possible_values": []
                },
                "cycle_momentum": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_219": {
                "f": {
                    "value": "os.path.join(state_dict_dir, '{}.pkl'.format(m_name))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(to_gpu, gpu_index)",
                            "Call"
                        ],
                        [
                            "get_device(to_gpu, gpu_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_276": {
                "variable": {
                    "value": "X_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(X_batch, 1)",
                            "Call"
                        ],
                        [
                            "X_batch.to(device)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_398": {
                "f": {
                    "value": "os.path.join(state_dict_dir, '{}.pkl'.format(m_name))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(to_gpu, gpu_index)",
                            "Call"
                        ],
                        [
                            "get_device(to_gpu, gpu_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_488": {
                "variable": {
                    "value": "(__, y_pred_clss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logsoftmax_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ddi_model(X_batch)",
                            "Call"
                        ],
                        [
                            "ddi_siamese(z_a, z_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_490": {
                "variable": {
                    "value": "y_pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsoftmax_scores.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_570": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_281": {
                "mode": {
                    "value": "dsettype == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "y_pred_clss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_pred_prob.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_device(to_gpu, gpu_index)",
                            "Call"
                        ],
                        [
                            "get_device(to_gpu, gpu_index)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_471": {
                "mode": {
                    "value": "dsettype == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_298": {
                "variable": {
                    "value": "(__, y_pred_clss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logsoftmax_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ddi_model(X_batch)",
                            "Call"
                        ],
                        [
                            "ddi_siamese(z_a, z_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_299": {
                "variable": {
                    "value": "y_pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsoftmax_scores.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_337": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(m_state_dict_dir, '{}.pkl'.format(m_name))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_524": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(m_state_dict_dir, '{}.pkl'.format(m_name))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}