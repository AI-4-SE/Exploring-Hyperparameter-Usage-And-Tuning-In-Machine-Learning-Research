{
    "CVP_MVSNet/fusion/preprocess.py": {
        "tensorflow": {
            "split_240": {
                "variable": {
                    "value": "cluster_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CVP_MVSNet/dataset/dtu_jiayu.py": {
        "torch": {}
    },
    "CVP_MVSNet/eval.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtu_jiayu.MVSDataset(args, logger)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "args.eval_shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.loadckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CVP_MVSNet/models/modules.py": {
        "torch": {
            "range_57": {
                "variable": {
                    "value": "depth_hypos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "depth_min[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "depth_max[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "depth_interval_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_range / (nhypothesis_init - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "depth_hypos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_99": {
                "variable": {
                    "value": "warped_src_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid.view(batch, num_depth * height, width, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_318": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p * depth_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_322": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_volume * depth_hypothesis",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "intrinsics_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "permute_42": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "depth_hypos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(depth_hypos, torch.range(depth_min[0], depth_max[0], depth_interval_mean).unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "src_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_in",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "src_ex[:, 0:3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "ref_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_in",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_ex[:, 0:3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0, 0, 0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "src_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_proj, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "ref_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_proj, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(src_in, src_ex[:, 0:3, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((src_proj, last), 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_in[:, src, :, :], src_ex[:, src, 0:3, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((src_proj, last), 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.inverse(ref_proj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_84": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(0, height, dtype=torch.float32, device=src_feature.device), torch.arange(0, width, dtype=torch.float32, device=src_feature.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, torch.ones_like(x))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((x, y, torch.ones_like(x)))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(xyz, 0).repeat(batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack((x, y, torch.ones_like(x)))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(xyz, 0).repeat(batch, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "rot_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj[:, :3, :3]",
                            "Subscript"
                        ],
                        [
                            "proj[:, :3, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((x, y, torch.ones_like(x)))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(xyz, 0).repeat(batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack((x, y, torch.ones_like(x)))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(xyz, 0).repeat(batch, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_96": {
                "variable": {
                    "value": "proj_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj_x_normalized, proj_y_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "depth_interval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[6.8085] * nBatch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grid_sample_239": {
                "variable": {
                    "value": "warped_src_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_feature[src][level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid.view(batch, num_depth * height, width, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_261": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_271": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_280": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_281": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_290": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_291": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "meshgrid_136": {
                "variable": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(0, width).cuda(), torch.arange(0, height).cuda()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xxx, yyy, torch.ones_like(xxx)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "variable": {
                    "value": "D1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_depths[batch, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "D1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_148": {
                "variable": {
                    "value": "ray1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(ref_intrinsics[batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray1, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1 / X1_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "ray2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(ref_intrinsics[batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray2, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X2)",
                            "Call"
                        ],
                        [
                            "X2[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X2)",
                            "Call"
                        ],
                        [
                            "X2 / X2_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ray1, torch.ones_like(xxx).unsqueeze(0).double()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(ref_extrinsics[batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray1, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1 / X1_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ray2, torch.ones_like(xxx).unsqueeze(0).double()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(ref_extrinsics[batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray2, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X2)",
                            "Call"
                        ],
                        [
                            "X2[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X2)",
                            "Call"
                        ],
                        [
                            "X2 / X2_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_156": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_extrinsics[batch][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray1, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1 / X1_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_extrinsics[batch][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray2, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X2)",
                            "Call"
                        ],
                        [
                            "X2[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X2)",
                            "Call"
                        ],
                        [
                            "X2 / X2_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_intrinsics[batch][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray1, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1 / X1_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_165": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_intrinsics[batch][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray2, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X2)",
                            "Call"
                        ],
                        [
                            "X2[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X2)",
                            "Call"
                        ],
                        [
                            "X2 / X2_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "atan_172": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X2[1] - X1[1]) / (X2[0] - X1[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_intrinsics[batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_extrinsics[batch][:3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_intrinsics[batch][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "src_extrinsics[batch][0, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(ref_intrinsics[batch], ref_extrinsics[batch][:3, :3])",
                            "Call"
                        ],
                        [
                            "torch.matmul(A, torch.inverse(tmp))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.inverse(tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(ref_intrinsics[batch], ref_extrinsics[batch][:3, :3])",
                            "Call"
                        ],
                        [
                            "torch.matmul(A, torch.inverse(tmp))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X1 + torch.stack([torch.cos(theta) * pixel_interval, torch.sin(theta) * pixel_interval, torch.zeros_like(X1[2, :])], dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_184": {
                "variable": {
                    "value": "ans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(M1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "M2.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_187": {
                "variable": {
                    "value": "interval_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ans[:, 0, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_187": {
                "variable": {
                    "value": "interval_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_187": {
                "variable": {
                    "value": "interval_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_213": {
                "variable": {
                    "value": "src_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_in[:, src, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "src_ex[:, src, 0:3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_214": {
                "variable": {
                    "value": "ref_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_in",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "ref_ex[:, 0:3, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0, 0, 0, 1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "src_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_proj, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "ref_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_proj, last)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_219": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(src_in, src_ex[:, 0:3, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((src_proj, last), 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_in[:, src, :, :], src_ex[:, src, 0:3, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((src_proj, last), 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.inverse(ref_proj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_223": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(0, height, dtype=torch.float32, device=ref_feature.device), torch.arange(0, width, dtype=torch.float32, device=ref_feature.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_227": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, torch.ones_like(x))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_228": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((x, y, torch.ones_like(x)))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(xyz, 0).repeat(batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack((x, y, torch.ones_like(x)))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(xyz, 0).repeat(batch, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_229": {
                "variable": {
                    "value": "rot_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj[:, :3, :3]",
                            "Subscript"
                        ],
                        [
                            "proj[:, :3, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((x, y, torch.ones_like(x)))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(xyz, 0).repeat(batch, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack((x, y, torch.ones_like(x)))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(xyz, 0).repeat(batch, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_236": {
                "variable": {
                    "value": "proj_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj_x_normalized, proj_y_normalized)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_264": {
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_284": {
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "inverse_80": {
                "input": {
                    "value": "ref_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(ref_in, ref_ex[:, 0:3, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((ref_proj, last), 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ref_in, ref_ex[:, 0:3, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((ref_proj, last), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_62": {
                "start": {
                    "value": "depth_min[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "depth_max[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "depth_interval_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth_range / (nhypothesis_init - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_62": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_84": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_depths.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_feature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_85": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_depths.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_feature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_148": {
                "input": {
                    "value": "ref_intrinsics[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_149": {
                "input": {
                    "value": "ref_intrinsics[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_152": {
                "input": {
                    "value": "ref_extrinsics[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_154": {
                "input": {
                    "value": "ref_extrinsics[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_173": {
                "tensors": {
                    "value": "[torch.cos(theta) * pixel_interval, torch.sin(theta) * pixel_interval, torch.zeros_like(X1[2, :])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_177": {
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(src_intrinsics[batch][0], src_extrinsics[batch][0, :3, :3])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_179": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(ref_intrinsics[batch], ref_extrinsics[batch][:3, :3])",
                            "Call"
                        ],
                        [
                            "torch.matmul(A, torch.inverse(tmp))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X * D1",
                            "BinOp"
                        ],
                        [
                            "torch.cat([ray1, torch.ones_like(xxx).unsqueeze(0).double()], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.inverse(ref_extrinsics[batch]), X1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(src_extrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1[:3]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(src_intrinsics[batch][0], X1)",
                            "Call"
                        ],
                        [
                            "X1 / X1_d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "[X.t().unsqueeze(2), tmp2.t().unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_184": {
                "input": {
                    "value": "M1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X.t().unsqueeze(2), tmp2.t().unsqueeze(2)], axis=2)[:, 1:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "inverse_219": {
                "input": {
                    "value": "ref_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(ref_in, ref_ex[:, 0:3, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((ref_proj, last), 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(ref_in, ref_ex[:, 0:3, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((ref_proj, last), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_136": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_depths.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_141": {
                "input": {
                    "value": "xxx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xx.reshape([-1]).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_151": {
                "input": {
                    "value": "xxx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xx.reshape([-1]).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_151": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_153": {
                "input": {
                    "value": "xxx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xx.reshape([-1]).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_153": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_223": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_depths.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ref_feature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_224": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_depths.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ref_feature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_227": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_173": {
                "input": {
                    "value": "X1[2, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_173": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan(k)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_173": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan(k)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CVP_MVSNet/models/net.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(64, 32, kernel_size=3, padding=1, output_padding=0, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(32, 16, kernel_size=3, padding=1, output_padding=1, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_69": {
                "variable": {
                    "value": "self.prob0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "src_in_multiscales",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "src_in_multiscales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(src_in_multiscales).permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_110": {
                "variable": {
                    "value": "src_in_multiscales",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_38": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(img, scale_factor=0.5, mode='bilinear', align_corners=None).detach()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "interpolate_154": {
                "variable": {
                    "value": "depth_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "gather_179": {
                "variable": {
                    "value": "prob_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_volume_sum4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * F.avg_pool3d(F.pad(prob_volume.unsqueeze(1), pad=(0, 0, 0, 0, 1, 2)), (4, 1, 1), stride=1, padding=0).squeeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "depth_index.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "prob_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_60": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_61": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_65": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_66": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_178": {
                "start": {
                    "value": "num_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_volume.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "prob_volume.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CVP_MVSNet/train.py": {
        "torch": {
            "DataLoader_70": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtu_jiayu.MVSDataset(args, logger)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "loadckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(sw_path, saved_models[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_117": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, betas=(0.9, 0.999), weight_decay=args.wd)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(epoch_idx) for epoch_idx in args.lrepochs.split(':')[0].split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / float(args.lrepochs.split(':')[1])",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_106": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.loadckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "{'epoch': epoch_idx, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/model_{:0>6}.ckpt'.format(args.logckptdir + args.info.replace(' ', '_'), epoch_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CVP_MVSNet/utils.py": {
        "torch": {
            "tensor_35": {
                "data": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}