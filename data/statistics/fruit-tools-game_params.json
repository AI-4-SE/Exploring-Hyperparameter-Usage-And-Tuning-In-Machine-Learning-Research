{
    "test_utils.py": {
        "sklearn": {
            "PCA_394": {
                "variable": {
                    "value": "Z_pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_459": {
                "variable": {
                    "value": "Z_pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "all_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fvectors, t1vectors, t2vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "tools_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t1vectors, t2vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "conv_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(T, n_samples, n_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "conversations.device",
                            "Attribute"
                        ],
                        [
                            "agent_state.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "fruits_properties.device",
                            "Attribute"
                        ],
                        [
                            "kl_12mat.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_102": {
                "variable": {
                    "value": "max_turn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_turns_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_turns[:, None].repeat(1, n_samples)",
                            "Call"
                        ],
                        [
                            "n_turns_2d.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "log_pzAj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choicesA.shape[0]",
                            "Subscript"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "J",
                            "Method Argument"
                        ],
                        [
                            "J",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "conversations.device",
                            "Attribute"
                        ],
                        [
                            "agent_state.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "fruits_properties.device",
                            "Attribute"
                        ],
                        [
                            "kl_12mat.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_253": {
                "variable": {
                    "value": "KL",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": [
                        [
                            "J",
                            "Method Argument"
                        ],
                        [
                            "J",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_315": {
                "variable": {
                    "value": "flabels",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_comp,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fruit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_flabels[f]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "conversations.device",
                            "Attribute"
                        ],
                        [
                            "agent_state.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "fruits_properties.device",
                            "Attribute"
                        ],
                        [
                            "kl_12mat.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "variable": {
                    "value": "tvectors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(opt.n_tools, n_comp, tool_feat_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "conversations.device",
                            "Attribute"
                        ],
                        [
                            "agent_state.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "fruits_properties.device",
                            "Attribute"
                        ],
                        [
                            "kl_12mat.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "tlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(opt.n_tools, n_comp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "conversations.device",
                            "Attribute"
                        ],
                        [
                            "agent_state.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "fruits_properties.device",
                            "Attribute"
                        ],
                        [
                            "kl_12mat.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "array_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kl_12mat[:, 1], kl_21mat[:, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "array_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[kl_12mat[:, 0], kl_21mat[:, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_344": {
                "variable": {
                    "value": "array_ab",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[kl_12mat[0, 0], kl_21mat[0, 1], kl_21mat[1, 0], kl_12mat[1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_346": {
                "variable": {
                    "value": "array_ba",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[kl_21mat[0, 0], kl_12mat[0, 1], kl_12mat[1, 0], kl_21mat[1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_359": {
                "variable": {
                    "value": "ulabels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_360": {
                "variable": {
                    "value": "agreed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "steps_agree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps_agree",
                            "Method Argument"
                        ],
                        [
                            "steps_agree",
                            "Method Argument"
                        ],
                        [
                            "steps_agree",
                            "Method Argument"
                        ],
                        [
                            "steps_agree",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_436": {
                "variable": {
                    "value": "ulabels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_437": {
                "variable": {
                    "value": "agreed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "steps_agree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps_agree",
                            "Method Argument"
                        ],
                        [
                            "steps_agree",
                            "Method Argument"
                        ],
                        [
                            "steps_agree",
                            "Method Argument"
                        ],
                        [
                            "steps_agree",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_493": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "messageB.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "messageB.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_542": {
                "variable": {
                    "value": "conversations",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(top_length, opt.max_length, N, opt.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "conversations.device",
                            "Attribute"
                        ],
                        [
                            "agent_state.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "fruits_properties.device",
                            "Attribute"
                        ],
                        [
                            "kl_12mat.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "log_pzAl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choicesA.shape[0]",
                            "Subscript"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "J",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "conversations.device",
                            "Attribute"
                        ],
                        [
                            "agent_state.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "iA.device",
                            "Attribute"
                        ],
                        [
                            "fruits_properties.device",
                            "Attribute"
                        ],
                        [
                            "kl_12mat.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "logsumexp_236": {
                "input": {
                    "value": "log_pzAj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(K, J, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_275": {
                "input": {
                    "value": "log_pzAl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(K, L, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_34": {
                "data": {
                    "value": "dlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dlabels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_382": {
                "variable": {
                    "value": "z_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_t, z_lv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[idx, idx_lv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "rec_symb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rec_symb, symb_lv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_374": {
                "*size": {
                    "value": "idx_lv.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "architectures.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "parsed_input_size + features_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "features_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features_size",
                            "Method Argument"
                        ],
                        [
                            "features_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "cat_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_emb, com_emb, prev_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin(cat_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "dummy_message",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "speaker.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "speaker.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.speaker.rnn_h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.embeddingTable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RNN_123": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_127": {
                "variable": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_x(x_t) + self.lin_h(h_tm1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm_tm1.shape[1]",
                            "Subscript"
                        ],
                        [
                            "received_message.size(1)",
                            "Call"
                        ],
                        [
                            "received_message.size(1)",
                            "Call"
                        ],
                        [
                            "z.size(0)",
                            "Call"
                        ],
                        [
                            "z.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.rnn_h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm_tm1.device",
                            "Attribute"
                        ],
                        [
                            "received_message.device",
                            "Attribute"
                        ],
                        [
                            "received_message.device",
                            "Attribute"
                        ],
                        [
                            "z.device",
                            "Attribute"
                        ],
                        [
                            "z.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "im_features_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_features_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "im_embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_171": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tool_features_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tool_features_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "per_tool_embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(tool_embedding_size / n_tools)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_184": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin(x[0, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.lin_tool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "features_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features_size",
                            "Method Argument"
                        ],
                        [
                            "features_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_choices",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_203": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_proba_no_sft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin_tool(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "proposal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sh, prop_choice.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.embeddingTable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RNN_223": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_h_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_h_size",
                            "Method Argument"
                        ],
                        [
                            "rnn_h_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_238": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_no_sft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "sentences",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[samp_symb.unsqueeze(0)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_282": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_no_sft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_187": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin(x[t, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, out2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_205": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(prop_proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_240": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(prop_proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_257": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_no_sft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_294": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba_no_sft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ],
                        [
                            "self.lin(hidden.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_210": {
                "*size": {
                    "value": "z.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm_tm1.device",
                            "Attribute"
                        ],
                        [
                            "received_message.device",
                            "Attribute"
                        ],
                        [
                            "received_message.device",
                            "Attribute"
                        ],
                        [
                            "z.device",
                            "Attribute"
                        ],
                        [
                            "z.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Categorical_259": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(prop_proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(proba_no_sft, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "semantical_analysis.py": {
        "torch": {
            "zeros_like_18": {
                "variable": {
                    "value": "swapped_convers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers.device",
                            "Attribute"
                        ],
                        [
                            "f_labels.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "lookup.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_266": {
                "variable": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itertools.product(range(n_f), range(n_t), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "list(itertools.product(range(n_f), range(n_t), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "lookup",
                            "Method Argument"
                        ],
                        [
                            "lookup",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers.device",
                            "Attribute"
                        ],
                        [
                            "f_labels.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "lookup.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_268": {
                "variable": {
                    "value": "lookup_ftool",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lookup_ftool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itertools.product(range(n_f), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup_ftool, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "list(itertools.product(range(n_f), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup_ftool, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "lookup_ftool",
                            "Method Argument"
                        ],
                        [
                            "lookup_ftool",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers.device",
                            "Attribute"
                        ],
                        [
                            "f_labels.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "lookup.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_270": {
                "variable": {
                    "value": "lookup_tools",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lookup_tools",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itertools.product(range(n_t), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup_tools, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "list(itertools.product(range(n_t), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup_tools, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "lookup_tools",
                            "Method Argument"
                        ],
                        [
                            "lookup_tools",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers.device",
                            "Attribute"
                        ],
                        [
                            "f_labels.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "lookup.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_313": {
                "variable": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itertools.product(range(n_f), range(n_t), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "list(itertools.product(range(n_f), range(n_t), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "lookup",
                            "Method Argument"
                        ],
                        [
                            "lookup",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers.device",
                            "Attribute"
                        ],
                        [
                            "f_labels.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "lookup.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_315": {
                "variable": {
                    "value": "lookup_ftool",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lookup_ftool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itertools.product(range(n_f), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup_ftool, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "list(itertools.product(range(n_f), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup_ftool, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "lookup_ftool",
                            "Method Argument"
                        ],
                        [
                            "lookup_ftool",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers.device",
                            "Attribute"
                        ],
                        [
                            "f_labels.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "lookup.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_317": {
                "variable": {
                    "value": "lookup_tools",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lookup_tools",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(itertools.product(range(n_t), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup_tools, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "list(itertools.product(range(n_t), range(n_t)))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(lookup_tools, dtype=torch.long, device=device)",
                            "Call"
                        ],
                        [
                            "lookup_tools",
                            "Method Argument"
                        ],
                        [
                            "lookup_tools",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers.device",
                            "Attribute"
                        ],
                        [
                            "f_labels.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "lookup.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_366": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(data)",
                            "Call"
                        ],
                        [
                            "classifier(data)",
                            "Call"
                        ],
                        [
                            "self.lin_ft1t2(input)",
                            "Call"
                        ],
                        [
                            "self.lin_ft(input)",
                            "Call"
                        ],
                        [
                            "self.lin_t(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_477": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_classif_dataset_simple(opt, f_labels, t_labels, t1_labels, t2_labels, n_f, n_t, dataset_seed=dataset_seed)",
                            "Call"
                        ],
                        [
                            "np.unique(idx_train)",
                            "Call"
                        ],
                        [
                            "train_idx",
                            "Method Argument"
                        ],
                        [
                            "train_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_478": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_classif_dataset_simple(opt, f_labels, t_labels, t1_labels, t2_labels, n_f, n_t, dataset_seed=dataset_seed)",
                            "Call"
                        ],
                        [
                            "np.unique(idx_train)",
                            "Call"
                        ],
                        [
                            "train_idx",
                            "Method Argument"
                        ],
                        [
                            "train_idx",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_480": {
                "variable": {
                    "value": "crit_ft1t2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_481": {
                "variable": {
                    "value": "crit_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_482": {
                "variable": {
                    "value": "crit_t1t2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_483": {
                "variable": {
                    "value": "crit_f",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_484": {
                "variable": {
                    "value": "crit_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_485": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "as_tensor_619": {
                "variable": {
                    "value": "conv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.unique(whole_conv, axis=2, return_counts=True, return_inverse=True)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(conv_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_622": {
                "variable": {
                    "value": "f_perf_per_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_623": {
                "variable": {
                    "value": "t1_perf_per_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_624": {
                "variable": {
                    "value": "t2_perf_per_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_625": {
                "variable": {
                    "value": "ft1t2_perf_per_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_626": {
                "variable": {
                    "value": "conv_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "classes.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_658": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, steps_agree.shape[0], classifier.rnn_h_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convers.device",
                            "Attribute"
                        ],
                        [
                            "f_labels.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ],
                        [
                            "lookup.device",
                            "Attribute"
                        ],
                        [
                            "conversA.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.embeddingTable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RNN_61": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.lin_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.data_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(fruits_names)",
                            "Call"
                        ],
                        [
                            "out_f.shape[1]",
                            "Subscript"
                        ],
                        [
                            "n_f",
                            "Method Argument"
                        ],
                        [
                            "n_f",
                            "Method Argument"
                        ],
                        [
                            "n_f",
                            "Method Argument"
                        ],
                        [
                            "n_f",
                            "Method Argument"
                        ],
                        [
                            "n_f",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.lin_t1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.data_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tools_names)",
                            "Call"
                        ],
                        [
                            "out_t1.shape[1]",
                            "Subscript"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.lin_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.data_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tools_names)",
                            "Call"
                        ],
                        [
                            "out_t1.shape[1]",
                            "Subscript"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ],
                        [
                            "n_t",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.lin_ft1t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_f + n_t + n_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_f * n_t * n_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.lin_ft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_f + n_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_f * n_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.lin_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_t + n_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_t * n_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_160": {
                "seed": {
                    "value": "dataset_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_seed",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_463": {
                "seed": {
                    "value": "train_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "train_seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_f, out_t1, out_t2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_163": {
                "seed": {
                    "value": "dataset_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_seed",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_466": {
                "seed": {
                    "value": "train_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "train_seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dot_641": {
                "input": {
                    "value": "conv_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(classes.size(0))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_perf_per_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(classes.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_642": {
                "input": {
                    "value": "conv_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(classes.size(0))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "t1_perf_per_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(classes.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_643": {
                "input": {
                    "value": "conv_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(classes.size(0))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "t2_perf_per_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(classes.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_644": {
                "input": {
                    "value": "conv_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(classes.size(0))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ft1t2_perf_per_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(classes.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_f, out_t1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_562": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(data)",
                            "Call"
                        ],
                        [
                            "classifier(data)",
                            "Call"
                        ],
                        [
                            "self.lin_ft1t2(input)",
                            "Call"
                        ],
                        [
                            "self.lin_ft(input)",
                            "Call"
                        ],
                        [
                            "self.lin_t(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_565": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(data)",
                            "Call"
                        ],
                        [
                            "classifier(data)",
                            "Call"
                        ],
                        [
                            "self.lin_ft1t2(input)",
                            "Call"
                        ],
                        [
                            "self.lin_ft(input)",
                            "Call"
                        ],
                        [
                            "self.lin_t(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_114": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_t1, out_t2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "full_79": {
                "variable": {
                    "value": "utterancesA",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(opt.T, opt.max_length, batch_size, opt.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_81": {
                "variable": {
                    "value": "utterancesB",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(opt.T, opt.max_length, batch_size, opt.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "doneA",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "doneB",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "steps_agree",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_132": {
                "variable": {
                    "value": "no_doneB",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "kl_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "kl_BA",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "kl_AB_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "kl_AB_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "kl_BA_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "kl_BA_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "batch_kl_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "batch_kl_BA",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "count_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "count_kl_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "count_kl_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_249": {
                "variable": {
                    "value": "one_is_F_array",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "one_is_F_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(opt.data_dir + '/%s_one_is_F' % test_suffix, 'rb'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(one_is_F_array, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_250": {
                "variable": {
                    "value": "start_F_array",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "start_F_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(opt.data_dir + '/%s_start_F' % test_suffix, 'rb'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(start_F_array, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_264": {
                "variable": {
                    "value": "tools_samp3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tools_samp3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/%s_tsamp_%f.npy' % (opt.data_dir, type, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tools_samp3D, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "tools_samp3D.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_265": {
                "variable": {
                    "value": "tools_labels3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tools_labels3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/%s_tsamp_labels_%f.npy' % (opt.data_dir, type, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tools_labels3D, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "tools_labels3D.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_270": {
                "variable": {
                    "value": "fruits_samp3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fruits_samp3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/%s_fsamp_%f.npy' % (opt.data_dir, type, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(fruits_samp3D, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "fruits_samp3D.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_271": {
                "variable": {
                    "value": "fruits_labels3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fruits_labels3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/%s_fsamp_labels_%f.npy' % (opt.data_dir, type, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(fruits_labels3D, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "fruits_labels3D.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_279": {
                "variable": {
                    "value": "tools_properties",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tools_properties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/tools_properties.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tools_properties, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "tools_properties.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_281": {
                "variable": {
                    "value": "fruits_properties",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fruits_properties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/fruits_properties.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(fruits_properties, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "fruits_properties.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_283": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/M.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(M, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "M.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_284": {
                "variable": {
                    "value": "M_fruit",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "M_fruit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/M_fruit.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(M_fruit, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "M_fruit.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_285": {
                "variable": {
                    "value": "M_tool",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "M_tool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/M_tool.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(M_tool, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "M_tool.to(device)",
                            "Call"
                        ],
                        [
                            "M_tool",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_382": {
                "variable": {
                    "value": "kl_12mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "kl_21mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "kl_12_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_385": {
                "variable": {
                    "value": "kl_21_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_386": {
                "variable": {
                    "value": "kl_12_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_387": {
                "variable": {
                    "value": "kl_21_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_395": {
                "variable": {
                    "value": "symbols1F",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, opt.T, n_all_fruits, opt.max_length, opt.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_397": {
                "variable": {
                    "value": "symbols1T",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, opt.T, n_all_tools, opt.max_length, opt.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_399": {
                "variable": {
                    "value": "symbols2F",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, opt.T, n_all_fruits, opt.max_length, opt.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_401": {
                "variable": {
                    "value": "symbols2T",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, opt.T, n_all_tools, opt.max_length, opt.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_403": {
                "variable": {
                    "value": "sum_n_f",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_all_fruits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(fruits_names)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_404": {
                "variable": {
                    "value": "per_f_r",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_all_fruits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(fruits_names)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_405": {
                "variable": {
                    "value": "per_f_perc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_all_fruits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(fruits_names)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fvectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "tools_properties.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "dot_571": {
                "variable": {
                    "value": "n_11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_F_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(opt.data_dir + '/%s_start_F' % test_suffix, 'rb'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(start_F_array, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "one_is_F_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(opt.data_dir + '/%s_one_is_F' % test_suffix, 'rb'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(one_is_F_array, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_572": {
                "variable": {
                    "value": "n_10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_F_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(opt.data_dir + '/%s_start_F' % test_suffix, 'rb'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(start_F_array, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - one_is_F_array",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_573": {
                "variable": {
                    "value": "n_01",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - start_F_array",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "one_is_F_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(open(opt.data_dir + '/%s_one_is_F' % test_suffix, 'rb'))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(one_is_F_array, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_574": {
                "variable": {
                    "value": "n_00",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - start_F_array",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - one_is_F_array",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_575": {
                "variable": {
                    "value": "pairs_n",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[n_00, n_01], [n_10, n_11]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "tensor_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "tensor_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_300": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_412": {
                "seed": {
                    "value": "test_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_seed in enumerate(test_seeds)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_536": {
                "variable": {
                    "value": "batch_one_is_F",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(fvectors.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "one_is_F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(one_is_F_array[e])",
                            "Call"
                        ],
                        [
                            "one_is_F",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_537": {
                "variable": {
                    "value": "batch_start_F",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(fvectors.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "start_F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bool(start_F_array[e])",
                            "Call"
                        ],
                        [
                            "start_F",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_671": {
                "variable": {
                    "value": "new_tlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_t1labels[None, :], new_t2labels[None, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_126": {
                "input": {
                    "value": "pchoiceB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pchoice0",
                            "variable"
                        ]
                    ]
                }
            },
            "log_127": {
                "input": {
                    "value": "pmessageB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmessage0",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_all_415": {
                "seed": {
                    "value": "test_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_seed in enumerate(test_seeds)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_553": {
                "variable": {
                    "value": "conversA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conversA, uttA]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "conversB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conversB, uttB]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "steps_agree",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[steps_agree, steps_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_556": {
                "variable": {
                    "value": "a_flabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a_flabels, flabels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "a_tlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a_tlabels, tlabels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_558": {
                "variable": {
                    "value": "all_percent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_percent, percent_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "all_one_is_F",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_one_is_F, batch_one_is_F]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_560": {
                "variable": {
                    "value": "all_start_F",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_start_F, batch_start_F]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_561": {
                "variable": {
                    "value": "donesA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[donesA, dones[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "donesB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[donesB, dones[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_563": {
                "variable": {
                    "value": "a_fvectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a_fvectors, fvectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_564": {
                "variable": {
                    "value": "a_tvectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a_tvectors, tvectors]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_324": {
                "f": {
                    "value": "A_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.modeldir, 'agent1_' + suffix_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_325": {
                "f": {
                    "value": "B_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.modeldir, 'agent2_' + suffix_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_327": {
                "f": {
                    "value": "A_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.modeldir, 'agent1_' + suffix_s)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_328": {
                "f": {
                    "value": "B_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.modeldir, 'agent2_' + suffix_s)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "prop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "opt.n_choices + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_42": {
                "variable": {
                    "value": "tool_choice_init",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "opt.n_choices - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device()",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_231": {
                "variable": {
                    "value": "tools_samp3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tools_samp3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/tsamp_%f.npy' % (opt.data_dir, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tools_samp3D, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "tools_samp3D.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_232": {
                "variable": {
                    "value": "tools_labels3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tools_labels3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/tsamp_labels_%f.npy' % (opt.data_dir, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tools_labels3D)",
                            "Call"
                        ],
                        [
                            "tools_labels3D.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_239": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/M.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(M, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "M.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_240": {
                "variable": {
                    "value": "M_fruit",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "M_fruit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/M_fruit.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(M_fruit, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "M_fruit.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_241": {
                "variable": {
                    "value": "M_tool",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "M_tool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/M_tool.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(M_tool, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "M_tool.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_247": {
                "variable": {
                    "value": "fruits_samp3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fruits_samp3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/fsamp_%f.npy' % (opt.data_dir, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(fruits_samp3D, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "fruits_samp3D.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_248": {
                "variable": {
                    "value": "fruits_labels3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fruits_labels3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/fsamp_labels_%f.npy' % (opt.data_dir, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(fruits_labels3D)",
                            "Call"
                        ],
                        [
                            "fruits_labels3D.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_255": {
                "variable": {
                    "value": "v_tsamp3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v_tsamp3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/val_tsamp_%f.npy' % (opt.data_dir, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(v_tsamp3D, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "v_tsamp3D.to(device)",
                            "Call"
                        ],
                        [
                            "v_tsamp3D",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_256": {
                "variable": {
                    "value": "v_tlabels3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v_tlabels3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/val_tsamp_labels_%f.npy' % (opt.data_dir, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(v_tlabels3D)",
                            "Call"
                        ],
                        [
                            "v_tlabels3D.to(device)",
                            "Call"
                        ],
                        [
                            "v_tlabels3D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_261": {
                "variable": {
                    "value": "v_fsamp3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v_fsamp3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/val_fsamp_%f.npy' % (opt.data_dir, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(v_fsamp3D, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "v_fsamp3D.to(device)",
                            "Call"
                        ],
                        [
                            "v_fsamp3D",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_262": {
                "variable": {
                    "value": "v_flabels3D",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v_flabels3D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/val_fsamp_labels_%f.npy' % (opt.data_dir, opt.variance))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(v_flabels3D)",
                            "Call"
                        ],
                        [
                            "v_flabels3D.to(device)",
                            "Call"
                        ],
                        [
                            "v_flabels3D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_284": {
                "variable": {
                    "value": "tools_properties",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tools_properties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/tools_properties.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(tools_properties, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "tools_properties.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_286": {
                "variable": {
                    "value": "fruits_properties",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fruits_properties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('%s/fruits_properties.npy' % opt.data_dir)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(fruits_properties, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "fruits_properties.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_328": {
                "variable": {
                    "value": "optimizer1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, agent1.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_329": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, agent2.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_334": {
                "variable": {
                    "value": "optimizerBSL1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "reward_function1.baseline.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_335": {
                "variable": {
                    "value": "optimizerBSL2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "reward_function2.baseline.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_367": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FruitsToolsDataset(fruits_samp3D, fruits_names3D, fruits_labels3D, in_flabels, tools_samp3D, tools_names3D, tools_labels3D, in_tlabels, opt.n_episodes, opt.n_tools, opt.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_368": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FruitsToolsDataset(fruits_samp3D, fruits_names3D, fruits_labels3D, in_flabels, tools_samp3D, tools_names3D, tools_labels3D, in_tlabels, opt.n_episodes, opt.n_tools, opt.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.SequentialSampler(train_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_289": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_353": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_474": {
                "obj": {
                    "value": "agent1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "A_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.outf, 'agent1_' + suffsave)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_476": {
                "obj": {
                    "value": "agent2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "B_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.outf, 'agent2_' + suffsave)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_186": {
                "input": {
                    "value": "pchoiceB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pchoice0",
                            "variable"
                        ]
                    ]
                }
            },
            "log_187": {
                "input": {
                    "value": "pmessageB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmessage0",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_all_356": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_98": {
                "variable": {
                    "value": "bs_message",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "proposalB[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "message.size(1)",
                            "Call"
                        ],
                        [
                            "im_vectors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "tools_labels.size(1)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(inds.size(0), depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proba_no_softmax.size(0), K)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_119": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proba_no_softmax.size(0), K)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Gumbel_120": {
                "variable": {
                    "value": "samp_gumb",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(dims, device=device)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(dims, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proba_no_softmax + g) / temp",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "fruits_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "proposalB[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "message.size(1)",
                            "Call"
                        ],
                        [
                            "im_vectors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "tools_labels.size(1)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "ffeat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_samp3D.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "flabels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "proposalB[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "message.size(1)",
                            "Call"
                        ],
                        [
                            "im_vectors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "tools_labels.size(1)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "tools_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tools",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools_prop.shape[0]",
                            "Subscript"
                        ],
                        [
                            "tools_labels.size(0)",
                            "Call"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "proposalB[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "message.size(1)",
                            "Call"
                        ],
                        [
                            "im_vectors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "tools_labels.size(1)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tfeat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools_samp3D.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "tlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tools",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools_prop.shape[0]",
                            "Subscript"
                        ],
                        [
                            "tools_labels.size(0)",
                            "Call"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ],
                        [
                            "n_tools",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "proposalB[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "message.size(1)",
                            "Call"
                        ],
                        [
                            "im_vectors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "tools_labels.size(1)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_251": {
                "variable": {
                    "value": "sharing",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_254": {
                "variable": {
                    "value": "prop_mat_fruits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fruits_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, ffeat_size, device=device)",
                            "Call"
                        ],
                        [
                            "fruits_samp3D[idx_flabels, idx_fsamples, :]",
                            "Subscript"
                        ],
                        [
                            "fruits_vectors",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "M_fruit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_function.M_fruit",
                            "Attribute"
                        ],
                        [
                            "M_fruit",
                            "Method Argument"
                        ],
                        [
                            "M_fruit",
                            "Method Argument"
                        ],
                        [
                            "M_fruit",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_255": {
                "variable": {
                    "value": "prop_mat_tools0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tools0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tool_vectors.permute(1, 2, 0)[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "M_tool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_function.M_tool",
                            "Attribute"
                        ],
                        [
                            "M_tool",
                            "Method Argument"
                        ],
                        [
                            "M_tool",
                            "Method Argument"
                        ],
                        [
                            "M_tool",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_256": {
                "variable": {
                    "value": "prop_mat_tools1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tools1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tool_vectors.permute(1, 2, 0)[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "M_tool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_function.M_tool",
                            "Attribute"
                        ],
                        [
                            "M_tool",
                            "Method Argument"
                        ],
                        [
                            "M_tool",
                            "Method Argument"
                        ],
                        [
                            "M_tool",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_258": {
                "variable": {
                    "value": "Mtooldot0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "prop_mat_tools0.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "Mtooldot0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_259": {
                "variable": {
                    "value": "Mtooldot1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "prop_mat_tools1.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_259": {
                "variable": {
                    "value": "Mtooldot1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_260": {
                "variable": {
                    "value": "rewards_both0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_mat_fruits.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Mtooldot0.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_261": {
                "variable": {
                    "value": "rewards_both1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_mat_fruits.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Mtooldot1.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_266": {
                "variable": {
                    "value": "rewards0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sharing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((batch_size, 1, 1), 0.5, device=device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rewards_both0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(prop_mat_fruits.unsqueeze(1), Mtooldot0.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "rewards_both0 / reward_mean0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_266": {
                "variable": {
                    "value": "rewards0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_267": {
                "variable": {
                    "value": "rewards1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sharing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((batch_size, 1, 1), 0.5, device=device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rewards_both1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(prop_mat_fruits.unsqueeze(1), Mtooldot1.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "rewards_both1 / reward_mean1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_267": {
                "variable": {
                    "value": "rewards1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "all_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rewards0, rewards1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "tools_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tools_vectors_1, tools_vectors_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "tlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels1, labels2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_353": {
                "variable": {
                    "value": "pcont",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pcont",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_pprop[:, -1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "logsumexp_355": {
                "variable": {
                    "value": "logpstop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pprop[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_356": {
                "variable": {
                    "value": "pstop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pprop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmask_t * log_ppropB[0][rangeb, choice]",
                            "BinOp"
                        ],
                        [
                            "log_pprop + pmask_t * log_ppropB[t][rangeb, choice]",
                            "BinOp"
                        ],
                        [
                            "log_pprop",
                            "Method Argument"
                        ],
                        [
                            "log_pprop",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_101": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(opt.vocab_size) / opt.vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "proposalB[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "message.size(1)",
                            "Call"
                        ],
                        [
                            "im_vectors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "tools_labels.size(1)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "tvectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tvectors1, tvectors2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "tlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tlabels1, tlabels2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_416": {
                "variable": {
                    "value": "prop_mat_fruits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fruits_properties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_properties",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.M_fruit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_417": {
                "variable": {
                    "value": "prop_mat_tools",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tools_properties",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools_properties",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.M_tool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_419": {
                "variable": {
                    "value": "Mtooldot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.M.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "prop_mat_tools.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_420": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_mat_fruits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(fruits_vectors, M_fruit)",
                            "Call"
                        ],
                        [
                            "torch.mm(fruits_properties, self.M_fruit)",
                            "Call"
                        ],
                        [
                            "torch.mm(im_vectors, self.M_fruit)",
                            "Call"
                        ],
                        [
                            "torch.mm(fruits_prop, self.M_fruit)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Mtooldot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(self.M.t(), prop_mat_tools.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(self.M.t(), prop_mat_tools.t()).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.mm(self.M.t(), prop_mat_tools.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_435": {
                "variable": {
                    "value": "chosen_tools_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tool_vectors.permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "tool_choice.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_435": {
                "variable": {
                    "value": "chosen_tools_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_439": {
                "variable": {
                    "value": "prop_mat_fruits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_vectors",
                            "Method Argument"
                        ],
                        [
                            "im_vectors",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.M_fruit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_440": {
                "variable": {
                    "value": "prop_mat_tools",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "chosen_tools_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(tool_vectors.permute(1, 2, 0), tool_choice.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.M_tool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_442": {
                "variable": {
                    "value": "Mtooldot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.M.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "prop_mat_tools.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_442": {
                "variable": {
                    "value": "Mtooldot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_443": {
                "variable": {
                    "value": "rewards_both",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_mat_fruits.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Mtooldot.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_449": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_share",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposal[:, 0].unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rewards_both",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(prop_mat_fruits.unsqueeze(1), Mtooldot.permute(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "rewards_both / self.complete_reward_mean[labels, :, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MSELoss_477": {
                "variable": {
                    "value": "self.baseline_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_504": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_516": {
                "variable": {
                    "value": "prop_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, self.n_tools)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multinomial_517": {
                "variable": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((batch_size, self.n_tools), 0.5, device=device)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_517": {
                "variable": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_520": {
                "variable": {
                    "value": "share",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_521": {
                "variable": {
                    "value": "proposal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[share, tool_choice]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_534": {
                "variable": {
                    "value": "prop_mat_fruits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fruits_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_prop",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.M_fruit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_535": {
                "variable": {
                    "value": "prop_mat_tools",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tools_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tools_prop",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.M_tool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_536": {
                "variable": {
                    "value": "Mtooldot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.M.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "prop_mat_tools.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_537": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prop_mat_fruits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(fruits_vectors, M_fruit)",
                            "Call"
                        ],
                        [
                            "torch.mm(fruits_properties, self.M_fruit)",
                            "Call"
                        ],
                        [
                            "torch.mm(im_vectors, self.M_fruit)",
                            "Call"
                        ],
                        [
                            "torch.mm(fruits_prop, self.M_fruit)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Mtooldot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(self.M.t(), prop_mat_tools.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(self.M.t(), prop_mat_tools.t()).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.mm(self.M.t(), prop_mat_tools.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_549": {
                "variable": {
                    "value": "overall_comp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_tools",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_tools",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_566": {
                "variable": {
                    "value": "choice",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fruits_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "proposalB[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "message.size(1)",
                            "Call"
                        ],
                        [
                            "im_vectors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im_vectors.size(0)",
                            "Call"
                        ],
                        [
                            "tools_labels.size(1)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_577": {
                "variable": {
                    "value": "share",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_578": {
                "variable": {
                    "value": "proposal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[share, tool_choice]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_92": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "opt.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_110": {
                "start": {
                    "value": "inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inds.device",
                            "Attribute"
                        ],
                        [
                            "proba_no_softmax.device",
                            "Attribute"
                        ],
                        [
                            "fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "fruits_vectors.device",
                            "Attribute"
                        ],
                        [
                            "self.fruits_samp3D.device",
                            "Attribute"
                        ],
                        [
                            "tools_labels.device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_504": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_426": {
                "input": {
                    "value": "rewards.mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}