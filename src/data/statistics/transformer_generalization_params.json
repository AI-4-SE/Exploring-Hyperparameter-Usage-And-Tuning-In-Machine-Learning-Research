{
    "dataset/scan_length_resplit.py": {
        "torch": {
            "load_62": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir, 'scan.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_53": {
                "obj": {
                    "value": "{'in_sentences': ScanLengthResplit.in_sentences, 'out_sentences': ScanLengthResplit.out_sentences, 'in_voc': ScanLengthResplit.in_vocabulary.state_dict(), 'out_voc': ScanLengthResplit.out_vocabulary.state_dict(), 'max_in_len': ScanLengthResplit.max_in_len, 'max_out_len': ScanLengthResplit.max_out_len}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "cache_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_dir, 'scan.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataset/sequence.py": {
        "torch": {
            "cross_entropy_87": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_out.flatten(end_dim=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "ref.long().flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_122": {
                "variable": {
                    "value": "prefix_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prefix_len.clamp(min=self.min_prefix_match_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "data['out_len']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_190": {
                "input": {
                    "value": "data['type']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[id]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_83": {
                "start": {
                    "value": "net_out.shape[1 - self.batch_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "net_out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_83": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_121": {
                "input": {
                    "value": "data['out_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "net_out[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "self.oks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_33": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "out.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ref.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "input": {
                    "value": "self.batch_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_126": {
                "input": {
                    "value": "~ok_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_177": {
                "input": {
                    "value": "~ok_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_177": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/text/dm_math.py": {
        "torch": {}
    },
    "dataset/text/text_dataset.py": {
        "torch": {
            "save_89": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "framework/helpers/saver.py": {
        "torch": {
            "load_148": {
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir, self.model_name_from_index(iter))",
                            "Call"
                        ],
                        [
                            "Saver.model_name_from_index(index)",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_99": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self.load_last_checkpoint()",
                            "Call"
                        ],
                        [
                            "self.do_load(fname)",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir, self.model_name_from_index(iter))",
                            "Call"
                        ],
                        [
                            "Saver.model_name_from_index(index)",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "framework/helpers/training_helper.py": {
        "torch": {
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "framework/layers/cross_entropy_label_smoothing.py": {
        "torch": {
            "log_softmax_23": {
                "variable": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(i2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_16": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.flatten(end_dim=-2)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(i2, -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.flatten().long()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100 if ignore_index is None else ignore_index",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "where_36": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2 != ignore_index",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(i2, t2, reduction=reduction, ignore_index=-100 if ignore_index is None else ignore_index)",
                            "Call"
                        ],
                        [
                            "(smoothing - 1.0) * right_class - others * smoothing",
                            "BinOp"
                        ],
                        [
                            "loss - optimal_loss",
                            "BinOp"
                        ],
                        [
                            "torch.where(tmask, loss, torch.zeros([1], dtype=loss.dtype, device=loss.device))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros([1], dtype=loss.dtype, device=loss.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "loss.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "loss.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "framework/layers/positional_encoding.py": {
        "torch": {
            "zeros_9": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_11": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, d_model, 2, dtype=torch.float, device=device) * (-math.log(10000.0) / d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_12": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_13": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_10": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_10": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_11": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "framework/loader/collate.py": {
        "torch": {
            "is_tensor_48": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "framework/loader/sampler.py": {
        "torch": {}
    },
    "framework/utils/average.py": {
        "torch": {
            "is_tensor_12": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "framework/utils/gpu_allocator.py": {
        "torch": {}
    },
    "framework/utils/parallel_map.py": {
        "torch": {}
    },
    "framework/utils/seed.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "14334546 + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "14334546 + 1 + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "framework/utils/set_lr.py": {
        "torch": {}
    },
    "framework/utils/universal.py": {
        "torch": {}
    },
    "framework/visualize/plot.py": {
        "torch": {
            "Event_429": {
                "variable": {
                    "value": "self.stop_event",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_37": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach().cpu()",
                            "Call"
                        ],
                        [
                            "data.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(self.data, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "self.data",
                            "Attribute"
                        ],
                        [
                            "np.transpose(self.data, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "self.data",
                            "Attribute"
                        ],
                        [
                            "PIL.Image.fromarray(np.ascontiguousarray((data * 255.0).astype(np.uint8)), mode='RGB')",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_52": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach().cpu()",
                            "Call"
                        ],
                        [
                            "data.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(self.data, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "self.data",
                            "Attribute"
                        ],
                        [
                            "np.transpose(self.data, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "self.data",
                            "Attribute"
                        ],
                        [
                            "PIL.Image.fromarray(np.ascontiguousarray((data * 255.0).astype(np.uint8)), mode='RGB')",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_90": {
                "obj": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val.item()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_142": {
                "obj": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "map.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(map, (1, 0))",
                            "Call"
                        ],
                        [
                            "map.astype('float') / map.sum(axis=1).clip(1e-06, None)[:, np.newaxis]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_tensor_194": {
                "obj": {
                    "value": "map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "map.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(map, (1, 0))",
                            "Call"
                        ],
                        [
                            "map.astype('float') / map.sum(axis=1).clip(1e-06, None)[:, np.newaxis]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SummaryWriter_295": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.tb_logdir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_77": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in self.values.items() if v == v}",
                            "DictComp"
                        ],
                        [
                            "dict_of_elems.items()",
                            "Call"
                        ],
                        [
                            "self.flatten_dict(v)",
                            "Call"
                        ],
                        [
                            "dict_of_elems.items()",
                            "Call"
                        ],
                        [
                            "dict_of_elems.items()",
                            "Call"
                        ],
                        [
                            "v.to_wandb()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_353": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in self.values.items() if v == v}",
                            "DictComp"
                        ],
                        [
                            "dict_of_elems.items()",
                            "Call"
                        ],
                        [
                            "self.flatten_dict(v)",
                            "Call"
                        ],
                        [
                            "dict_of_elems.items()",
                            "Call"
                        ],
                        [
                            "dict_of_elems.items()",
                            "Call"
                        ],
                        [
                            "v.to_wandb()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "interfaces/encoder_decoder.py": {
        "torch": {
            "stack_21": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r.outputs for r in l]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "l[0].batch_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_22": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r.out_lengths for r in l]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "interfaces/model_interface.py": {
        "torch": {}
    },
    "interfaces/result.py": {
        "torch": {
            "stack_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r.outputs for r in l]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "l[0].batch_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interfaces/transformer/encoder_decoder_interface.py": {
        "torch": {}
    },
    "layers/tied_embedding.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.w[0].shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_15": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.w[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "*size": {
                    "value": "self.w[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "layers/transformer/multi_head_attention.py": {
        "torch": {
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.multi_head_merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_heads * self.projection_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(bb // self.n_heads, self.n_heads, n_time_dest, n_time_src)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask.position_mask.unsqueeze(0).unsqueeze(0), float('-inf'))",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask.src_length_mask.unsqueeze(1).unsqueeze(1), float('-inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.data_to_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_heads * self.projection_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.data_to_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size if input_size is None else input_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_heads * self.projection_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(bb // self.n_heads, self.n_heads, n_time_dest, n_time_src)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask.position_mask.unsqueeze(0).unsqueeze(0), float('-inf'))",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask.src_length_mask.unsqueeze(1).unsqueeze(1), float('-inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_53": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._masked_softmax(logits * self.scale, mask)",
                            "Call"
                        ],
                        [
                            "self.dropout(scores)",
                            "Call"
                        ],
                        [
                            "self._attention(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.merged_attention(curr_state.shape[0], q.shape[1], mask, q, k, v)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_data(attend_to, self.data_to_kv, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_83": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_data(curr_state, self.data_to_q, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "layers/transformer/multi_head_relative_pos_attention.py": {
        "torch": {
            "pad_18": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "posmat",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_18": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_36": {
                "variable": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_head_specific_bias(q, self.global_content_bias)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k_content.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_pos.view(n_batch, self.n_heads, n_out_steps, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_pos.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.data_to_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * n_heads * self.projection_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.data_to_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size if input_size is None else input_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_heads * self.projection_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.pos_to_pq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_heads * self.projection_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "data": {
                    "value": "torch.zeros([n_heads, self.projection_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "data": {
                    "value": "torch.zeros([n_heads, self.projection_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "[n_heads, self.projection_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "[n_heads, self.projection_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "layers/transformer/relative_transformer.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_20": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_21": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_54": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_55": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_56": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "layers/transformer/transformer.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_20": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_21": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_53": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_54": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_55": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_115": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer(*args, **kwargs) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer(d_model, *args, **kwargs) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "triu_161": {
                "input": {
                    "value": "torch.ones(sz, sz, dtype=torch.bool, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_161": {
                "*size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_96": {
                "*size": {
                    "value": "[batch_size, max_length, self.d_model]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "layers/transformer/universal_relative_transformer.py": {
        "torch": {}
    },
    "layers/transformer/universal_transformer.py": {
        "torch": {}
    },
    "models/encoder_decoder.py": {
        "torch": {
            "cat_6": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, torch.zeros_like(input[0:1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_6": {
                "input": {
                    "value": "input[0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/transformer_enc_dec.py": {
        "torch": {
            "Embedding_69": {
                "variable": {
                    "value": "self.input_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_input_tokens + 1 + int(self.encoder_sos is not None)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.in_embedding_size or self.state_size",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "ones_116": {
                "variable": {
                    "value": "running",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "out_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "running",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([batch_size], dtype=torch.bool, device=src.device)",
                            "Call"
                        ],
                        [
                            "running & (out_token != self.decoder_sos_eos)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.in_embedding_upscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.out_embedding_upscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.output_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_out_tokens + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "variable": {
                    "value": "out_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_172": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_embedding(x.long())",
                            "Call"
                        ],
                        [
                            "self.in_embedding_upscale(src)",
                            "Call"
                        ],
                        [
                            "F.pad(src, (1, 0), value=self.encoder_sos)",
                            "Call"
                        ],
                        [
                            "self.pos_embed(self.input_embed(src), 0, 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder_sos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_58": {
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_72": {
                "num_embeddings": {
                    "value": "self.n_out_tokens + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.out_embedding_size or self.state_size",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_141": {
                "input": {
                    "value": "target[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.decoder_sos_eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_119": {
                "size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.decoder_sos_eos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "paper/plot_loss_analysis.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{bdir}/export/loss_details/test.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/cfq_transformer.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "{'losses': losses, 'oks': oks}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.helper.get_storage_path(f'loss_details/{name}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/task.py": {
        "torch": {
            "GradScaler_79": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enabled": {
                    "value": "self.amp_enabled",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "dataset": {
                    "value": "vset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "framework.loader.collate.VarLengthCollate(batch_dim=self.batch_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.VALID_NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "dataset": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.helper.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "framework.loader.sampler.InfiniteSampler(loader, seed=seed)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "framework.loader.collate.VarLengthCollate(batch_dim=self.batch_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.TRAIN_NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_243": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_218": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.helper.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.helper.args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.helper.args.adam.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_288": {
                "input": {
                    "value": "res_list[-1].loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__293": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.helper.args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_221": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.helper.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.helper.args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "autocast_283": {
                "enabled": {
                    "value": "self.amp_enabled",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tasks/transformer_mixin.py": {
        "torch": {}
    }
}