{
    "data/molecule_dataset.py": {
        "torch": {
            "from_numpy_27": {
                "ndarray": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "grammar_model/__main__.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "PerturbedZincDataset('data/zinc.npz', alphabet)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_19": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.load('prior_samples.pkl')[:10000]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_23": {
                "variable": {
                    "value": "optimiser",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "prior_samples.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "grammar_model/alphabets.py": {
        "torch": {
            "from_numpy_61": {
                "variable": {
                    "value": "x_uni",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice(range(len(self)), size=x.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "*x.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "grammar_model/grammar_rnn.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "self._embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.alphabet_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_24": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self._cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._construct_cells()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.alphabet_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_90": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self._projection(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('log', 'grammar')",
                            "Call"
                        ],
                        [
                            "os.path.join('log', 'grammar')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self._projection(self._cell(x_in.repeat(n_samples)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "round_73": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "{'grammar_state_dict': state}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('log', 'grammar')",
                            "Call"
                        ],
                        [
                            "os.path.join('log', 'grammar')",
                            "Call"
                        ]
                    ]
                }
            },
            "GRUCell_40": {
                "input_size": {
                    "value": "in_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding_size if n == 0 else self.hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_60": {
                "input": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(batch_size * n_samples, self.hidden_size).zero_() + self.keep_prob",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "grammar_model/grammar_trainer.py": {
        "torch": {
            "mean_30": {
                "variable": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ops.corresponding(p_full, x.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/ops.py": {
        "torch": {
            "log_77": {
                "variable": {
                    "value": "log_p",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "make_safe(p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "positive",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(make_safe(p))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_79": {
                "variable": {
                    "value": "neg_prod",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "positive",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(log_p, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_80": {
                "variable": {
                    "value": "negative",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-make_safe(neg_prod)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCELoss_87": {
                "variable": {
                    "value": "self.binary_xentropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "y * positive + (1 - y) * negative",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "[torch.multinomial(char_preds, 1) for char_preds in seq_preds]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_115": {
                "tensors": {
                    "value": "seqs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.cat([torch.multinomial(char_preds, 1) for char_preds in seq_preds]) for seq_preds in preds]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "eq_119": {
                "input": {
                    "value": "s1",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "s2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "all_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_20": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ],
                        [
                            "params",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_47": {
                "input": {
                    "value": "z_log_var / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_91": {
                "input": {
                    "value": "1 + z_log_var - z_mean ** 2 - torch.exp(z_log_var)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_112": {
                "input": {
                    "value": "char_preds",
                    "type": "Name",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_91": {
                "input": {
                    "value": "z_log_var",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "orthogonal_71": {
                "module": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ],
                        [
                            "params",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "vae/__main__.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ZincDataset('data/zinc.npz', fname='train')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_25": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ZincDataset('data/zinc.npz', fname='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_29": {
                "variable": {
                    "value": "optimiser",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "all_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(encoder.parameters()) + list(decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "prior_samples.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "vae/vae_models.py": {
        "torch": {
            "Conv1d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "alphabet_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "27",
                            "MethodArgument"
                        ],
                        [
                            "27",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_14": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(max_len - 26) * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "435",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.mean_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "435",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "56",
                            "MethodArgument"
                        ],
                        [
                            "56",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.var_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "435",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "56",
                            "MethodArgument"
                        ],
                        [
                            "56",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_25": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "h_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(h_flat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "56",
                            "MethodArgument"
                        ],
                        [
                            "56",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "56",
                            "MethodArgument"
                        ],
                        [
                            "56",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.lin_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "alphabet_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "27",
                            "MethodArgument"
                        ],
                        [
                            "27",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_46": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "latent_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "56",
                            "MethodArgument"
                        ],
                        [
                            "56",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lin_out(out.contiguous().view(-1, out.size(2)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "len(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vae/vae_trainer.py": {
        "torch": {
            "load_109": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.checkpoint_path(self.epoch)",
                            "Call"
                        ],
                        [
                            "self.checkpoint_path(name)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_117": {
                "variable": {
                    "value": "z_samples",
                    "type": "Name",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.cuda.FloatTensor(n_samples, 56) * 0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.cuda.FloatTensor(n_samples, 56) * 0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'encoder': self.encoder.state_dict(), 'decoder': self.decoder.state_dict(), 'optimiser': self.optimiser.state_dict(), 'scheduler': self.scheduler.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.checkpoint_path(self.epoch)",
                            "Call"
                        ],
                        [
                            "self.checkpoint_path(name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}