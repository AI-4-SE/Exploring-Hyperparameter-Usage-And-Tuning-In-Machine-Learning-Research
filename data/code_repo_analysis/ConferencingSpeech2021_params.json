{
    "baseline/loader/config_dataloader.py": {
        "torch": {
            "DataLoader_273": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Config_Dataset(config_scp=config_scp, repeat=repeat, chunk=chunk, sample_rate=sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "baseline/loader/datareader.py": {
        "torch": {
            "from_numpy_53": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "np.reshape(inputs, [1, inputs.shape[0], inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "baseline/loader/fix_chunk_dataloader.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FixDataset(wav_scp=wav_scp, mix_dir=mix_dir, ref_dir=ref_dir, repeat=repeat, chunk=chunk, sample_rate=sample_rate)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "baseline/loss/loss.py": {
        "torch": {
            "mean_6": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data - mean",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_20": {
                "input": {
                    "value": "snr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 * torch.log10(target_norm / (noise_norm + eps) + eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log10_19": {
                "input": {
                    "value": "target_norm / (noise_norm + eps) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baseline/model/feature.py": {
        "torch": {
            "conv_transpose1d_136": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cspec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([inputs, phase], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([real, imag], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose1d_142": {
                "variable": {
                    "value": "coff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.window.repeat(1, 1, inputs.size(-1)) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.enframe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 16000 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_218": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 8, 16000 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "window[None, :, None].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs.view(N * C, 1, L)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_69": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs.view(N * C, 1, L)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[self.win_len - self.stride, self.win_len - self.stride]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_71": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs.view(N * C, 1, L)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_73": {
                "variable": {
                    "value": "(r, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv1d(inputs, self.weight, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "F.conv1d(inputs, self.weight, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "outputs.view(N, C, -1, outputs.shape[-1])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose1d(cspec, self.weight, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "outputs / (coff + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "outputs[..., self.win_len - self.stride:-(self.win_len - self.stride)]",
                            "Subscript"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_78": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs.view(N * C, 1, L)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[self.win_len - self.stride, self.win_len - self.stride]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_80": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(inputs, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs.view(N * C, 1, L)",
                            "Call"
                        ],
                        [
                            "F.pad(inputs, [self.win_len - self.stride, self.win_len - self.stride])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_84": {
                "variable": {
                    "value": "(r, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv1d(inputs, self.weight, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "F.conv1d(inputs, self.weight, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "outputs.view(N, C, -1, outputs.shape[-1])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose1d(cspec, self.weight, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "outputs / (coff + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "outputs[..., self.win_len - self.stride:-(self.win_len - self.stride)]",
                            "Subscript"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_89": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i + EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "r + EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "cspec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, phase]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "cspec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[real, imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_195": {
                "variable": {
                    "value": "ipd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pha_dif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p[:, self.index_l] - p[:, self.index_r]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "ipd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ipd, th.sin(pha_dif)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "input": {
                    "value": "r ** 2 + i ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "EPSILON",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.finfo(th.float32).eps",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_118": {
                "n": {
                    "value": "win_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "win_len",
                            "Method Argument"
                        ],
                        [
                            "win_len",
                            "Method Argument"
                        ],
                        [
                            "win_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_131": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft(x, cplx=False)",
                            "Call"
                        ],
                        [
                            "stft(x)",
                            "Call"
                        ],
                        [
                            "th.atan2(i + EPSILON, r + EPSILON)",
                            "Call"
                        ],
                        [
                            "phase",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_132": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft(x, cplx=False)",
                            "Call"
                        ],
                        [
                            "stft(x)",
                            "Call"
                        ],
                        [
                            "th.atan2(i + EPSILON, r + EPSILON)",
                            "Call"
                        ],
                        [
                            "phase",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fmod_200": {
                "input": {
                    "value": "pha_dif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p[:, self.index_l] - p[:, self.index_r]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_198": {
                "input": {
                    "value": "pha_dif",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p[:, self.index_l] - p[:, self.index_r]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "baseline/model/new_lstm_dnn_cirm.py": {
        "torch": {
            "randn_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 8, 16000 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_48": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "(2 + ipd_num) * num_bins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rnn_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "rnn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_units * fac",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_bins * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_spec, i_spec, ipd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_81": {
                "variable": {
                    "value": "(r_mask, i_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_91": {
                "variable": {
                    "value": "out_wav",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.istft(r_out_spec, i_out_spec, cplx=True)",
                            "Call"
                        ],
                        [
                            "th.clamp(out_wav, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baseline/test.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if conf[test][use_cuda] and th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "cpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cpt_fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_dir / 'best.pt.tar'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baseline/train.py": {
        "torch": {
            "ReduceLROnPlateau_107": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "supported_optimizer[opt['optim']['name']](params, **opt['optim']['optimizer_kwargs'])",
                            "Call"
                        ],
                        [
                            "make_optimizer(nnet.parameters(), conf)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "conf['scheduler']['factor']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "conf['scheduler']['patience']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "min_lr": {
                    "value": "conf['scheduler']['min_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "yaml.load(f, Loader=yaml.FullLoader)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_all_88": {
                "seed": {
                    "value": "conf['train']['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "baseline/trainer/trainer.py": {
        "torch": {
            "load_136": {
                "variable": {
                    "value": "cpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf['train']['resume']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "cpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.load(conf['train']['resume'], map_location='cpu')",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'model_state_dict': self.nnet.state_dict(), 'optim_state_dict': self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.checkpoint / cpt_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_224": {
                "device": {
                    "value": "'cuda:{}'.format(self.gpus[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "cpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.load(conf['train']['resume'], map_location='cpu')",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'model_state_dict': self.nnet.state_dict(), 'optim_state_dict': self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.checkpoint / f'{epoch}.pt.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__194": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.nnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.gradient_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}