{
    "Modeling/H_Net/code/evaluation/eval_func.py": {
        "sklearn": {
            "auc_113": {
                "x": {
                    "value": "thresds[10:191]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "result[10:191]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_124": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(X, dtype=torch.float, requires_grad=False).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "X1 + X2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(Y, dtype=torch.float, requires_grad=False).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_125": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(line_num, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(line_num, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "miou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tar_num, ref_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "X_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_173": {
                "variable": {
                    "value": "X_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "(mask1.unsqueeze(1), mask2.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "miou['p'][idx].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "variable": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "miou['r'][idx].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "is_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "miou[metric[0]][j] > thresd",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_105": {
                "input": {
                    "value": "is_correct == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/evaluation/eval_line_detection.py": {
        "sklearn": {
            "auc_45": {
                "x": {
                    "value": "thresds[10:191]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "f[10:191]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "match[r][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "match[p][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/evaluation/eval_func.py": {
        "sklearn": {
            "auc_113": {
                "x": {
                    "value": "thresds[10:191]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "result[10:191]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_124": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(X, dtype=torch.float, requires_grad=False).unsqueeze(0).cuda()",
                            "Call"
                        ],
                        [
                            "X1 + X2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(Y, dtype=torch.float, requires_grad=False).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_125": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(line_num, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(line_num, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "miou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tar_num, ref_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "X_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_173": {
                "variable": {
                    "value": "X_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_num",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "(mask1.unsqueeze(1), mask2.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "miou['p'][idx].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "variable": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "miou['r'][idx].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "is_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "miou[metric[0]][j] > thresd",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_105": {
                "input": {
                    "value": "is_correct == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/evaluation/eval_line_detection.py": {
        "sklearn": {
            "auc_45": {
                "x": {
                    "value": "thresds[10:191]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "f[10:191]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "match[r][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "gt_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "match[p][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/datasets/dataset_sel.py": {
        "torch": {}
    },
    "Modeling/H_Net/code/datasets/dataset_sl5k.py": {
        "torch": {}
    },
    "Modeling/H_Net/code/evaluation/eval_hiou.py": {
        "torch": {
            "tensor_51": {
                "variable": {
                    "value": "self.X[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X1 + X2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "self.Y[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "self.grid[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.X[sf].view(1, height, width, 1), self.Y[sf].view(1, height, width, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "line_eq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_132": {
                "variable": {
                    "value": "X_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "X_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "score_table",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(m, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_region_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "region_mask[:1].clone()",
                            "Call"
                        ],
                        [
                            "memory_region_mask[0].permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "temp_region_mask.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "(region1, region2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_82": {
                "input": {
                    "value": "a * a + b * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "temp_region_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_region_mask, region)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/libs/load_model.py": {
        "torch": {
            "Adam_27": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_31": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params=model.parameters(), lr=cfg.lr, weight_decay=cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_10": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.dir['paper_weight'] + 'checkpoint_paper_H_Net_{}'.format(cfg.dataset_name.replace('_Hard', ''))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.dir['weight'] + 'checkpoint_final'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultiStepLR_39": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params=model.parameters(), lr=cfg.lr, weight_decay=cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "checkpoint['epoch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.load(cfg.dir['paper_weight'] + 'checkpoint_paper_H_Net_{}'.format(cfg.dataset_name.replace('_Hard', '')))",
                            "Call"
                        ],
                        [
                            "torch.load(cfg.dir['weight'] + 'checkpoint_AUC_F_{}'.format(cfg.dataset_name.replace('_Hard', '')))",
                            "Call"
                        ],
                        [
                            "torch.load(cfg.dir['weight'] + 'checkpoint_final')",
                            "Call"
                        ],
                        [
                            "torch.load(cfg.dir['paper_weight'] + 'checkpoint_paper_S_Net_{}'.format(cfg.dataset_name.replace('_Hard', '')))",
                            "Call"
                        ],
                        [
                            "torch.load(cfg.dir['pretrained_snet'] + 'checkpoint_EA_P_upper_R_0.86_'.format(cfg.dataset_name.replace('_Hard', '')))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_59": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.dir['paper_weight'] + 'checkpoint_paper_S_Net_{}'.format(cfg.dataset_name.replace('_Hard', ''))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.dir['pretrained_snet'] + 'checkpoint_EA_P_upper_R_0.86_'.format(cfg.dataset_name.replace('_Hard', ''))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_13": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.dir['weight'] + 'checkpoint_AUC_F_{}'.format(cfg.dataset_name.replace('_Hard', ''))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/libs/module_for_region_pooling.py": {
        "torch": {
            "grid_sample_528": {
                "variable": {
                    "value": "x_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_normalization(x)",
                            "Call"
                        ],
                        [
                            "l2_normalization(x)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_541": {
                "variable": {
                    "value": "x_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_normalization(x)",
                            "Call"
                        ],
                        [
                            "l2_normalization(x)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_547": {
                "variable": {
                    "value": "s_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * x_fold",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "self.X[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "self.Y[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "self.grid[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.X[sf].view(1, height, width, 1), self.Y[sf].view(1, height, width, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "grid_X0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "grid_Y0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "flipped_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_X1.view(num, h, w, 1), grid_Y1.view(num, h, w, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "line_eq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_132": {
                "variable": {
                    "value": "dist_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_133": {
                "variable": {
                    "value": "weighted_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * torch.pow(dist_map, 2) / (2 * self.cfg.adj_gaussian_sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "inter_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_262": {
                "variable": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_mask[:, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "n_mask[:, :, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grid_sample_385": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.uint8(to_3D_np(to_np(mask[:, :, 0])) * 255)",
                            "Call"
                        ],
                        [
                            "mask1.view(b, 1, h, w)",
                            "Call"
                        ],
                        [
                            "mask1.type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_386": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.uint8(to_3D_np(to_np(mask[:, :, 1])) * 255)",
                            "Call"
                        ],
                        [
                            "mask2.view(b, 1, h, w)",
                            "Call"
                        ],
                        [
                            "mask2.type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.s_vec2.view(b, 1, c, h, w).repeat(1, 2, 1, 1, 1), self.s_vec1.view(b, 1, c, h, w).repeat(1, 2, 1, 1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "self.overlap_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(att_mask1, att_mask2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_454": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_vec * self.overlap_mask.view(b, 4, 1, h, w)",
                            "BinOp"
                        ],
                        [
                            "self.get_similarity_map()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "s_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.s_vec1, self.s_vec2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_467": {
                "variable": {
                    "value": "r_mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_mask1.view(b, 2, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_468": {
                "variable": {
                    "value": "r_mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_mask2.view(b, 2, 1, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "r_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r_mask1, r_mask2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_470": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_vec * r_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "(region1, region2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "a * a + b * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_134": {
                "input": {
                    "value": "self.dist_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "temp_line_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.line_pts1[k:k + 1], self.line_pts2[k:k + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_261": {
                "input": {
                    "value": "adj_inter_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_mask[:, idx, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "temp_line_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.line_pts1[k:k + 1], self.line_pts2[k:k + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "temp_line_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.line_pts1[k:k + 1], self.line_pts2[k:k + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "temp_line_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.line_pts1[k:k + 1], self.line_pts2[k:k + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_553": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_normalization(x)",
                            "Call"
                        ],
                        [
                            "l2_normalization(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_133": {
                "input": {
                    "value": "dist_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.dist_map)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/libs/modules.py": {
        "torch": {
            "sum_9": {
                "variable": {
                    "value": "X_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_10": {
                "variable": {
                    "value": "X_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argsort_22": {
                "variable": {
                    "value": "sorted_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "visit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "line_pts.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "nms_check_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "line_pts.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X1 + X2",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float, requires_grad=False).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(Y, dtype=torch.float, requires_grad=False).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(line_num, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(line_num, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "max_miou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "line_pts.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "(mask1.unsqueeze(1), mask2.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/libs/save_model.py": {
        "torch": {
            "save_7": {
                "obj": {
                    "value": "{'epoch': checkpoint['epoch'], 'val_result': checkpoint['val_result'], 'model': checkpoint['model'].state_dict(), 'optimizer': checkpoint['optimizer'].state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path + param",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/libs/utils.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_14": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_seed + worker_id",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_28": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "{k: getattr(cfg, k) for k in cfg.__dir__() if '__' not in k}",
                            "DictComp"
                        ],
                        [
                            "line.strip().split(' ')",
                            "Call"
                        ],
                        [
                            "line.strip().split(' ')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Modeling/H_Net/code/networks/backbone.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.model1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.features.children())[:last_layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.model2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.features.children())[last_layer_idx + 1:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/networks/loss.py": {
        "torch": {
            "MSELoss_11": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/networks/model_hnet.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_25": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.linear2(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_86": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "line_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_145": {
                "variable": {
                    "value": "tot_node_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_node_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((temp_node_score, tot_node_score), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_187": {
                "variable": {
                    "value": "tot_edge_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_edge_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((temp_edge_score, edge_score), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "buffer",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, 2, self.feat_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "temp_line_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_line_feat, line_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "inter_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inter_feat, buffer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "temp_node_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_node_score, tot_node_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "temp_edge_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_edge_score, edge_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "mask * feat_map.view(b, c, 1, h, w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "line_mask * feat_map",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_87": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(mask != 0, dim=(3, 4), keepdim=True).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/networks/model_snet.py": {
        "torch": {
            "arange_31": {
                "variable": {
                    "value": "c_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.c_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.feat_squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 32, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.squeeze2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.c_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_132": {
                "variable": {
                    "value": "self.center_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.c_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_133": {
                "variable": {
                    "value": "self.visit_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.c_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "self.l_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_feat1, l_feat2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "self.line_n[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.line_mask[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_81": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_85": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_87": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "self.line_mask[idx] * feat_map.view(b, c, 1, h, w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_96": {
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.squeeze(self.l_feat)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/H_Net/code/options/config.py": {
        "torch": {}
    },
    "Modeling/H_Net/code/post_processes/post_process_clique.py": {
        "torch": {
            "zeros_61": {
                "variable": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 ** self.num_node",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_node, self.num_node)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_88": {
                "variable": {
                    "value": "self.edge_max_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.num_node, self.num_node), dtype=torch.int64).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_106": {
                "variable": {
                    "value": "self.clique_idxnum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "clique_idxlist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((clique_idxlist, idx_check))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "clique_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_score * self.clique_idxlist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_112": {
                "variable": {
                    "value": "idx_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clique_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(self.edge_score * self.clique_idxlist, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "bit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.num_node)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "bitlist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bitlist, bit)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "idx_check",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.edge_max_num + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "clique_idxlist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(clique_idxlist, idx_check)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_115": {
                "variable": {
                    "value": "pri_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_score[mul_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "pri_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_score[mul_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_139": {
                "input": {
                    "value": "self.node_score",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "bit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1, self.num_node), dtype=torch.int64).cuda()",
                            "Call"
                        ],
                        [
                            "self.bitlist[i]",
                            "Subscript"
                        ],
                        [
                            "self.bitlist[i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "Modeling/H_Net/code/trains/train.py": {
        "torch": {}
    },
    "Modeling/S_Net/code/datasets/dataset_sel.py": {
        "torch": {}
    },
    "Modeling/S_Net/code/datasets/dataset_sl5k.py": {
        "torch": {}
    },
    "Modeling/S_Net/code/evaluation/eval_hiou.py": {
        "torch": {
            "tensor_51": {
                "variable": {
                    "value": "self.X[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X1 + X2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "self.Y[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "self.grid[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.X[sf].view(1, height, width, 1), self.Y[sf].view(1, height, width, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "line_eq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_132": {
                "variable": {
                    "value": "X_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "X_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "score_table",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(m, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_region_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "region_mask[:1].clone()",
                            "Call"
                        ],
                        [
                            "memory_region_mask[0].permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "temp_region_mask.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "(region1, region2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_82": {
                "input": {
                    "value": "a * a + b * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "temp_region_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_region_mask, region)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/libs/load_model.py": {
        "torch": {
            "Adam_23": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_27": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params=model.parameters(), lr=cfg.lr, weight_decay=cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_7": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.dir['paper_weight'] + 'checkpoint_paper_S_Net_{}'.format(cfg.dataset_name.replace('_Hard', ''))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_9": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.dir['weight'] + 'checkpoint_final'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.dir['weight'] + 'checkpoint_final'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultiStepLR_35": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params=model.parameters(), lr=cfg.lr, weight_decay=cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "checkpoint['epoch']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.load(cfg.dir['paper_weight'] + 'checkpoint_paper_S_Net_{}'.format(cfg.dataset_name.replace('_Hard', '')))",
                            "Call"
                        ],
                        [
                            "torch.load(cfg.dir['weight'] + 'checkpoint_final')",
                            "Call"
                        ],
                        [
                            "torch.load(cfg.dir['weight'] + 'checkpoint_final')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Modeling/S_Net/code/libs/module_for_region_pooling.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "self.X[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "self.Y[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "self.grid[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.X[sf].view(1, height, width, 1), self.Y[sf].view(1, height, width, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "grid_X0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "grid_Y0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "flipped_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_X1.view(num, h, w, 1), grid_Y1.view(num, h, w, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "line_eq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_129": {
                "variable": {
                    "value": "dist_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_130": {
                "variable": {
                    "value": "weighted_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * torch.pow(dist_map, 2) / (2 * self.cfg.adj_gaussian_sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "(region1, region2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "a * a + b * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_131": {
                "input": {
                    "value": "self.dist_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_130": {
                "input": {
                    "value": "dist_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(self.dist_map)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/libs/modules.py": {
        "torch": {
            "sum_9": {
                "variable": {
                    "value": "X_uni",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_10": {
                "variable": {
                    "value": "X_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X == 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argsort_22": {
                "variable": {
                    "value": "sorted_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "visit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "line_pts.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "nms_check_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "line_pts.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X1 + X2",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(X, dtype=torch.float, requires_grad=False).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(Y, dtype=torch.float, requires_grad=False).unsqueeze(0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(line_num, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(line_num, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "max_miou",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.shape[0]",
                            "Subscript"
                        ],
                        [
                            "line_pts.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "(mask1.unsqueeze(1), mask2.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/libs/save_model.py": {
        "torch": {
            "save_7": {
                "obj": {
                    "value": "{'epoch': checkpoint['epoch'], 'val_result': checkpoint['val_result'], 'model': checkpoint['model'].state_dict(), 'optimizer': checkpoint['optimizer'].state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path + param",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/libs/utils.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_14": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_seed + worker_id",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_28": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "{k: getattr(cfg, k) for k in cfg.__dir__() if '__' not in k}",
                            "DictComp"
                        ]
                    ]
                }
            }
        }
    },
    "Modeling/S_Net/code/networks/backbone.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.model1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model[:33]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.model2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model[34:44]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.model1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.features.children())[:last_layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.model2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.features.children())[last_layer_idx + 1:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/networks/loss.py": {
        "torch": {
            "MSELoss_9": {
                "variable": {
                    "value": "self.loss_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_10": {
                "variable": {
                    "value": "self.loss_bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_11": {
                "variable": {
                    "value": "self.loss_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/networks/model_snet.py": {
        "torch": {
            "arange_30": {
                "variable": {
                    "value": "c_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.c_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.feat_squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 32, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.squeeze2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.c_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_130": {
                "variable": {
                    "value": "self.center_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.c_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_131": {
                "variable": {
                    "value": "self.visit_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, self.c_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "l_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_feat1, l_feat2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "self.line_n[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.line_mask[sf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_77": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_79": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_83": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_85": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "self.line_mask[idx] * feat_map.view(b, c, 1, h, w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_94": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.squeeze(l_feat)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Modeling/S_Net/code/options/config.py": {
        "torch": {}
    },
    "Modeling/S_Net/code/tests/forward.py": {
        "torch": {}
    },
    "Modeling/S_Net/code/trains/train.py": {
        "torch": {
            "arange_44": {
                "start": {
                    "value": "out_cls['l_feat'].shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing/code/datasets/dataset.py": {
        "torch": {}
    },
    "Preprocessing/code/libs/line_generator.py": {
        "torch": {
            "ones_152": {
                "variable": {
                    "value": "self.angle_vx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "angle_list.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tan_153": {
                "variable": {
                    "value": "self.angle_vy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_list / 180 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "meshgrid_348": {
                "variable": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x1, x2).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(y1, y2).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "diff_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tan_166": {
                "variable": {
                    "value": "vy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_angle[i] / 180 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_173": {
                "variable": {
                    "value": "angle_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_inner_product(self.angle_vx, self.angle_vy, vx, vy)",
                            "Call"
                        ],
                        [
                            "self.compute_inner_product(x1, y1, x2, y2)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0])[0].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tan_284": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_angle[data_idx] / 180 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_293": {
                "variable": {
                    "value": "angle_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_inner_product(self.angle_vx, self.angle_vy, vx, vy)",
                            "Call"
                        ],
                        [
                            "self.compute_inner_product(x1, y1, x2, y2)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0])[0].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_329": {
                "variable": {
                    "value": "temp_angle_err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_angle_err, torch.FloatTensor([angle_err]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "temp_dist_err",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temp_dist_err, torch.FloatTensor([dist_err]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_189": {
                "variable": {
                    "value": "dist_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_list - gt_dist[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_348": {
                "start": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.angle_vx[idx[0]]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(a_idx - da, 0)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([1])[0].cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0])[0].cuda()",
                            "Call"
                        ],
                        [
                            "np.minimum(a_idx + da + 1, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_349": {
                "start": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.angle_vy[idx[0]]",
                            "Subscript"
                        ],
                        [
                            "np.maximum(d_idx - dd, 0)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tan(gt_angle[data_idx] / 180 * math.pi)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1])[0].cuda()",
                            "Call"
                        ],
                        [
                            "np.minimum(d_idx + dd + 1, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_175": {
                "input": {
                    "value": "angle_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(angle1, angle2)",
                            "Call"
                        ],
                        [
                            "torch.min(angle1, angle2)",
                            "Call"
                        ],
                        [
                            "angle_err * flag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmin_180": {
                "input": {
                    "value": "angle_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(angle1, angle2)",
                            "Call"
                        ],
                        [
                            "torch.min(angle1, angle2)",
                            "Call"
                        ],
                        [
                            "angle_err * flag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_183": {
                "variable": {
                    "value": "dist_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_list - gt_dist[i] * -1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_196": {
                "input": {
                    "value": "dist_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(dist_list - gt_dist[i])",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i] * -1)",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i] * -1)",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i])",
                            "Call"
                        ],
                        [
                            "gt_dist[data_idx] - dist_list[idx[1]]",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "isnan_290": {
                "input": {
                    "value": "angle1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_inner_product(self.angle_vx, self.angle_vy, vx, vy)",
                            "Call"
                        ],
                        [
                            "self.compute_inner_product(x1, y1, x2, y2)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0])[0].cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_335": {
                "input": {
                    "value": "x2 * x2 + y2 * y2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_336": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tan(angle / 180 * math.pi)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "(x1 * x2 + y1 * y2) / (torch.sqrt(x1 * x1 + y1 * y1) * torch.sqrt(x2 * x2 + y2 * y2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_185": {
                "variable": {
                    "value": "dist_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_list - gt_dist[i] * -1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_187": {
                "variable": {
                    "value": "dist_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_list - gt_dist[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmin_190": {
                "input": {
                    "value": "dist_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(dist_list - gt_dist[i])",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i] * -1)",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i] * -1)",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i])",
                            "Call"
                        ],
                        [
                            "gt_dist[data_idx] - dist_list[idx[1]]",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "argmin_195": {
                "input": {
                    "value": "angle_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(angle1, angle2)",
                            "Call"
                        ],
                        [
                            "torch.min(angle1, angle2)",
                            "Call"
                        ],
                        [
                            "angle_err * flag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_210": {
                "input": {
                    "value": "torch.isnan(offset_a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_213": {
                "input": {
                    "value": "dist_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(dist_list - gt_dist[i])",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i] * -1)",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i] * -1)",
                            "Call"
                        ],
                        [
                            "torch.abs(dist_list - gt_dist[i])",
                            "Call"
                        ],
                        [
                            "gt_dist[data_idx] - dist_list[idx[1]]",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "abs_300": {
                "input": {
                    "value": "angle_list[idx[0]] - gt_angle[data_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_210": {
                "input": {
                    "value": "offset_a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmin_212": {
                "input": {
                    "value": "angle_err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(angle1, angle2)",
                            "Call"
                        ],
                        [
                            "torch.min(angle1, angle2)",
                            "Call"
                        ],
                        [
                            "angle_err * flag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_316": {
                "input": {
                    "value": "angle_list[idx[0]] - gt_angle[data_idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing/code/libs/modules.py": {
        "torch": {
            "zeros_70": {
                "variable": {
                    "value": "line_eq",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.shape[0], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "line_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size[0], size[1]), np.float32)",
                            "Call"
                        ],
                        [
                            "cv2.line(line_mask, pt_1, pt_2, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_91": {
                "input": {
                    "value": "a * a + b * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_80": {
                "input": {
                    "value": "line_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line_eq[:, 0].clone()",
                            "Call"
                        ],
                        [
                            "torch.atan(line_angle) * 180 / math.pi",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Preprocessing/code/libs/utils.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_13": {
                "seed": {
                    "value": "global_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_seed + worker_id",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_27": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Preprocessing/code/main.py": {
        "torch": {}
    },
    "Preprocessing/code/options/config.py": {
        "torch": {}
    },
    "Preprocessing/code/utils/convertor.py": {
        "torch": {
            "from_numpy_6": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Preprocessing/code/utils/options/config.py": {
        "torch": {}
    },
    "Preprocessing/code/utils/score.py": {
        "torch": {
            "sum_11": {
                "input": {
                    "value": "ref_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}