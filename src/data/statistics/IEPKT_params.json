{
    "nets/Distillation.py": {
        "tensorflow": {
            "l2_normalize_16": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "moving_M",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "M",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, D]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.GLOBAL_VARIABLES, 'MHA']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "moving_S",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "S",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, D // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.GLOBAL_VARIABLES, 'MHA']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "moving_V",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "V",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[D, D // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.GLOBAL_VARIABLES, 'MHA']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "SV",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "moving_S * moving_V",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "current_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_133": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(SV)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_134": {
                "variable": {
                    "value": "moving_M_",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(SV), 0.0)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : current_mean",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : moving_M",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "concat_135": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[X_, SV, moving_M_ - current_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_141": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.svd(X_)",
                            "Call"
                        ],
                        [
                            "V * tf.sign(tf.reduce_max(V, 0, keepdims=True) + tf.reduce_min(V, 0, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.slice(V, [0, 0], [-1, D // 2])",
                            "Call"
                        ],
                        [
                            "Incremental_PCA(X, D)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, D // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_142": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.svd(X_)",
                            "Call"
                        ],
                        [
                            "tf.slice(s, [0], [D // 2])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[D // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.svd(X_)",
                            "Call"
                        ],
                        [
                            "V * tf.sign(tf.reduce_max(V, 0, keepdims=True) + tf.reduce_min(V, 0, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.slice(V, [0, 0], [-1, D // 2])",
                            "Call"
                        ],
                        [
                            "Incremental_PCA(X, D)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_217": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "Euc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "ICS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "EKI",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_86": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "Incremental_PCA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "svd_138": {
                "variable": {
                    "value": "(s, U, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X - current_mean",
                            "BinOp"
                        ],
                        [
                            "tf.concat([X_, SV, moving_M_ - current_mean], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_139": {
                "x": {
                    "value": "tf.reduce_max(V, 0, keepdims=True) + tf.reduce_min(V, 0, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_144": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.assign(moving_M, moving_M * (1 - rate) + current_mean * rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_145": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.assign(moving_S, tf.expand_dims(s, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_146": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.assign(moving_V, V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "PCA_Graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "Attention_Knowledge",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_167": {
                "name": {
                    "value": "MHA_loss",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reduce_mean(1 - tf.reduce_sum(T_B * T_B_, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "Drop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_218": {
                "condition": {
                    "value": "noise - tf.reduce_mean(noise, 0, keepdims=True) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(noise)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(noise)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "KLD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "input_tensor": {
                    "value": "tf.nn.softmax(X) * (tf.nn.log_softmax(X) - tf.nn.log_softmax(Y))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_10": {
                "shape": {
                    "value": "[1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_11": {
                "x": {
                    "value": "tf.cos(tf.acos(tf.reduce_sum(X, 1, keepdims=True) / np.sqrt(D)) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_92": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[H, tf.reduce_mean(E, -1, keepdims=True)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_103": {
                "input_tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Edge(X_F, D, 'Edge', is_training=is_training, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "Update(E, M, 'Update')",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Vertices(X_B, X_F, D, 'Vertices', is_training=is_training, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(H, 1) - tf.expand_dims(H, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([H, tf.reduce_mean(E, -1, keepdims=True)], -1)",
                            "Call"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_117": {
                "values": {
                    "value": "M_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "input_tensor": {
                    "value": "SV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(moving_S * moving_V, [1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_137": {
                "device_name": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_144": {
                "ref": {
                    "value": "moving_M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('M', [1, D], tf.float32, trainable=False, initializer=tf.zeros_initializer(), collections=[tf.GraphKeys.GLOBAL_VARIABLES, 'MHA'])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "moving_M * (1 - rate) + current_mean * rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_145": {
                "ref": {
                    "value": "moving_S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('S', [1, D // 2], tf.float32, trainable=False, initializer=tf.zeros_initializer(), collections=[tf.GraphKeys.GLOBAL_VARIABLES, 'MHA'])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.expand_dims(s, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_146": {
                "ref": {
                    "value": "moving_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('V', [D, D // 2], tf.float32, trainable=False, initializer=tf.zeros_initializer(), collections=[tf.GraphKeys.GLOBAL_VARIABLES, 'MHA'])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.svd(X_)",
                            "Call"
                        ],
                        [
                            "V * tf.sign(tf.reduce_max(V, 0, keepdims=True) + tf.reduce_min(V, 0, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.slice(V, [0, 0], [-1, D // 2])",
                            "Call"
                        ],
                        [
                            "Incremental_PCA(X, D)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_148": {
                "input": {
                    "value": "moving_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('V', [D, D // 2], tf.float32, trainable=False, initializer=tf.zeros_initializer(), collections=[tf.GraphKeys.GLOBAL_VARIABLES, 'MHA'])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_167": {
                "input_tensor": {
                    "value": "1 - tf.reduce_sum(T_B * T_B_, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_171": {
                "x": {
                    "value": "G_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MPNN(T_B, T_F, D, num_iter, 'MPNN')",
                            "Call"
                        ],
                        [
                            "MPNN(T_B, T_F, D, num_iter, 'MPNN', False, True)",
                            "Call"
                        ],
                        [
                            "Attention_head(T_B, T_F, D, num_head, 'Attention', is_training=True)",
                            "Call"
                        ],
                        [
                            "Attention_head(T_B, T_F, D, num_head, 'Attention', reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_177": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(tf.shape(K), [0], [1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "X_sender",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_sender",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(K, D * num_head, scope='Sfc'), scope='Sbn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(X_sender, [B, D, num_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(X_sender, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, D, num_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "X_receiver",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X_receiver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(Q, D * num_head, scope='Rfc', reuse=reuse), scope='Rbn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(X_receiver, [B, D, num_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(X_receiver, [2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, D, num_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_185": {
                "variable": {
                    "value": "X_sender",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_sender",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(K, D * num_head, scope='Sfc'), scope='Sbn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(X_sender, [B, D, num_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(X_sender, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_186": {
                "variable": {
                    "value": "X_receiver",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_receiver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(Q, D * num_head, scope='Rfc', reuse=reuse), scope='Rbn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(X_receiver, [B, D, num_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(X_receiver, [2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "X_ah",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X_sender",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(K, D * num_head, scope='Sfc'), scope='Sbn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(X_sender, [B, D, num_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(X_sender, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "X_receiver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(Q, D * num_head, scope='Rfc', reuse=reuse), scope='Rbn')",
                            "Call"
                        ],
                        [
                            "tf.reshape(X_receiver, [B, D, num_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(X_receiver, [2, 1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_194": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(tf.shape(G), [1], [1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(H, D, scope='Gfc'), scope='Gbn', is_training=is_training, activation_fn=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "inter_cosine_sim(P)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(G)",
                            "Call"
                        ],
                        [
                            "tf.concat([G, tf.expand_dims(tf.stop_gradient(extrinsic), 0)], 0)",
                            "Call"
                        ],
                        [
                            "drop_head(G, [num_head, B, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(G, [num_head * B, B])",
                            "Call"
                        ],
                        [
                            "G * tf.where(noise - tf.reduce_mean(noise, 0, keepdims=True) > 0, tf.ones_like(noise), tf.zeros_like(noise))",
                            "BinOp"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_202": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(H, D, scope='Gfc'), scope='Gbn', is_training=is_training, activation_fn=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "inter_cosine_sim(P)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(G)",
                            "Call"
                        ],
                        [
                            "tf.concat([G, tf.expand_dims(tf.stop_gradient(extrinsic), 0)], 0)",
                            "Call"
                        ],
                        [
                            "drop_head(G, [num_head, B, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(G, [num_head * B, B])",
                            "Call"
                        ],
                        [
                            "G * tf.where(noise - tf.reduce_mean(noise, 0, keepdims=True) > 0, tf.ones_like(noise), tf.zeros_like(noise))",
                            "BinOp"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_head * B, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(G, X)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_head, B, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_209": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(X, [1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, D * num_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_212": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_218": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_218": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_11": {
                "x": {
                    "value": "tf.acos(tf.reduce_sum(X, 1, keepdims=True) / np.sqrt(D)) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_74": {
                "name": {
                    "value": "dist",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n(GNN_losses0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_75": {
                "name": {
                    "value": "dist",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n(GNN_losses1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_76": {
                "name": {
                    "value": "dist",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n(GNN_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_139": {
                "input_tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.svd(X_)",
                            "Call"
                        ],
                        [
                            "V * tf.sign(tf.reduce_max(V, 0, keepdims=True) + tf.reduce_min(V, 0, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.slice(V, [0, 0], [-1, D // 2])",
                            "Call"
                        ],
                        [
                            "Incremental_PCA(X, D)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_139": {
                "input_tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.svd(X_)",
                            "Call"
                        ],
                        [
                            "V * tf.sign(tf.reduce_max(V, 0, keepdims=True) + tf.reduce_min(V, 0, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.slice(V, [0, 0], [-1, D // 2])",
                            "Call"
                        ],
                        [
                            "Incremental_PCA(X, D)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_145": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.svd(X_)",
                            "Call"
                        ],
                        [
                            "tf.slice(s, [0], [D // 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[G, tf.expand_dims(tf.stop_gradient(extrinsic), 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_223": {
                "logits": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_74": {
                "inputs": {
                    "value": "GNN_losses0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_75": {
                "inputs": {
                    "value": "GNN_losses1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_76": {
                "inputs": {
                    "value": "GNN_losses2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_167": {
                "input_tensor": {
                    "value": "T_B * T_B_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_177": {
                "input_": {
                    "value": "tf.shape(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_194": {
                "input_": {
                    "value": "tf.shape(G)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "a": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(H, D, scope='Gfc'), scope='Gbn', is_training=is_training, activation_fn=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "inter_cosine_sim(P)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(G)",
                            "Call"
                        ],
                        [
                            "tf.concat([G, tf.expand_dims(tf.stop_gradient(extrinsic), 0)], 0)",
                            "Call"
                        ],
                        [
                            "drop_head(G, [num_head, B, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(G, [num_head * B, B])",
                            "Call"
                        ],
                        [
                            "G * tf.where(noise - tf.reduce_mean(noise, 0, keepdims=True) > 0, tf.ones_like(noise), tf.zeros_like(noise))",
                            "BinOp"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_209": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_218": {
                "input_tensor": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_223": {
                "logits": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "acos_11": {
                "x": {
                    "value": "tf.reduce_sum(X, 1, keepdims=True) / np.sqrt(D)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "'Stacked_PCA%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_38": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(V_T, 1, keepdims=True) + tf.reduce_min(V_T, 1, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "T_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVP.SVD_eid(tfm, 1, name='TSVD')",
                            "Call"
                        ],
                        [
                            "V_T * sign",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, D_B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "sfm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sfm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sfm, [-1, sz[1] * sz[2], sz[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sz[1] * sz[2], sz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_47": {
                "variable": {
                    "value": "V_S",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(sfm, U_T, transpose_a=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "S_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V_S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.matmul(sfm, U_T, transpose_a=True), 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, D_B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "S_B",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "S_B - mean_V",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "P_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PCA_Graph(T_B)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "'EKI_module%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "input_tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Edge(X_F, D, 'Edge', is_training=is_training, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "Update(E, M, 'Update')",
                            "Call"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ],
                        [
                            "E",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_177": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_194": {
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(tcl.fully_connected(H, D, scope='Gfc'), scope='Gbn', is_training=is_training, activation_fn=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "inter_cosine_sim(P)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(G)",
                            "Call"
                        ],
                        [
                            "tf.concat([G, tf.expand_dims(tf.stop_gradient(extrinsic), 0)], 0)",
                            "Call"
                        ],
                        [
                            "drop_head(G, [num_head, B, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(G, [num_head * B, B])",
                            "Call"
                        ],
                        [
                            "G * tf.where(noise - tf.reduce_mean(noise, 0, keepdims=True) > 0, tf.ones_like(noise), tf.zeros_like(noise))",
                            "BinOp"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ],
                        [
                            "G",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "Teacher_PCA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "Student_PCA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_198": {
                "input": {
                    "value": "tf.stop_gradient(extrinsic)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_11": {
                "input_tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='Efc'), scope='Ebn', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.fully_connected(X, D, scope='fc0'), scope='bn0', is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.matmul(G, X), [num_head, B, D])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(X, [1, 0, 2]), [B, D * num_head])",
                            "Call"
                        ],
                        [
                            "tcl.fully_connected(X, Dy, biases_initializer=tf.zeros_initializer(), scope='fc1')",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(X, -1)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "sfm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sfm, [-1, sz[1] * sz[2], sz[3]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "U_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVP.SVD_eid(tfm, 1, name='TSVD')",
                            "Call"
                        ],
                        [
                            "U_T * sign",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "MPNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_59": {
                "name": {
                    "value": "MHA_loss",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "kld_loss(G_B, G_T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "MHA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_198": {
                "input": {
                    "value": "extrinsic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_38": {
                "input_tensor": {
                    "value": "V_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVP.SVD_eid(tfm, 1, name='TSVD')",
                            "Call"
                        ],
                        [
                            "V_T * sign",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_38": {
                "input_tensor": {
                    "value": "V_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVP.SVD_eid(tfm, 1, name='TSVD')",
                            "Call"
                        ],
                        [
                            "V_T * sign",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_65": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.abs(M_S - M_T), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_69": {
                "input_tensor": {
                    "value": "M_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MPNN(T_B, T_F, D, num_iter, 'MPNN', False, True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(M_T, 2) * num_iter",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "tf.abs(M_S - M_T)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_65": {
                "x": {
                    "value": "M_S - M_T",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nets/SVP.py": {
        "tensorflow": {
            "squeeze_57": {
                "variable": {
                    "value": "u_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(tf.shape(dU), [1], [1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "variable": {
                    "value": "v_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(tf.shape(dV), [1], [1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "s_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(tf.shape(ds), [1], [1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_62": {
                "variable": {
                    "value": "s_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(x_, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "SVD_grad_map(x, s_svd, u_svd, v_svd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [-1, min(HW, D)])",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.eye(s_sz)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matrix_transpose_66": {
                "variable": {
                    "value": "KT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - eye) / (tf.expand_dims(s_2, 2) - tf.expand_dims(s_2, 1) + eye)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cond_86": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(v_sz, u_sz)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : left_grad(U, S, V, dU, dV)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : right_grad(U, S, V, dU, dV)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "RegisterGradient_53": {
                "op_type": {
                    "value": "Svd_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_5": {
                "condition": {
                    "value": "tf.is_finite(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, [-1, sz[1] * sz[2], sz[3]])",
                            "Call"
                        ],
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(X, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_19": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, [-1, sz[1] * sz[2], sz[3]])",
                            "Call"
                        ],
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(X, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_48": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(s, [0, 0], [-1, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_49": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(u, [0, 0, 0], [-1, -1, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_50": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(v, [0, 0, 0], [-1, -1, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dV",
                            "variable"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.matrix_diag(1 / (s + 1e-08))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.slice(u, [0, 0, 0], [-1, -1, n]), 1)",
                            "Call"
                        ],
                        [
                            "V",
                            "variable"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.matmul(dU, tf.matrix_diag(1 / (s + 1e-08)))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matrix_transpose_79": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.greater(v_sz, u_sz), lambda : left_grad(U, S, V, dU, dV), lambda : right_grad(U, S, V, dU, dV))",
                            "Call"
                        ],
                        [
                            "tf.matmul(D - tf.matmul(U, tf.matrix_diag(tf.matrix_diag_part(tf.matmul(U, D, transpose_a=True))) + 2 * tf.matmul(S, msym(KT * tf.matmul(D, tf.matmul(U, S), transpose_a=True)))), V, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(grad)",
                            "Call"
                        ],
                        [
                            "tf.matmul(2 * tf.matmul(U, tf.matmul(S, msym(KT * tf.matmul(V, dV, transpose_a=True)))), V, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.slice(v, [0, 0, 0], [-1, -1, n]), 1)",
                            "Call"
                        ],
                        [
                            "U",
                            "variable"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "dV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dU",
                            "variable"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_finite_5": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, [-1, sz[1] * sz[2], sz[3]])",
                            "Call"
                        ],
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(X, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_5": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, [-1, sz[1] * sz[2], sz[3]])",
                            "Call"
                        ],
                        [
                            "X",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(X, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sz[1] * sz[2], sz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(x_, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "SVD_grad_map(x, s_svd, u_svd, v_svd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [-1, min(HW, D)])",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, min(HW, D)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(x_, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "SVD_grad_map(x, s_svd, u_svd, v_svd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, [-1, HW, min(HW, D)])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, HW, min(HW, D)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(x_, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "SVD_grad_map(x, s_svd, u_svd, v_svd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [-1, D, min(HW, D)])",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, D, min(HW, D)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_57": {
                "input_": {
                    "value": "tf.shape(dU)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_58": {
                "input_": {
                    "value": "tf.shape(dV)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_59": {
                "input_": {
                    "value": "tf.shape(ds)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_64": {
                "num_rows": {
                    "value": "s_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(tf.shape(ds), [1], [1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_86": {
                "x": {
                    "value": "v_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(tf.shape(dV), [1], [1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.slice(tf.shape(dU), [1], [1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_graph_23": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_29": {
                "variable": {
                    "value": "xxt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "v_svd",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "u_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(xxt, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x_, v_svd)",
                            "Call"
                        ],
                        [
                            "removenan(u_svd / tf.expand_dims(s_svd, 1))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_33": {
                "variable": {
                    "value": "s_svd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(xtx, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x_, u_svd, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "removenan(v_svd / tf.expand_dims(s_svd, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "xtx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "u_svd",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(xtx, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x_, u_svd, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "removenan(v_svd / tf.expand_dims(s_svd, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_41": {
                "variable": {
                    "value": "s_svd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(xxt, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x_, v_svd)",
                            "Call"
                        ],
                        [
                            "removenan(u_svd / tf.expand_dims(s_svd, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_48": {
                "input_": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(x_, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "SVD_grad_map(x, s_svd, u_svd, v_svd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [-1, min(HW, D)])",
                            "Call"
                        ],
                        [
                            "s",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_49": {
                "input_": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(x_, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "SVD_grad_map(x, s_svd, u_svd, v_svd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, [-1, HW, min(HW, D)])",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_50": {
                "input_": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.svd(x_, full_matrices=False)",
                            "Call"
                        ],
                        [
                            "SVD_grad_map(x, s_svd, u_svd, v_svd)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [-1, D, min(HW, D)])",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "dU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dV",
                            "variable"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_58": {
                "input": {
                    "value": "dV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dU",
                            "variable"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_59": {
                "input": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matrix_transpose_70": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_22": {
                "device_name": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "svd_25": {
                "variable": {
                    "value": "(s, u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ]
                    ]
                },
                "full_matrices": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "svd_31": {
                "variable": {
                    "value": "(_, u_svd, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_, x_, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "full_matrices": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "svd_39": {
                "variable": {
                    "value": "(_, _, v_svd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x_, x_, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "full_matrices": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "s_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(s)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_30": {
                "device_name": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_38": {
                "device_name": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "input": {
                    "value": "s_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(v_svd, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(u_svd, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "s_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.norm(v_svd, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.norm(u_svd, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.slice(u, [0, 0, 0], [-1, -1, n]), 1)",
                            "Call"
                        ],
                        [
                            "V",
                            "variable"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_diag(s)",
                            "Call"
                        ],
                        [
                            "S",
                            "Method Argument"
                        ],
                        [
                            "S",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nets/WResNet.py": {
        "tensorflow": {
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(x, scope='bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_22": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.batch_norm(x, scope='bn')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_109": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "feat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.conv2d(image, nChannels[0], [3, 3], 1, scope='conv0')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(image, nChannels[0], [7, 7], 2, scope='conv0')",
                            "Call"
                        ],
                        [
                            "NetworkBlock(std, n, nChannels[1 + i], stride[i], keep_rate, name='WResblock%d' % i)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(std, scope='bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.conv2d(image, nChannels[0], [3, 3], 1, scope='conv0')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(image, nChannels[0], [7, 7], 2, scope='conv0')",
                            "Call"
                        ],
                        [
                            "NetworkBlock(std, n, nChannels[1 + i], stride[i], keep_rate, name='WResblock%d' % i)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(std, scope='bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(std)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Teacher",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Distillation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_19": {
                "name": {
                    "value": "feat",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x_)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, out_planes, [1, 1], stride, scope='conv2')",
                            "Call"
                        ],
                        [
                            "BasicBlock(x, out_planes, stride=stride if i == 0 else 1, keep_rate=keep_rate, name='BasicBlock%d' % i)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_24": {
                "name": {
                    "value": "feat",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(out_)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tcl.conv2d(out if equalInOut else x, out_planes, [3, 3], stride, scope='conv0'), activation_fn=tf.nn.relu, scope='bn0')",
                            "Call"
                        ],
                        [
                            "tcl.dropout(out, keep_rate)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(out, out_planes, [3, 3], 1, scope='conv1')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_67": {
                "name": {
                    "value": "feat",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.conv2d(image, nChannels[0], [3, 3], 1, scope='conv0')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(image, nChannels[0], [7, 7], 2, scope='conv0')",
                            "Call"
                        ],
                        [
                            "NetworkBlock(std, n, nChannels[1 + i], stride[i], keep_rate, name='WResblock%d' % i)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(std, scope='bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(std)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_99": {
                "variable": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.conv2d(image, nChannels[0], [3, 3], 1, scope='conv0')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(image, nChannels[0], [7, 7], 2, scope='conv0')",
                            "Call"
                        ],
                        [
                            "NetworkBlock(tch, n, nChannels[1 + i], stride[i], keep_rate, name='WResblock%d' % i)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tch, scope='bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tch)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.conv2d(image, nChannels[0], [3, 3], 1, scope='conv0')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(image, nChannels[0], [7, 7], 2, scope='conv0')",
                            "Call"
                        ],
                        [
                            "NetworkBlock(tch, n, nChannels[1 + i], stride[i], keep_rate, name='WResblock%d' % i)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tch, scope='bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tch)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_100": {
                "name": {
                    "value": "feat",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "tch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tcl.conv2d(image, nChannels[0], [3, 3], 1, scope='conv0')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(image, nChannels[0], [7, 7], 2, scope='conv0')",
                            "Call"
                        ],
                        [
                            "NetworkBlock(tch, n, nChannels[1 + i], stride[i], keep_rate, name='WResblock%d' % i)",
                            "Call"
                        ],
                        [
                            "tcl.batch_norm(tch, scope='bn0')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tch)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nets/nets_factory.py": {
        "tensorflow": {}
    },
    "train_w_distill.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "IEP/CIFAR100/WResNet/IEP/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where checkpoints and event logs are written to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "Distillation",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "IEP",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Distillation method : IEP",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "cifar100",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Distillation method : cifar100, TinyImageNet, CUB200",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_22": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "WResNet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Distillation method : ResNet, WResNet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "main_scope",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "Student",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "networ`s scope",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_205": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.one_hot_encoding(label_ph, num_label, on_value=1.0)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "end_points['Logits']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "accuracy_206": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(tf.argmax(end_points['Logits'], 1), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.cast(tf.argmax(label, 1), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_verbosity_41": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "image_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + image_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "label_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "is_training_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "create_global_step_64": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_div_65": {
                "variable": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(global_step, tf.float32) * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "dataset_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "merge_81": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.SUMMARIES)[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "train_acc_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "val_acc_place",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_88": {
                "variable": {
                    "value": "val_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(val_summary)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "val_summary_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FileWriter_91": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'%s' % FLAGS.train_dir",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "save_summaries_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "ConfigProto_92": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_206": {
                "x": {
                    "value": "tf.argmax(label, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "learning_rate_scheduler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_213": {
                "variable": {
                    "value": "Learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater_equal(e, ie + int(te * dp))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : Learning_rate * decay_rate",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : Learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "scalar_215": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "Learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ],
                        [
                            "tf.cond(tf.greater_equal(e, ie + int(te * dp)), lambda : Learning_rate * decay_rate, lambda : Learning_rate)",
                            "Call"
                        ],
                        [
                            "Learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_86": {
                "name": {
                    "value": "accuracy/training_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_acc_place",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_87": {
                "name": {
                    "value": "accuracy/validation_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "val_acc_place",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_98": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_100": {
                "variable": {
                    "value": "global_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_197": {
                "msg": {
                    "value": "Finished training! Saving model to disk.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_206": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.one_hot_encoding(label_ph, num_label, on_value=1.0)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_81": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_187": {
                "key": {
                    "value": "BN_collection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SessionLog_198": {
                "status": {
                    "value": "tf.SessionLog.STOP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_213": {
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ie + int(te * dp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_104": {
                "variable": {
                    "value": "v._initial_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "teacher[v.name[:-2]].reshape(*v.get_shape().as_list())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_151": {
                "msg": {
                    "value": "'Epoch %s Step %s - train_Accuracy : %.2f%%  val_Accuracy : %.2f%%' % (str(epoch_).rjust(3, '0'), str(step).rjust(6, '0'), sum_train_accuracy, sum_val_accuracy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_176": {
                "msg": {
                    "value": "global step %s: loss = %.4f (%.3f sec/step)",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(step).rjust(6, '0')",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "np.mean(total_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_173": {
                "key": {
                    "value": "BN_collection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_105": {
                "ref": {
                    "value": "v._variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "v._initial_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "v.name[:-2] + '/Assign'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}