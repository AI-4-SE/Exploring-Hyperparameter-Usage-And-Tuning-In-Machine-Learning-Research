{
    "config.py": {
        "tensorflow": {}
    },
    "eval.py": {
        "tensorflow": {}
    },
    "evaluationTool.py": {
        "tensorflow": {}
    },
    "makeLabelFile.py": {
        "tensorflow": {}
    },
    "nets/cnn.py": {
        "tensorflow": {
            "identity_42": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=self.num_filters, kernel_size=self.kernel_size, strides=self.conv_stride, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=self.first_pool_size, strides=self.first_pool_stride, padding='SAME', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=num_filters, bottleneck=self.bottleneck, block_fn=self.block_fn, blocks=num_blocks, strides=self.block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=self.second_pool_size, strides=self.second_pool_stride, padding='VALID', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_44": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=self.num_filters, kernel_size=self.kernel_size, strides=self.conv_stride, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=self.first_pool_size, strides=self.first_pool_stride, padding='SAME', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=num_filters, bottleneck=self.bottleneck, block_fn=self.block_fn, blocks=num_blocks, strides=self.block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=self.second_pool_size, strides=self.second_pool_stride, padding='VALID', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "self.first_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.first_pool_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_48": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=self.num_filters, kernel_size=self.kernel_size, strides=self.conv_stride, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=self.first_pool_size, strides=self.first_pool_stride, padding='SAME', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=num_filters, bottleneck=self.bottleneck, block_fn=self.block_fn, blocks=num_blocks, strides=self.block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=self.second_pool_size, strides=self.second_pool_stride, padding='VALID', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "initial_max_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=self.num_filters, kernel_size=self.kernel_size, strides=self.conv_stride, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=self.first_pool_size, strides=self.first_pool_stride, padding='SAME', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=num_filters, bottleneck=self.bottleneck, block_fn=self.block_fn, blocks=num_blocks, strides=self.block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=self.second_pool_size, strides=self.second_pool_stride, padding='VALID', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_pooling2d_60": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=self.num_filters, kernel_size=self.kernel_size, strides=self.conv_stride, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=self.first_pool_size, strides=self.first_pool_stride, padding='SAME', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=num_filters, bottleneck=self.bottleneck, block_fn=self.block_fn, blocks=num_blocks, strides=self.block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=self.second_pool_size, strides=self.second_pool_stride, padding='VALID', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "self.second_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.second_pool_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "self.data_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_64": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_fixed_padding(inputs=inputs, filters=self.num_filters, kernel_size=self.kernel_size, strides=self.conv_stride, data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_conv')",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=inputs, pool_size=self.first_pool_size, strides=self.first_pool_stride, padding='SAME', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'initial_max_pool')",
                            "Call"
                        ],
                        [
                            "block_layer(inputs=inputs, filters=num_filters, bottleneck=self.bottleneck, block_fn=self.block_fn, blocks=num_blocks, strides=self.block_strides[i], training=training, name='block_layer{}'.format(i + 1), data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "batch_norm(inputs, training, self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(inputs=inputs, pool_size=self.second_pool_size, strides=self.second_pool_stride, padding='VALID', data_format=self.data_format)",
                            "Call"
                        ],
                        [
                            "tf.identity(inputs, 'final_avg_pool')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "final_avg_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_112": {
                "variable": {
                    "value": "cell_1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hiddenDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_114": {
                "variable": {
                    "value": "cell_2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.hiddenDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_116": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=self.hiddenDim, state_is_tuple=True, activation=tf.tanh, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=self.hiddenDim, state_is_tuple=True, activation=tf.tanh, reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output[0], output[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [-1, self.input_height, self.input_width, self.input_channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(input, tf.float32)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_height, self.input_width, self.input_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_128": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [-1, self.input_height, self.input_width, self.input_channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(input, tf.float32)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network[0:20]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [self.input_frames, self.input_height, self.input_width, self.input_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.input_frames, self.input_height, self.input_width, self.input_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.conv_2d(input, 16, 3, activation='relu', name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 16, 3, activation='relu', name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 32, 3, activation='relu', name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 32, 3, activation='relu', name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 64, 3, activation='relu', name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 64, 3, activation='relu', name='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 128, 3, activation='relu', name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 128, 3, activation='relu', name='conv4_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 256, 3, activation='relu', name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 256, 3, activation='relu', name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "input / 255.0",
                            "BinOp"
                        ],
                        [
                            "self.vggLayer(network, 'mainCNN', reuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(network, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(network, [-1, self.input_frames, afterGBD])",
                            "Call"
                        ],
                        [
                            "self.build_RNN(network, reuse)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network, name='batch_fc')",
                            "Call"
                        ],
                        [
                            "tflearn.fully_connected(network, 1024, name='fc1', activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tflearn.conv_2d(input, 16, 3, activation='relu', name='conv1_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 16, 3, activation='relu', name='conv1_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 32, 3, activation='relu', name='conv2_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 32, 3, activation='relu', name='conv2_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 64, 3, activation='relu', name='conv3_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 64, 3, activation='relu', name='conv3_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 128, 3, activation='relu', name='conv4_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 128, 3, activation='relu', name='conv4_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 256, 3, activation='relu', name='conv5_1')",
                            "Call"
                        ],
                        [
                            "tflearn.conv_2d(network, 256, 3, activation='relu', name='conv5_2')",
                            "Call"
                        ],
                        [
                            "tflearn.max_pool_2d(network, 2, strides=2)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network)",
                            "Call"
                        ],
                        [
                            "input / 255.0",
                            "BinOp"
                        ],
                        [
                            "self.vggLayer(network, 'mainCNN', reuse)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(network, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(network, [-1, self.input_frames, afterGBD])",
                            "Call"
                        ],
                        [
                            "self.build_RNN(network, reuse)",
                            "Call"
                        ],
                        [
                            "tflearn.batch_normalization(network, name='batch_fc')",
                            "Call"
                        ],
                        [
                            "tflearn.fully_connected(network, 1024, name='fc1', activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.input_frames, afterGBD]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "'vggLayer_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "mainCNN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "reshape",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "mainRNN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "fc_part",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "mainRegression",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ],
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nets/common.py": {
        "tensorflow": {}
    },
    "nets/rnn.py": {
        "tensorflow": {
            "BasicLSTMCell_22": {
                "variable": {
                    "value": "cell_1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_23": {
                "variable": {
                    "value": "cell_2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_24": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=hidden_dim, state_is_tuple=True, activation=tf.tanh, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=hidden_dim, state_is_tuple=True, activation=tf.tanh, reuse=_reuse)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=hidden_dim, state_is_tuple=True, activation=tf.tanh, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=hidden_dim, state_is_tuple=True, activation=tf.tanh, reuse=_reuse)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_27": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output[0], output[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, input, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 1024, activation_fn=tf.nn.sigmoid, scope='fc/fc_3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, _x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "_input",
                            "variable"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, name='batch_' + _name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer4, [-1, _t, 3 * 3 * 256])",
                            "Call"
                        ],
                        [
                            "self.build_CNN(_input, _reuse, _width, _height, _channels, _timeStep)",
                            "Call"
                        ],
                        [
                            "self.build_RNN(output, _timeStep, _reuse, _width * _height * _channels)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_37": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, input, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 1024, activation_fn=tf.nn.sigmoid, scope='fc/fc_3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, _x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "_input",
                            "variable"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, name='batch_' + _name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer4, [-1, _t, 3 * 3 * 256])",
                            "Call"
                        ],
                        [
                            "self.build_CNN(_input, _reuse, _width, _height, _channels, _timeStep)",
                            "Call"
                        ],
                        [
                            "self.build_RNN(output, _timeStep, _reuse, _width * _height * _channels)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_53": {
                "variable": {
                    "value": "cell_1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "_reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_reuse",
                            "Method Argument"
                        ],
                        [
                            "_reuse",
                            "Method Argument"
                        ],
                        [
                            "_reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_55": {
                "variable": {
                    "value": "cell_2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "_reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_reuse",
                            "Method Argument"
                        ],
                        [
                            "_reuse",
                            "Method Argument"
                        ],
                        [
                            "_reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_57": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=hidden_dim, state_is_tuple=True, activation=tf.tanh, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=hidden_dim, state_is_tuple=True, activation=tf.tanh, reuse=_reuse)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=hidden_dim, state_is_tuple=True, activation=tf.tanh, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=hidden_dim, state_is_tuple=True, activation=tf.tanh, reuse=_reuse)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_x",
                            "Method Argument"
                        ],
                        [
                            "_x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_60": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output[0], output[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, input, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 1024, activation_fn=tf.nn.sigmoid, scope='fc/fc_3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, _x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "_input",
                            "variable"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, name='batch_' + _name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer4, [-1, _t, 3 * 3 * 256])",
                            "Call"
                        ],
                        [
                            "self.build_CNN(_input, _reuse, _width, _height, _channels, _timeStep)",
                            "Call"
                        ],
                        [
                            "self.build_RNN(output, _timeStep, _reuse, _width * _height * _channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool_80": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, input, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 1024, activation_fn=tf.nn.sigmoid, scope='fc/fc_3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, _x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "_input",
                            "variable"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, name='batch_' + _name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer4, [-1, _t, 3 * 3 * 256])",
                            "Call"
                        ],
                        [
                            "self.build_CNN(_input, _reuse, _width, _height, _channels, _timeStep)",
                            "Call"
                        ],
                        [
                            "self.build_RNN(output, _timeStep, _reuse, _width * _height * _channels)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "layer4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_vggLayer(layer3, 1, 'l4', 128, 256, True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _t, 3 * 3 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w_%d_' % i + _name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, iChannel, _oChannel]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tflayers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, input, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, scope='batch_fc2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 512, activation_fn=tf.nn.relu, scope='fc/fc_2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=0.9)",
                            "Call"
                        ],
                        [
                            "tflayers.fully_connected(output, 1024, activation_fn=tf.nn.sigmoid, scope='fc/fc_3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.nn.bidirectional_dynamic_rnn(cell_1, cell_2, _x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([output[0], output[1]], axis=2)",
                            "Call"
                        ],
                        [
                            "output[:, -1]",
                            "Subscript"
                        ],
                        [
                            "_input",
                            "variable"
                        ],
                        [
                            "TFLEARN.batch_normalization(output, name='batch_' + _name)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weight, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(output, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(layer4, [-1, _t, 3 * 3 * 256])",
                            "Call"
                        ],
                        [
                            "self.build_CNN(_input, _reuse, _width, _height, _channels, _timeStep)",
                            "Call"
                        ],
                        [
                            "self.build_RNN(output, _timeStep, _reuse, _width * _height * _channels)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w_%d_' % i + _name, shape=[3, 3, iChannel, _oChannel], initializer=tflayers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "linear_part",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "conv_part1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "_reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_reuse",
                            "Method Argument"
                        ],
                        [
                            "_reuse",
                            "Method Argument"
                        ],
                        [
                            "_reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "linear_part",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "_reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_reuse",
                            "Method Argument"
                        ],
                        [
                            "_reuse",
                            "Method Argument"
                        ],
                        [
                            "_reuse",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_x",
                            "Method Argument"
                        ],
                        [
                            "_x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _h, _w, _c]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train_queue.py": {
        "tensorflow": {
            "concat_43": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "grads",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(grads, 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_204": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "string_input_producer_107": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "foldPaths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "TFRecordReader_112": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_115": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'frames': tf.FixedLenFeature([], tf.int64), 'width': tf.FixedLenFeature([], tf.int64), 'height': tf.FixedLenFeature([], tf.int64), 'channels': tf.FixedLenFeature([], tf.int64), 'force': tf.FixedLenFeature([], tf.float32), 'material': tf.FixedLenFeature([], tf.string), 'degree': tf.FixedLenFeature([], tf.string), 'bright': tf.FixedLenFeature([], tf.string), 'video': tf.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_119": {
                "variable": {
                    "value": "force",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['force']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_120": {
                "variable": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['video']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['video'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(video, [config.IMAGE_FRAMES, config.IMAGE_WIDTH, config.IMAGE_HEIGHT, config.IMAGE_CHANNELS])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[config.IMAGE_FRAMES, config.IMAGE_WIDTH, config.IMAGE_HEIGHT, config.IMAGE_CHANNELS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shuffle_batch_123": {
                "variable": {
                    "value": "(video_batch, force_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[video, force]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "config.BATCH_SIZE * 20",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_128": {
                "variable": {
                    "value": "self.tower_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "video_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.shuffle_batch([video, force], batch_size=config.BATCH_SIZE, capacity=config.BATCH_SIZE * 20, num_threads=4, min_after_dequeue=5)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "config.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_129": {
                "variable": {
                    "value": "self.tower_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "force_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.shuffle_batch([video, force], batch_size=config.BATCH_SIZE, capacity=config.BATCH_SIZE * 20, num_threads=4, min_after_dequeue=5)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "config.NUM_GPUS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_136": {
                "variable": {
                    "value": "self.train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "self.optimizer.apply_gradients(global_step=self.global_step, grads_and_vars=average_gradients(self.all_gradients))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "self.global_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.all_losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "variable": {
                    "value": "self.global_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(tf.concat(self.all_outputs, axis=-1), tf.concat(self.tower_labels, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_161": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_162": {
                "name": {
                    "value": "global_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.global_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_163": {
                "name": {
                    "value": "global_mse",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.global_mse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_210": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_211": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_save_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "FileWriter_222": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(model_save_path, 'logs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_236": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_237": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_71": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_172": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_172": {
                "name": {
                    "value": "'tower_%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "gpu_index is not 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "get_variable_scope_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_206": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_87": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_88": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_89": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_90": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_91": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_92": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_93": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_94": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_95": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_146": {
                "x": {
                    "value": "tf.concat(self.all_outputs, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.concat(self.tower_labels, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_204": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_147": {
                "values": {
                    "value": "self.all_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_148": {
                "values": {
                    "value": "self.tower_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}