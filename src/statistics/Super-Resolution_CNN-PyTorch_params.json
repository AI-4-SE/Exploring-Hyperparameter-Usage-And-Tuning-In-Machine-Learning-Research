{
    "source/datamanager.py": {
        "sklearn": {
            "shuffle_54": {
                "variable": {
                    "value": "(self.list_train_lr, self.list_train_hr)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.list_train_lr",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.list_train_hr",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_63": {
                "ndarray": {
                    "value": "label_t",
                    "possible_values": [
                        [
                            "np.transpose(label, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.transpose(label, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "ndarray": {
                    "value": "label_t",
                    "possible_values": [
                        [
                            "np.transpose(label, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "np.transpose(label, (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and FLAGS.ngpu > 0 else cpu",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "source/neuralnet.py": {
        "torch": {
            "MSELoss_21": {
                "variable": {
                    "value": "self.mse",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_22": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=64, kernel_size=9, stride=1, padding=9 // 2)",
                    "possible_values": []
                }
            },
            "DataParallel_13": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "list(range(self.model.ngpu))",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "input": {
                    "value": "self.model(input)",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-12",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-12",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "9 // 2",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0 // 2",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "5 // 2",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "source/solver.py": {
        "torch": {
            "SummaryWriter_57": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "neuralnet.model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "PACK_PATH + '/runs/params'",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 / torch.sqrt(torch.mean((target - input) ** 2))",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "Y_tmp",
                    "possible_values": [
                        [
                            "np.transpose(Y_tmp, (0, 2, 3, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_132": {
                "f": {
                    "value": "PACK_PATH + '/runs/params'",
                    "possible_values": []
                }
            },
            "sqrt_29": {
                "input": {
                    "value": "torch.mean((target - input) ** 2)",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "(target - input) ** 2",
                    "possible_values": []
                }
            }
        }
    }
}