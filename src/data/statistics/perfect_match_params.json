{
    "perfect_match/data_access/mahalanobis_batch.py": {
        "sklearn": {
            "PCA_36": {
                "variable": {
                    "value": "self.pca",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "svd_solver": {
                    "value": "randomized",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BallTree_47": {
                "X": {
                    "value": "pair_data[treatment_data == t]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/data_access/patient_generator.py": {
        "sklearn": {
            "StratifiedShuffleSplit_65": {
                "variable": {
                    "value": "val_sss",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "num_validation_patients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor(num_patients * validation_fraction))",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "909",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StratifiedShuffleSplit_60": {
                "variable": {
                    "value": "test_sss",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "num_test_patients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor(num_patients * test_fraction))",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "909",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "perfect_match/data_access/propensity_batch.py": {
        "sklearn": {
            "SVC_48": {
                "variable": {
                    "value": "self.clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                }
            },
            "PCA_43": {
                "variable": {
                    "value": "self.pca",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "svd_solver": {
                    "value": "randomized",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/baselines/causal_forest.py": {
        "sklearn": {
            "Ridge_56": {
                "alpha": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/baselines/gaussian_process.py": {
        "sklearn": {
            "GaussianProcessRegressor_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/baselines/gradientboosted.py": {
        "sklearn": {
            "GradientBoostingClassifier_30": {
                "n_estimators": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.rint(kwargs['num_units']))",
                            "Call"
                        ]
                    ]
                },
                "max_depth": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.rint(kwargs['num_layers']))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "perfect_match/models/baselines/knn.py": {
        "sklearn": {
            "KNeighborsRegressor_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/baselines/ordinary_least_squares.py": {
        "sklearn": {
            "LinearRegression_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/baselines/random_forest.py": {
        "sklearn": {
            "RandomForestRegressor_30": {
                "n_estimators": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.rint(kwargs['num_units']))",
                            "Call"
                        ]
                    ]
                },
                "max_depth": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.rint(kwargs['num_layers']))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "perfect_match/models/benchmarks/news_benchmark.py": {
        "sklearn": {
            "euclidean_distances_162": {
                "X": {
                    "value": "self.data_access.standardise_entry(x).reshape((1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "centroid.reshape((1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/benchmarks/tcga_benchmark.py": {
        "sklearn": {
            "cosine_similarity_176": {
                "X": {
                    "value": "x[indices].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "centroid.reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/benchmarks/twins_benchmark.py": {
        "sklearn": {
            "cosine_similarity_176": {
                "X": {
                    "value": "self.data_access.standardise_entry(np.array(x[7:], dtype='float32')).reshape((1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "centroid.reshape((1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/model_eval.py": {
        "sklearn": {
            "roc_curve_139": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(y_pred, axis=0)",
                            "Call"
                        ],
                        [
                            "y_pred.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[0], treatment_outputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_147": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_thresholded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y_pred > threshold).astype(np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_148": {
                "variable": {
                    "value": "auc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(y_pred, axis=0)",
                            "Call"
                        ],
                        [
                            "y_pred.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[0], treatment_outputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_161": {
                "variable": {
                    "value": "(precision, recall, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(y_pred, axis=0)",
                            "Call"
                        ],
                        [
                            "y_pred.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[0], treatment_outputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_162": {
                "variable": {
                    "value": "auprc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "reorder": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "r2_score_164": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(y_pred, axis=0)",
                            "Call"
                        ],
                        [
                            "y_pred.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[0], treatment_outputs))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_171": {
                "variable": {
                    "value": "f1_value",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_thresholded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y_pred > threshold).astype(np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_214": {
                "variable": {
                    "value": "auc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(y_pred, axis=0)",
                            "Call"
                        ],
                        [
                            "y_pred.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[0], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "average_precision_score_220": {
                "variable": {
                    "value": "auprc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(y_pred, axis=0)",
                            "Call"
                        ],
                        [
                            "y_pred.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[0], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "r2_score_221": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(y_pred, axis=0)",
                            "Call"
                        ],
                        [
                            "y_pred.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[0], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "variance_weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_224": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_categorical(np.argmax(y_pred, axis=-1), num_classes=y_pred.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_178": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true[:, present_columns]",
                            "Subscript"
                        ],
                        [
                            "np.array(y_true)",
                            "Call"
                        ],
                        [
                            "np.concatenate(y_true, axis=0)",
                            "Call"
                        ],
                        [
                            "y_true.reshape((-1, output_dim))",
                            "Call"
                        ],
                        [
                            "np.column_stack(map(lambda x: x[1], treatment_outputs))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_thresholded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y_pred > threshold).astype(np.int)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "perfect_match/apps/evaluate.py": {
        "tensorflow": {
            "ConfigProto_91": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_93": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_88": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args['seed']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "perfect_match/apps/main.py": {
        "tensorflow": {
            "ConfigProto_29": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_31": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "perfect_match/apps/util.py": {
        "tensorflow": {}
    },
    "perfect_match/models/baselines/cfr/cfr_net.py": {
        "tensorflow": {
            "ConfigProto_23": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_25": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_39": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(var, name=name)",
                            "Call"
                        ],
                        [
                            "self._create_variable(initializer, name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_%d' % (basename, i)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, input_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.imbalance_loss_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "r_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.l2_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "r_lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.dropout_representation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.dropout_regression",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.p_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "p_treated",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_233": {
                "variable": {
                    "value": "i0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(t < 1)[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_234": {
                "variable": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(t > 0)[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_236": {
                "variable": {
                    "value": "rep0",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(t < 1)[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_237": {
                "variable": {
                    "value": "rep1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(t > 0)[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_stitch_248": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[i0, i1]",
                    "type": "List",
                    "possible_values": []
                },
                "data": {
                    "value": "[y0, y1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_252": {
                "variable": {
                    "value": "y_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y0, y1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_260": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_261": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_263": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False, dtype='int64')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "iterations_per_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "learning_rate_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.97",
                            "Method Argument"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_266": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate, global_step, iterations_per_decay, learning_rate_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_151": {
                "variable": {
                    "value": "imb_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_214": {
                "variable": {
                    "value": "h_out[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "h_out[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - dropout_regression",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_222": {
                "t": {
                    "value": "weights_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._create_variable(tf.random_normal([dim_out, 1], stddev=weight_initialisation_std / np.sqrt(dim_out)), 'w_pred')",
                            "Call"
                        ],
                        [
                            "weights_pred0 + weights_pred1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_loss_63": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(var, name=name)",
                            "Call"
                        ],
                        [
                            "self._create_variable(initializer, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "risk",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sample_weight * tf.square(self.y_ - y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "variable": {
                    "value": "pred_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(self.y_ - y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_146": {
                "t": {
                    "value": "weights_in[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_226": {
                "a": {
                    "value": "h_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_out[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "weights_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._create_variable(tf.random_normal([dim_out, 1], stddev=weight_initialisation_std / np.sqrt(dim_out)), 'w_pred')",
                            "Call"
                        ],
                        [
                            "weights_pred0 + weights_pred1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "tf.square(h_rep)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "input_tensor": {
                    "value": "sample_weight * tf.square(self.y_ - y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_209": {
                "initial_value": {
                    "value": "tf.zeros([1, dim_out])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_210": {
                "a": {
                    "value": "h_out[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "weights_out[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_233": {
                "condition": {
                    "value": "t < 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_234": {
                "condition": {
                    "value": "t > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "square_112": {
                "x": {
                    "value": "h_rep",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "input_tensor": {
                    "value": "sample_weight * res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "input_tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.y_ * tf.log(y) + (1.0 - self.y_) * tf.log(1.0 - y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "tf.square(self.y_ - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_160": {
                "variable": {
                    "value": "imb_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mmd2_rbf(h_rep_norm, self.t, p_ipm, rbf_sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "shape": {
                    "value": "[1, dim_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_132": {
                "x": {
                    "value": "self.y_ - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_136": {
                "x": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_141": {
                "x": {
                    "value": "self.y_ - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "self.y_ - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_135": {
                "x": {
                    "value": "-y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_161": {
                "x": {
                    "value": "self.imbalance_loss_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_164": {
                "x": {
                    "value": "self.imbalance_loss_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/baselines/cfr/util.py": {
        "tensorflow": {}
    },
    "perfect_match/models/baselines/ganite_package/ganite_builder.py": {
        "tensorflow": {
            "placeholder_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, input_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "y_f",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "y_full",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_treatments]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_45": {
                "variable": {
                    "value": "t_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(t, 'int32')",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "propensity_loss_cf",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=propensity_scores, labels=t_one_hot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size), tf.cast(t, 'int32')[:, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_52": {
                "variable": {
                    "value": "y_f_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_pred_cf",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size), tf.cast(t, 'int32')[:, 0]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_int32(tf.where(tf.equal(tf.reshape(t, (-1,)), i))), (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_57": {
                "variable": {
                    "value": "supervised_loss_cf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.squared_difference(y_f_i[:, 0], y_f_pred_i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_67": {
                "variable": {
                    "value": "supervised_loss_ite",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.squared_difference(y_full_i, y_pred_ite_i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, 1], name='t')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_82": {
                "variable": {
                    "value": "current_last_layer_h",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, input_dim], name='x')",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size), tf.cast(t, 'int32')[:, 0]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.to_int32(tf.where(tf.equal(tf.reshape(t, (-1,)), i))), (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_86": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_mlp(current_last_layer_h, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "z_g",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_treatments - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "mlp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y_f, t, z_g]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_124": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, input_dim], name='x')",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_138": {
                "variable": {
                    "value": "mlp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_140": {
                "variable": {
                    "value": "propensity_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, input_dim], name='x')",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "z_i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_treatments]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "z_i",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_176": {
                "variable": {
                    "value": "mlp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, z_i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_178": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, input_dim], name='x')",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_192": {
                "variable": {
                    "value": "mlp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_194": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, input_dim], name='x')",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ],
                        [
                            "build_mlp(mlp_input, num_layers, num_units, dropout, nonlinearity)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, 1], name='t')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_47": {
                "logits": {
                    "value": "propensity_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GANITEBuilder.build_counterfactual_discriminator(input_dim, x, t, y_pred, num_units, dropout, l2_weight, learning_rate, num_layers, num_treatments, with_bn, nonlinearity, initializer)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=num_treatments, use_bias=True, bias_initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "t_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(t, 'int32'), num_treatments)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_50": {
                "input": {
                    "value": "y_pred_cf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_f_i[:, 0], y_f_pred_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "tf.log(1 - d_ite_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_full_i, y_pred_ite_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_91": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "g_cf",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "d_cf",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "g_ite",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "d_ite",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer()",
                            "Call"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ],
                        [
                            "tf.variance_scaling_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squared_difference_57": {
                "x": {
                    "value": "y_f_i[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y_f_pred_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_f_pred",
                            "variable"
                        ]
                    ]
                }
            },
            "log_63": {
                "x": {
                    "value": "1 - d_ite_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_67": {
                "x": {
                    "value": "y_full_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_full",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred_ite_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred_ite",
                            "variable"
                        ]
                    ]
                }
            },
            "to_int32_81": {
                "x": {
                    "value": "tf.where(tf.equal(tf.reshape(t, (-1,)), i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_51": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape=[None, 1], name='t')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_81": {
                "condition": {
                    "value": "tf.equal(tf.reshape(t, (-1,)), i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_81": {
                "x": {
                    "value": "tf.reshape(t, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_treatments)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "perfect_match/models/baselines/ganite_package/ganite_model.py": {
        "tensorflow": {
            "ConfigProto_31": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_33": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_54": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_75": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_83": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "global_step_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "global_step_2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "global_step_3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "global_step_4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_90": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/distributions.py": {
        "tensorflow": {
            "reduce_sum_29": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_30": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_42": {
                "variable": {
                    "value": "Xt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, i))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_43": {
                "variable": {
                    "value": "nt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(Xt)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p * tf.ones(tf.shape(tf.where(tf.equal(t, i))[:, 0:1])) / nt, (1 - p) * tf.ones((1, 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "M_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pdist2sq(Xt, Xc)",
                            "Call"
                        ],
                        [
                            "safe_sqrt(pdist2sq(Xt, Xc))",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_59": {
                "variable": {
                    "value": "M_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pdist2sq(Xt, Xc)",
                            "Call"
                        ],
                        [
                            "safe_sqrt(pdist2sq(Xt, Xc))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "10 / (nc * nt)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_60": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(M)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_61": {
                "variable": {
                    "value": "eff_lam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lam / M_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "col",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[delta * tf.ones(tf.shape(M[:, 0:1])), tf.zeros((1, 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[M, row]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_73": {
                "variable": {
                    "value": "Mt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Mt, col]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_97": {
                "variable": {
                    "value": "Xc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, 0))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_98": {
                "variable": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(Xc)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[(1 - p) * tf.ones(tf.shape(tf.where(tf.equal(t, 0))[:, 0:1])) / nc, p * tf.ones((1, 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "total_D",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_125": {
                "variable": {
                    "value": "is_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(ic)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_126": {
                "variable": {
                    "value": "total_D",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_empty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.size(it), 0)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.size(ic), 0)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.zeros((1,))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : calculate_distances(X, t, ic, p, lam, its, sq, backpropT, num_treatments)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "x": {
                    "value": "tf.clip_by_value(x, lbound, np.inf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_89": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u * (tf.transpose(v) * K)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(T)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_107": {
                "variable": {
                    "value": "is_empty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(it)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_109": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_empty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.size(it), 0)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.size(ic), 0)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.zeros((1,))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : calculate_distance(i, it, X, Xc, nc, b, t, p, lam, its, sq, backpropT)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_29": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_38": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "lbound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SQRT_CONST",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_60": {
                "input_tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pdist2sq(Xt, Xc)",
                            "Call"
                        ],
                        [
                            "safe_sqrt(pdist2sq(Xt, Xc))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_65": {
                "shape": {
                    "value": "tf.shape(M[0:1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_77": {
                "x": {
                    "value": "-Mlam",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_84": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "variable"
                        ],
                        [
                            "1.0 / tf.matmul(ainvK, b / tf.transpose(tf.matmul(tf.transpose(u), K)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T * Mt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_124": {
                "condition": {
                    "value": "tf.equal(t, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_125": {
                "input": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, 0))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_28": {
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_31": {
                "a": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(Y), 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_43": {
                "input": {
                    "value": "Xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(X, it)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_65": {
                "input": {
                    "value": "M[0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "a": {
                    "value": "tf.transpose(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-Mlam) + 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "a": {
                    "value": "tf.transpose(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-Mlam) + 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_86": {
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b / tf.transpose(tf.matmul(tf.transpose(u), K))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_98": {
                "input": {
                    "value": "Xc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(X, ic)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_106": {
                "condition": {
                    "value": "tf.equal(t, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "size_107": {
                "input": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, i))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_124": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_46": {
                "shape": {
                    "value": "tf.shape(tf.where(tf.equal(t, i))[:, 0:1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_66": {
                "shape": {
                    "value": "tf.shape(M[:, 0:1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_101": {
                "shape": {
                    "value": "tf.shape(tf.where(tf.equal(t, 0))[:, 0:1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_106": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(0, its)",
                            "Call"
                        ],
                        [
                            "range(1, num_treatments)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "M[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_83": {
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "variable"
                        ],
                        [
                            "1.0 / tf.matmul(ainvK, b / tf.transpose(tf.matmul(tf.transpose(u), K)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "tf.where(tf.equal(t, i))[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "tf.where(tf.equal(t, 0))[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_46": {
                "condition": {
                    "value": "tf.equal(t, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_101": {
                "condition": {
                    "value": "tf.equal(t, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_46": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(0, its)",
                            "Call"
                        ],
                        [
                            "range(1, num_treatments)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_101": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/model_builder.py": {
        "tensorflow": {
            "dynamic_stitch_137": {
                "variable": {
                    "value": "stitched",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "data_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(tf.to_int32, x[:num_tensors / 2])",
                            "Call"
                        ],
                        [
                            "map(tf.to_int32, x[:num_tensors / 2])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(tf.to_float, x[num_tensors / 2:])",
                            "Call"
                        ],
                        [
                            "map(tf.to_float, x[num_tensors / 2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "dynamic_stitch_245": {
                "variable": {
                    "value": "stitched",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "data_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(tf.to_int32, x[:num_tensors / 2])",
                            "Call"
                        ],
                        [
                            "map(tf.to_int32, x[:num_tensors / 2])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(tf.to_float, x[num_tensors / 2:])",
                            "Call"
                        ],
                        [
                            "map(tf.to_float, x[num_tensors / 2:])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_179": {
                "variable": {
                    "value": "cat_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(0, tf.shape(x[0])[0]), K.squeeze(tf.cast(x[1], 'int32'), axis=-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_nd_181": {
                "params": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "cat_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(0, tf.shape(x[0])[0]), K.squeeze(tf.cast(x[1], 'int32'), axis=-1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_215": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_int32_119": {
                "x": {
                    "value": "tf.where(tf.equal(tf.reshape(x, (-1,)), i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_124": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(get_indices_equal_to)(treatment_input)",
                            "Call"
                        ],
                        [
                            "Lambda(get_indices_equal_to)(treatment_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_215": {
                "x": {
                    "value": "tf.where(tf.equal(tf.reshape(x, (-1,)), i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_119": {
                "condition": {
                    "value": "tf.equal(tf.reshape(x, (-1,)), i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_176": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_215": {
                "condition": {
                    "value": "tf.equal(tf.reshape(x, (-1,)), i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_219": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(get_indices_equal_to)(treatment_input)",
                            "Call"
                        ],
                        [
                            "Lambda(get_indices_equal_to)(treatment_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_119": {
                "x": {
                    "value": "tf.reshape(x, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, 1 + len(extra_loss))",
                            "Call"
                        ],
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_treatments)",
                            "Call"
                        ],
                        [
                            "range(num_treatments)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_179": {
                "x": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_215": {
                "x": {
                    "value": "tf.reshape(x, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, 1 + len(extra_loss))",
                            "Call"
                        ],
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_treatments)",
                            "Call"
                        ],
                        [
                            "range(num_treatments)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_222": {
                "params": {
                    "value": "propensity_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Lambda(lambda x: tf.stop_gradient(x))(propensity_output)",
                            "Call"
                        ],
                        [
                            "Lambda(get_treatment_propensities)([propensity_dropout, treatment_input])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: 1.0 - gamma - 1.0 / 2.0 * (-x * tf.log(x) - (1 - x) * tf.log(1 - x)))(propensity_dropout)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(get_indices_equal_to)(treatment_input)",
                            "Call"
                        ],
                        [
                            "Lambda(get_indices_equal_to)(treatment_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_179": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_81": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_184": {
                "x": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "perfect_match/models/pehe_loss.py": {
        "tensorflow": {
            "reduce_sum_25": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_37": {
                "variable": {
                    "value": "x_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "Ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, 0))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(t, 0))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_38": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, 1))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(t, 1))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_42": {
                "variable": {
                    "value": "nn_t",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, 0))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(t, 0))[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmin(D, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_43": {
                "variable": {
                    "value": "nn_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, 1))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(t, 1))[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.argmin(D, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_63": {
                "variable": {
                    "value": "pehe_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(eff_pred - eff_nn))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_29": {
                "x": {
                    "value": "D + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_25": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_34": {
                "condition": {
                    "value": "tf.equal(t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_35": {
                "condition": {
                    "value": "tf.equal(t, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_42": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C + tf.transpose(ny) + nx",
                            "BinOp"
                        ],
                        [
                            "pdist2(x_c, x_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_43": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C + tf.transpose(ny) + nx",
                            "BinOp"
                        ],
                        [
                            "pdist2(x_c, x_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_45": {
                "input": {
                    "value": "nn_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(It, tf.argmin(D, 1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_53": {
                "condition": {
                    "value": "tf.equal(t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_54": {
                "condition": {
                    "value": "tf.equal(t, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_56": {
                "params": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "nn_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(Ic, tf.argmin(D, 0))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_58": {
                "params": {
                    "value": "yf_p",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, 1))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(t, 1))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "tf.square(eff_pred - eff_nn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "these_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(x, t1_indices), tf.gather(x, t2_indices)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "y_pred_these_treatments",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(y_pred, t1_indices), tf.gather(y_pred, t2_indices)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "y_true_these_treatments",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(y_true, t1_indices), tf.gather(y_true, t2_indices)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "these_treatments",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones((tf.shape(t1_indices)[0],), dtype='int32') * i, tf.ones((tf.shape(t2_indices)[0],), dtype='int32') * j]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_87": {
                "variable": {
                    "value": "these_y_pred_f",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_pred_these_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.gather(y_pred, t1_indices), tf.gather(y_pred, t2_indices)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.concat([tf.range(tf.shape(y_pred_these_treatments)[0]), these_treatments], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_92": {
                "variable": {
                    "value": "inverse_treatments",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones((tf.shape(t1_indices)[0],), dtype='int32') * j, tf.ones((tf.shape(t2_indices)[0],), dtype='int32') * i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_96": {
                "variable": {
                    "value": "these_y_pred_cf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_pred_these_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.gather(y_pred, t1_indices), tf.gather(y_pred, t2_indices)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.concat([tf.range(tf.shape(y_pred_these_treatments)[0]), inverse_treatments], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_100": {
                "variable": {
                    "value": "these_treatments",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros((tf.shape(t1_indices)[0],), dtype='int32'), tf.ones((tf.shape(t2_indices)[0],), dtype='int32')]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_24": {
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_27": {
                "a": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(Y), 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_34": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_35": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_53": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_54": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_57": {
                "params": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "It",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, 1))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.equal(t, 1))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_63": {
                "x": {
                    "value": "eff_pred - eff_nn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_74": {
                "condition": {
                    "value": "tf.equal(t, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_75": {
                "condition": {
                    "value": "tf.equal(t, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_88": {
                "values": {
                    "value": "[tf.range(tf.shape(y_pred_these_treatments)[0]), these_treatments]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_97": {
                "values": {
                    "value": "[tf.range(tf.shape(y_pred_these_treatments)[0]), inverse_treatments]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_74": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_treatments)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_75": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(num_treatments)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_77": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t2_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, j))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_78": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t1_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, i))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_79": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t2_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, j))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_80": {
                "params": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t1_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, i))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_81": {
                "params": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t2_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, j))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_100": {
                "shape": {
                    "value": "(tf.shape(t1_indices)[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_101": {
                "shape": {
                    "value": "(tf.shape(t2_indices)[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_83": {
                "shape": {
                    "value": "(tf.shape(t1_indices)[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_84": {
                "shape": {
                    "value": "(tf.shape(t2_indices)[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_92": {
                "shape": {
                    "value": "(tf.shape(t1_indices)[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_93": {
                "shape": {
                    "value": "(tf.shape(t2_indices)[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_88": {
                "input": {
                    "value": "y_pred_these_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.gather(y_pred, t1_indices), tf.gather(y_pred, t2_indices)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_97": {
                "input": {
                    "value": "y_pred_these_treatments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.gather(y_pred, t1_indices), tf.gather(y_pred, t2_indices)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_100": {
                "input": {
                    "value": "t1_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, i))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_101": {
                "input": {
                    "value": "t2_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, j))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "t1_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, i))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_84": {
                "input": {
                    "value": "t2_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, j))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_92": {
                "input": {
                    "value": "t1_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, i))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_93": {
                "input": {
                    "value": "t2_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(t, j))[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "perfect_match/models/per_sample_dropout.py": {
        "tensorflow": {
            "expand_dims_58": {
                "variable": {
                    "value": "tile_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.shape(inputs)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.reshape(tiled_keep_prob, [tile_shape[0], tf.shape(keep_prob)[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_61": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "keep_prob + K.random_uniform(shape=tf.shape(inputs))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - self.rate",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(K.reshape(tiled_keep_prob, [tile_shape[0], tf.shape(keep_prob)[0]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_61": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}