{
    "nemo/transf/equalize.py": {
        "sklearn": {
            "LinearRegression_194": {
                "variable": {
                    "value": "regr",
                    "type": "Variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_193": {
                "variable": {
                    "value": "coeff",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(min_before)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "m_before.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_90": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range_after / range_before",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_197": {
                "variable": {
                    "value": "coeff[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "regr.coef_[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "m_before.weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_dim * (s.unsqueeze(1),)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_101": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/evaluation.py": {
        "torch": {}
    },
    "nemo/graph.py": {
        "torch": {
            "tensor_264": {
                "data": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eps_in",
                            "Name"
                        ],
                        [
                            "self.module_nodes[curr.key].get_output_eps(eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/quant/pact.py": {
        "torch": {
            "cat_112": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.as_tensor((-np.infty,), device=alpha.device), -alpha, -alpha + beta_cumsum[:-1], torch.as_tensor((+np.infty,), device=alpha.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "sr",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(step.shape) + len(x.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_119": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor(beta / eps) * eps",
                            "BinOp"
                        ],
                        [
                            "beta.abs()",
                            "Call"
                        ],
                        [
                            "self.weight.data.max()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(1, device=alpha.device), m)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(1, device=alpha.device), q)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.leaky_relu(x, self.leaky)",
                            "Call"
                        ],
                        [
                            "np.linspace(alpha_n.cpu().detach().numpy(), beta.cpu().detach().numpy(), dyn_range_bins)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.leaky_relu(x, self.leaky)",
                            "Call"
                        ],
                        [
                            "np.linspace(alpha_n.cpu().detach().numpy(), beta.cpu().detach().numpy(), dyn_range_bins)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_131": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "inside",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x >= step[:-1]) * (x < step[1:])",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "m * x + q",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "t[0] * eps_ratio",
                            "BinOp"
                        ],
                        [
                            "y * self.kernel_size[0]",
                            "BinOp"
                        ],
                        [
                            "(y / D).floor()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.where(inside, m * x + q, y).sum(0)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "torch.nn.functional.avg_pool2d(input, self.kernel_size, self.stride, self.padding, self.ceil_mode, self.count_include_pad, self.divisor_override)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.avg_pool1d(input, self.kernel_size, self.stride, self.padding, self.ceil_mode, self.count_include_pad)",
                            "Call"
                        ],
                        [
                            "kappa * x + lamda",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.conv2d(x_quant, W_quant, self.bias, self.stride, self.padding if not self.deployment or self.bias is None else 0, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.linear(x_quant, W_quant, self.bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_131": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_56": {
                "data": {
                    "value": "t.clone().detach().type(torch.int64) * eps_ratio.clone().detach().type(torch.int64) // D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "t.device",
                            "Attribute"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eps / beta",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.ones(1, device=alpha.device), m))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros_like(beta)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.zeros(1, device=alpha.device), q))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(q, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_183": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_input_nonclipped",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(input >= 0) * (input < alpha)",
                            "BinOp"
                        ],
                        [
                            "(input >= -alpha) * (input < alpha)",
                            "BinOp"
                        ],
                        [
                            "(input >= -alpha_quant) * (input < beta_quant)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_184": {
                "variable": {
                    "value": "grad_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_input_gtalpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input >= alpha",
                            "Compare"
                        ],
                        [
                            "(input >= alpha) + (input < -alpha)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_184": {
                "variable": {
                    "value": "grad_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_238": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_input_nonclipped",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(input >= 0) * (input < alpha)",
                            "BinOp"
                        ],
                        [
                            "(input >= -alpha) * (input < alpha)",
                            "BinOp"
                        ],
                        [
                            "(input >= -alpha_quant) * (input < beta_quant)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_239": {
                "variable": {
                    "value": "grad_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_input_gtalpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input >= alpha",
                            "Compare"
                        ],
                        [
                            "(input >= alpha) + (input < -alpha)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_239": {
                "variable": {
                    "value": "grad_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_302": {
                "variable": {
                    "value": "grad_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_input_ltalpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input < -alpha_quant",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_302": {
                "variable": {
                    "value": "grad_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_303": {
                "variable": {
                    "value": "grad_beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where_input_gtbeta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input >= beta_quant",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1).to(where_input_nonclipped.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_303": {
                "variable": {
                    "value": "grad_beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_345": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((alpha,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "backprop_alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_354": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(self.alpha.data).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_355": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(self.alpha.data).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_356": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(self.alpha.data).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_357": {
                "variable": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones_like(self.alpha.data).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_526": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "divisor_override": {
                    "value": "self.divisor_override",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool1d_555": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_593": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.ceil(alpha / eps) * eps",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_688": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.ceil(alpha / eps) * eps",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_697": {
                "variable": {
                    "value": "self.kappa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nb_channels).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_698": {
                "variable": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nb_channels).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_769": {
                "variable": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_770": {
                "variable": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_1016": {
                "variable": {
                    "value": "self.W_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((alpha,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1020": {
                "variable": {
                    "value": "self.x_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((2.0,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_1125": {
                "variable": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "(self.weight.data - mean_per_chan).abs() < stdev_per_chan * threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_per_chan",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.data.mean((2, 3), keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.weight.data.mean()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_1182": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_quant",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pact_quantize_signed(input, self.x_alpha / (2.0 ** self.x_precision.get_bits() - 1), self.x_alpha)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.nn.functional.pad(x_quant, pad, 'constant', self.padding_value)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(input, self.x_alpha / (2.0 ** self.x_precision.get_bits() - 1), self.x_alpha)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "W_quant",
                    "type": "Call",
                    "possible_values": [
                        [
                            "W.clone().detach()",
                            "Call"
                        ],
                        [
                            "W.clone().detach()",
                            "Call"
                        ],
                        [
                            "W.clone().detach() + eps * 0.5",
                            "BinOp"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, eps, torch.ceil(self.W_alpha / eps) * eps, torch.floor(self.W_beta / eps) * eps, train_loop=self.train_loop, train_loop_oldprec=self.train_loop_oldprec)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta, train_loop=self.train_loop)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta, train_loop=self.train_loop)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding if not self.deployment or self.bias is None else 0",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_1246": {
                "variable": {
                    "value": "self.W_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((alpha,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1250": {
                "variable": {
                    "value": "self.x_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((2.0,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1398": {
                "variable": {
                    "value": "self.W_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((alpha,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1401": {
                "variable": {
                    "value": "self.x_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((2.0,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_1476": {
                "variable": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "(self.weight.data - mean_per_chan).abs() < stdev_per_chan * threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_per_chan",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight.data.mean((2, 3), keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.weight.data.mean()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_1521": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_quant",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pact_quantize_signed(input, self.x_alpha / (2.0 ** self.x_precision.get_bits() - 1), self.x_alpha)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.nn.functional.pad(x_quant, pad, 'constant', self.padding_value)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(input, self.x_alpha / (2.0 ** self.x_precision.get_bits() - 1), self.x_alpha)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "W_quant",
                    "type": "Call",
                    "possible_values": [
                        [
                            "W.clone().detach()",
                            "Call"
                        ],
                        [
                            "W.clone().detach()",
                            "Call"
                        ],
                        [
                            "W.clone().detach() + eps * 0.5",
                            "BinOp"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, eps, torch.ceil(self.W_alpha / eps) * eps, torch.floor(self.W_beta / eps) * eps, train_loop=self.train_loop, train_loop_oldprec=self.train_loop_oldprec)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta, train_loop=self.train_loop)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta, train_loop=self.train_loop)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_46": {
                "input": {
                    "value": "t / eps_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_49": {
                "input": {
                    "value": "t / eps_in * eps_ratio / D",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_86": {
                "data": {
                    "value": "clip",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ceil_101": {
                "input": {
                    "value": "alpha / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_102": {
                "input": {
                    "value": "beta / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_759": {
                "variable": {
                    "value": "self.kappa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*param_shape(nb_channels)).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_761": {
                "variable": {
                    "value": "self.kappa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kappa.to(device).reshape(param_shape(kappa.shape[0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_763": {
                "variable": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*param_shape(nb_channels)).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_765": {
                "variable": {
                    "value": "self.lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lamda.to(device).reshape(param_shape(lamda.shape[0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_1018": {
                "variable": {
                    "value": "self.W_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((alpha,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_1181": {
                "variable": {
                    "value": "x_quant",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_quant",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pact_quantize_signed(input, self.x_alpha / (2.0 ** self.x_precision.get_bits() - 1), self.x_alpha)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.nn.functional.pad(x_quant, pad, 'constant', self.padding_value)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(input, self.x_alpha / (2.0 ** self.x_precision.get_bits() - 1), self.x_alpha)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(self.padding, self.padding, self.padding, self.padding)",
                            "Tuple"
                        ],
                        [
                            "(*self.padding, *self.padding)",
                            "Tuple"
                        ],
                        [
                            "self.padding",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_1248": {
                "variable": {
                    "value": "self.W_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((alpha,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_1361": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "W_quant",
                    "type": "Call",
                    "possible_values": [
                        [
                            "W.clone().detach()",
                            "Call"
                        ],
                        [
                            "W.clone().detach()",
                            "Call"
                        ],
                        [
                            "W.clone().detach() + eps * 0.5",
                            "BinOp"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, eps, torch.ceil(self.W_alpha / eps) * eps, torch.floor(self.W_beta / eps) * eps, train_loop=self.train_loop, train_loop_oldprec=self.train_loop_oldprec)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta, train_loop=self.train_loop)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta, train_loop=self.train_loop)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_1400": {
                "variable": {
                    "value": "self.W_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor((alpha,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_112": {
                "data": {
                    "value": "(+np.infty,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "alpha.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_122": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "alpha.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "alpha.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_354": {
                "input": {
                    "value": "self.alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_355": {
                "input": {
                    "value": "self.alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_356": {
                "input": {
                    "value": "self.alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_357": {
                "input": {
                    "value": "self.alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_371": {
                "input": {
                    "value": "torch.log2(self.requantization_factor * self.eps_static / self.eps_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_485": {
                "data": {
                    "value": "torch.ceil(torch.log2(self.requantization_factor * self.eps_out / min(self.eps_in_list)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_512": {
                "input": {
                    "value": "torch.log2(self.requantization_factor * torch.as_tensor(1.0 * self.kernel_size[0] * self.kernel_size[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ceil_541": {
                "input": {
                    "value": "torch.log2(self.requantization_factor * torch.as_tensor(1.0 * self.kernel_size[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_591": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_609": {
                "data": {
                    "value": "torch.ceil(torch.log2(self.requantization_factor * self.eps_out / self.eps_in))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_697": {
                "*size": {
                    "value": "nb_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_698": {
                "*size": {
                    "value": "nb_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_751": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_769": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_770": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_1015": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv1d_1358": {
                "input": {
                    "value": "torch.nn.functional.pad(input, expanded_padding, mode='circular')",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "W_quant",
                    "type": "Call",
                    "possible_values": [
                        [
                            "W.clone().detach()",
                            "Call"
                        ],
                        [
                            "W.clone().detach()",
                            "Call"
                        ],
                        [
                            "W.clone().detach() + eps * 0.5",
                            "BinOp"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, eps, torch.ceil(self.W_alpha / eps) * eps, torch.floor(self.W_beta / eps) * eps, train_loop=self.train_loop, train_loop_oldprec=self.train_loop_oldprec)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta, train_loop=self.train_loop)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "pact_quantize_asymm(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "pact_quantize_asymm_inference(self.weight, (self.W_beta + self.W_alpha) / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha, self.W_beta, train_loop=self.train_loop)",
                            "Call"
                        ],
                        [
                            "pact_quantize_signed_inference(self.weight, 2 * self.W_alpha / (2.0 ** self.W_precision.get_bits() - 1), self.W_alpha)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_single(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_1397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log2_371": {
                "input": {
                    "value": "self.requantization_factor * self.eps_static / self.eps_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_404": {
                "input": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_434": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.leaky_relu(x, self.leaky)",
                            "Call"
                        ],
                        [
                            "np.linspace(alpha_n.cpu().detach().numpy(), beta.cpu().detach().numpy(), dyn_range_bins)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_436": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.leaky_relu(x, self.leaky)",
                            "Call"
                        ],
                        [
                            "np.linspace(alpha_n.cpu().detach().numpy(), beta.cpu().detach().numpy(), dyn_range_bins)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.leaky",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_485": {
                "input": {
                    "value": "torch.log2(self.requantization_factor * self.eps_out / min(self.eps_in_list))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_512": {
                "input": {
                    "value": "self.requantization_factor * torch.as_tensor(1.0 * self.kernel_size[0] * self.kernel_size[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log2_541": {
                "input": {
                    "value": "self.requantization_factor * torch.as_tensor(1.0 * self.kernel_size[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_609": {
                "input": {
                    "value": "torch.log2(self.requantization_factor * self.eps_out / self.eps_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_759": {
                "*size": {
                    "value": "*param_shape(nb_channels)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_763": {
                "*size": {
                    "value": "*param_shape(nb_channels)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_847": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_861": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_1358": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "expanded_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "((self.padding[0] + 1) // 2, self.padding[0] // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "circular",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_120": {
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "beta.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "alpha.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log2_485": {
                "input": {
                    "value": "self.requantization_factor * self.eps_out / min(self.eps_in_list)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log2_609": {
                "input": {
                    "value": "self.requantization_factor * self.eps_out / self.eps_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_833": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_839": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_852": {
                "input": {
                    "value": "kappa_int / eps_kappa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_853": {
                "input": {
                    "value": "lamda_int / eps_lamda",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_512": {
                "data": {
                    "value": "1.0 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_541": {
                "data": {
                    "value": "1.0 * self.kernel_size[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_1055": {
                "variable": {
                    "value": "self.W_alpha.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-x.min()",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W_alpha.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_1056": {
                "variable": {
                    "value": "self.W_beta.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "x.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W_beta.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_1088": {
                "input": {
                    "value": "self.W_alpha / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_1088": {
                "input": {
                    "value": "self.W_beta / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_1292": {
                "input": {
                    "value": "self.W_alpha / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_1292": {
                "input": {
                    "value": "self.W_beta / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_1441": {
                "input": {
                    "value": "self.W_alpha / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_1441": {
                "input": {
                    "value": "self.W_beta / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_1058": {
                "variable": {
                    "value": "self.W_alpha.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-x[yh > 1 - dyn_range_cutoff].min()",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W_alpha.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_1059": {
                "variable": {
                    "value": "self.W_beta.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "x.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W_beta.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_1168": {
                "input": {
                    "value": "self.W_alpha / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_1168": {
                "input": {
                    "value": "self.W_beta / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_1061": {
                "variable": {
                    "value": "self.W_alpha.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-x.min()",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W_alpha.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_1062": {
                "variable": {
                    "value": "self.W_beta.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "x[yh < dyn_range_cutoff].max()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W_beta.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_1064": {
                "variable": {
                    "value": "self.W_alpha.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "-x[yh > 1 - dyn_range_cutoff].min()",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W_alpha.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_1065": {
                "variable": {
                    "value": "self.W_beta.data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "x[yh < dyn_range_cutoff].max()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.W_beta.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/relaxation.py": {
        "torch": {
            "load_228": {
                "f": {
                    "value": "checkpoint/ + checkpoint_name + _current_best.pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/transf/bias.py": {
        "torch": {
            "Parameter_58": {
                "variable": {
                    "value": "m.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-lin_dict[n] * m.weight.data[:].sum(3).sum(2).sum(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/transf/bn.py": {
        "torch": {
            "sqrt_313": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_before.running_var.data[:] + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_317": {
                "variable": {
                    "value": "m_after.kappa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(gamma.shape[0]).to(m_after.alpha.data.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "m_after.lamda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(gamma.shape[0]).to(m_after.alpha.data.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_216": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m.weight.data[:].clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "param[n_bn]['gamma']",
                            "Subscript"
                        ],
                        [
                            "m.kappa.data[:].clone().detach().cpu().flatten()",
                            "Call"
                        ],
                        [
                            "m.weight.data[:].clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "param[n_bn]['gamma']",
                            "Subscript"
                        ],
                        [
                            "m_before.weight.data[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_216": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_217": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m.bias.data[:].clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "param[n_bn]['beta']",
                            "Subscript"
                        ],
                        [
                            "m.lamda.data[:].clone().detach().cpu().flatten()",
                            "Call"
                        ],
                        [
                            "m.bias.data[:].clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "beta / count",
                            "BinOp"
                        ],
                        [
                            "param[n_bn]['beta']",
                            "Subscript"
                        ],
                        [
                            "m_before.bias.data[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_217": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_221": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.running_var.data[:] + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_221": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.running_var.data[:] + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_64": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_251": {
                "variable": {
                    "value": "m.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(beta - gamma / sigma * mu).to(m.weight.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_274": {
                "variable": {
                    "value": "m.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th_m_by_w - th_bsg_by_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "*size": {
                    "value": "gamma.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_318": {
                "*size": {
                    "value": "gamma.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_39": {
                "input": {
                    "value": "m.running_var.data[:] + m.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "input": {
                    "value": "m.running_var.data[:] + m.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_48": {
                "input": {
                    "value": "m.running_var.data[:] + m.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log2_121": {
                "input": {
                    "value": "1 + 2 * kappa_max / eps_kappa_lim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/transf/common.py": {
        "torch": {}
    },
    "nemo/transf/deploy.py": {
        "torch": {
            "tensor_115": {
                "data": {
                    "value": "eps.item()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/transf/export.py": {
        "torch": {
            "tensor_99": {
                "variable": {
                    "value": "m.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "weight_dict[n] * W_eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "m.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "bias_dict[n] * x_eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/transf/pruning.py": {
        "torch": {}
    },
    "nemo/transf/sawb.py": {
        "torch": {
            "sqrt_87": {
                "input": {
                    "value": "Ew2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(m.weight.abs() ** 2).mean()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/transf/statistics.py": {
        "torch": {}
    },
    "nemo/transf/utils.py": {
        "torch": {}
    },
    "nemo/transform.py": {
        "torch": {
            "sqrt_181": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_var.data[:] + module.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_181": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "module.weight.data[:].clone().detach()",
                            "Call"
                        ],
                        [
                            "module.kappa.data[:].clone().detach().flatten()",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "module.bias.data[:].clone().detach()",
                            "Call"
                        ],
                        [
                            "module.lamda.data[:].clone().detach().flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_313": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "module.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "module.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "_single(module.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "_single(module.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_single(module.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "_single(module.dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "module.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True if module.bias is not None else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True if module.bias is not None else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_343": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/utils.py": {
        "torch": {
            "save_74": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': net.state_dict(), 'precision': precision, 'acc': acc, 'optimizer': optimizer_state}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'./checkpoint/%s.pth' % checkpoint_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_80": {
                "*size": {
                    "value": "batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "*input_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_197": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "*in_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "round_86": {
                "variable": {
                    "value": "param[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net_inner.parameters(recurse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_165": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prod_160": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_162": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/mnist_test.py": {
        "torch": {
            "device_121": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_140": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mnist_cnn_fp.pt",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "9216",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.fcrelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fcrelu1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.fcrelu1(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "self.sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_265": {
                "f": {
                    "value": "checkpoint/mnist_fq_mixed.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_88": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_159": {
                "*size": {
                    "value": "(1, 1, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_110": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/mobi_fq_qd_id/mobi_fq_qd.py": {
        "torch": {
            "load_151": {
                "variable": {
                    "value": "checkpoint_loaded",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_162": {
                "f": {
                    "value": "input_fq.pth",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ceil_189": {
                "variable": {
                    "value": "max_eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff[k].max() / model.get_eps_at('model.%d.0' % (i + 1), 2.0 / 255)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_190": {
                "variable": {
                    "value": "mean_eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff[k][idx].mean() / model.get_eps_at('model.%d.0' % (i + 1), 2.0 / 255)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_146": {
                "*size": {
                    "value": "(1, 3, mobilenet_input, mobilenet_input)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_151": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_162": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/mobi_fq_qd_id/mobi_qd_id.py": {
        "torch": {
            "load_156": {
                "variable": {
                    "value": "checkpoint_loaded",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_200": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mobi_qd_id_res.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_167": {
                "input": {
                    "value": "torch.load('input_fq.pth', map_location=torch.device('cpu'))['in'] / (2.0 / 255)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_211": {
                "variable": {
                    "value": "max_eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff[k].max() / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_212": {
                "variable": {
                    "value": "mean_eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff[k][idx].mean() / eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'mean_eps': {}, 'max_eps': {}, 'ratio': {}}",
                            "Dict"
                        ],
                        [
                            "torch.load('mobi_qd_id_res.pth')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "mobi_qd_id_res.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "(1, 3, mobilenet_input, mobilenet_input)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_156": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_167": {
                "f": {
                    "value": "input_fq.pth",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_167": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/mobi_fq_qd_id/mobilenet.py": {
        "torch": {
            "Sequential_25": {
                "*args": {
                    "value": "nn.ConstantPad2d(padding, value=0.0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "*args": {
                    "value": "nn.ConstantPad2d(padding, value=0.0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "nn.ConstantPad2d(padding, value=0.0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_bn(3, int(width_mult * 32), 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(width_mult * 1024)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConstantPad2d_26": {
                "padding": {
                    "value": "padding",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "(1, 1, 1, 1) if stride == 1 else (0, 1, 0, 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 0)",
                            "Tuple"
                        ],
                        [
                            "(1, 1, 1, 1) if stride == 1 else (0, 1, 0, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias_ena",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU6_29": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConstantPad2d_35": {
                "padding": {
                    "value": "padding",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "(1, 1, 1, 1) if stride == 1 else (0, 1, 0, 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 0)",
                            "Tuple"
                        ],
                        [
                            "(1, 1, 1, 1) if stride == 1 else (0, 1, 0, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias_ena",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU6_38": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConstantPad2d_44": {
                "padding": {
                    "value": "padding",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "(1, 1, 1, 1) if stride == 1 else (0, 1, 0, 1)",
                            "IfExp"
                        ],
                        [
                            "(0, 0, 0, 0)",
                            "Tuple"
                        ],
                        [
                            "(1, 1, 1, 1) if stride == 1 else (0, 1, 0, 1)",
                            "IfExp"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "oup",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU6_47": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_98": {
                "kernel_size": {
                    "value": "avg_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    }
}