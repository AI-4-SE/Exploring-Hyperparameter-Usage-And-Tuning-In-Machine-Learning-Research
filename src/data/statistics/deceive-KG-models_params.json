{
    "RippleNet/data_loader.py": {
        "sklearn": {},
        "torch": {}
    },
    "RippleNet/env.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "get_rng_state_55": {
                "variable": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_all_56": {
                "variable": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_63": {
                "new_state": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_all_64": {
                "new_states": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state_all()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "RippleNet/model_RN.py": {
        "sklearn": {
            "roc_auc_score_164": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(item_embeddings * y, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "self.items",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "items",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "self.entity_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "entity_emb_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_entity, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "self.relation_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relation_emb_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_relation, self.dim, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "self.transform_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "transform_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_56": {
                "variable": {
                    "value": "self.item_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.entity_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.items",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.predict(self.item_embeddings, o_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "self.scores_normalized",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "item_embeddings * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "self.base_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.labels, logits=self.scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_150": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "variable": {
                    "value": "h_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_emb_list[hop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "Rh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(self.r_emb_list[hop], h_expanded)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.item_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(Rh, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "probs_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.matmul(Rh, v), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_95": {
                "variable": {
                    "value": "probs_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(probs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.t_emb_list[hop] * probs_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "variable": {
                    "value": "h_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.h_emb_list[hop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "variable": {
                    "value": "t_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.t_emb_list[hop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "hRt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(tf.matmul(h_expanded, self.r_emb_list[hop]), t_expanded)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_128": {
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "tf.sigmoid(hRt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_140": {
                "input_tensor": {
                    "value": "tf.reduce_sum(self.h_emb_list[hop] * self.h_emb_list[hop])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "input_tensor": {
                    "value": "tf.reduce_sum(self.t_emb_list[hop] * self.t_emb_list[hop])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "tf.reduce_sum(self.r_emb_list[hop] * self.r_emb_list[hop])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_memory]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'memories_h_' + str(hop)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_memory]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'memories_r_' + str(hop)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_memory]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'memories_t_' + str(hop)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_63": {
                "params": {
                    "value": "self.entity_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.memories_h[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "params": {
                    "value": "self.relation_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.memories_r[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "embedding_lookup_69": {
                "params": {
                    "value": "self.entity_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.memories_t[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "a": {
                    "value": "self.r_emb_list[hop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "h_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.h_emb_list[hop], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.h_emb_list[hop], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_89": {
                "a": {
                    "value": "Rh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.matmul(self.r_emb_list[hop], h_expanded), axis=3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.item_embeddings, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "item_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.t_emb_list[hop] * probs_expanded, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.transform_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "a": {
                    "value": "h_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(self.h_emb_list[hop], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.h_emb_list[hop], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.r_emb_list[hop]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "x": {
                    "value": "hRt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.matmul(tf.matmul(h_expanded, self.r_emb_list[hop]), t_expanded))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "self.h_emb_list[hop] * self.h_emb_list[hop]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "input_tensor": {
                    "value": "self.t_emb_list[hop] * self.t_emb_list[hop]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "self.r_emb_list[hop] * self.r_emb_list[hop]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_144": {
                "t": {
                    "value": "self.transform_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "item_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "item_embeddings + o",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self.transform_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/utils/visualize.py": {
        "sklearn": {
            "TSNE_80": {
                "variable": {
                    "value": "reduced_x",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "RippleNet/val_score_reco.py": {
        "sklearn": {},
        "torch": {}
    },
    "csqa/edge_val_score.py": {
        "sklearn": {},
        "torch": {
            "exp_27": {
                "input": {
                    "value": "-torch.mean((x_tile - y_tile) ** 2, dim=2) / float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "xy_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_kernel(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_27": {
                "input": {
                    "value": "(x_tile - y_tile) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/env.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "get_rng_state_53": {
                "variable": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_all_54": {
                "variable": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_61": {
                "new_state": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_all_62": {
                "new_states": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state_all()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "csqa/new_val_score.py": {
        "sklearn": {},
        "torch": {
            "load_102": {
                "variable": {
                    "value": "ori_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ori_stats.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_27": {
                "input": {
                    "value": "-torch.mean((x_tile - y_tile) ** 2, dim=2) / float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "xy_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_kernel(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_27": {
                "input": {
                    "value": "(x_tile - y_tile) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/newer_val_score.py": {
        "sklearn": {},
        "torch": {
            "exp_27": {
                "input": {
                    "value": "-torch.mean((x_tile - y_tile) ** 2, dim=2) / float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "xy_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_kernel(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_27": {
                "input": {
                    "value": "(x_tile - y_tile) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/test_fact_validation.py": {
        "sklearn": {},
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1, 'CPU': 20}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_27": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 1, 'CPU': 20})",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_28": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "csqa/utils/visualize.py": {
        "sklearn": {
            "TSNE_80": {
                "variable": {
                    "value": "reduced_x",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "obqa/edge_val_score.py": {
        "sklearn": {},
        "torch": {
            "exp_27": {
                "input": {
                    "value": "-torch.mean((x_tile - y_tile) ** 2, dim=2) / float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "xy_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_kernel(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_27": {
                "input": {
                    "value": "(x_tile - y_tile) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/env.py": {
        "sklearn": {},
        "tensorflow": {},
        "torch": {
            "get_rng_state_53": {
                "variable": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_all_54": {
                "variable": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_61": {
                "new_state": {
                    "value": "s3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_rng_state_all_62": {
                "new_states": {
                    "value": "s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.get_rng_state_all()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obqa/env2.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "obqa/new_val_score.py": {
        "sklearn": {},
        "torch": {
            "exp_27": {
                "input": {
                    "value": "-torch.mean((x_tile - y_tile) ** 2, dim=2) / float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "xy_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_kernel(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_27": {
                "input": {
                    "value": "(x_tile - y_tile) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/newer_val_score.py": {
        "sklearn": {},
        "torch": {
            "exp_27": {
                "input": {
                    "value": "-torch.mean((x_tile - y_tile) ** 2, dim=2) / float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "xy_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_kernel(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_27": {
                "input": {
                    "value": "(x_tile - y_tile) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/test_fact_validation.py": {
        "sklearn": {},
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1, 'CPU': 20}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_27": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 1, 'CPU': 20})",
                            "Call"
                        ]
                    ]
                }
            },
            "set_session_28": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obqa/test_script.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "obqa/utils/visualize.py": {
        "sklearn": {
            "TSNE_80": {
                "variable": {
                    "value": "reduced_x",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "RippleNet/deep_triple_classifier.py": {
        "tensorflow": {}
    },
    "RippleNet/main_RN.py": {
        "tensorflow": {
            "reset_default_graph_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_14": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/train.py": {
        "tensorflow": {},
        "torch": {
            "randn_223": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_224": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_129": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_219": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_221": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_131": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_242": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/train_RN.py": {
        "tensorflow": {
            "Saver_21": {
                "variable": {
                    "value": "oSaver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_63": {
                "variable": {
                    "value": "oSaver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "csqa/deep_triple_classifier.py": {
        "tensorflow": {}
    },
    "csqa/train.py": {
        "tensorflow": {},
        "torch": {
            "randn_208": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_209": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_204": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_206": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_126": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_224": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deep_triple_classifier.py": {
        "tensorflow": {}
    },
    "obqa/deep_triple_classifier.py": {
        "tensorflow": {}
    },
    "obqa/train.py": {
        "tensorflow": {},
        "torch": {
            "randn_208": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_209": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_204": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_206": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_126": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_225": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obqa/train2.py": {
        "tensorflow": {},
        "torch": {
            "device_211": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/Replay_Memory.py": {
        "torch": {
            "tensor_157": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(steps, dtype=torch.float, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "seq_actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions0, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "seq_actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "seq_actions2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "seq_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_rewards, -1)",
                            "Call"
                        ],
                        [
                            "seq_rewards * (self.args.reward_expectation / (self.sum_abs_rewards / self.num_rewards + 1e-10))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "seq_terminals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_terminals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_terminals, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/dqn.py": {
        "torch": {
            "LSTMCell_25": {
                "variable": {
                    "value": "self.lstm_cell1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.linears2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.linears3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_embeddings, step_embs[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_130": {
                "variable": {
                    "value": "self.lstm_cell2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.linears2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.linears3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.node_pre_embedding[actions0], self.node_pre_embedding[actions1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_embeddings, step_embs[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "node_pre_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_pre_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(node_pre_embedding).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "relation_pre_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "relation_pre_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(relation_pre_embedding).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_284": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.policyQ1.parameters()) + list(self.policyQ2.parameters()) + hc0",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.dqn_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_298": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_477": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(load_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_491": {
                "condition": {
                    "value": "torch.abs(x) < 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.abs(x) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.max(v) for v in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v[index[i]] for (i, v) in enumerate(values)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_181": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_228": {
                "variable": {
                    "value": "(m, index1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "index1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "variable": {
                    "value": "actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_396": {
                "variable": {
                    "value": "q_values_pred1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values1[i][actions1_inside[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_431": {
                "variable": {
                    "value": "next_actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.vocab_index[random.randint(0, self.num_vocab_index - 1)] for i in range(len(actions0))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_469": {
                "obj": {
                    "value": "[self.policyQ1.state_dict(), self.policyQ2.state_dict()]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(load_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims3[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[self.node_pre_embedding[x], torch.ones(len(x), 1).to(self.device) * (states[2][i] / self.args.delayed_reward_step)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims3[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(m, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "values.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "values.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_409": {
                "variable": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values2[i][actions2[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "[q_values2[i][self.vocab_index.index(actions2[i].item())] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "q_values2[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_491": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "input": {
                    "value": "graph_embeddings[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action_embeddings[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argsort_94": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "input": {
                    "value": "action_embeddings[:, None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action2_embedding[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_224": {
                "variable": {
                    "value": "(m[i], ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values[i][li]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_417": {
                "variable": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values2[i][actions2[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "[q_values2[i][self.vocab_index.index(actions2[i].item())] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "q_values2[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_92": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "input": {
                    "value": "action_embeddings[i, None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action2_embedding[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_439": {
                "input": {
                    "value": "clipped_error(q_values_pred2 - td_targets2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_442": {
                "input": {
                    "value": "clipped_error(q_values_pred1 - td_targets2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/main.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "load_42": {
                "f": {
                    "value": "args.model_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/model.py": {
        "torch": {
            "Embedding_12": {
                "variable": {
                    "value": "self.ent_re_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.ent_im_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_18": {
                "variable": {
                    "value": "self.rel_re_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.rel_im_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_71": {
                "variable": {
                    "value": "self.ent_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "self.rel_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "h_re * t_re * r_re + h_im * t_im * r_re + h_re * t_im * r_im - h_im * t_re * r_im",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_60": {
                "input": {
                    "value": "r_im ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "h * t * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "r_re ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "r_re ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_96": {
                "input": {
                    "value": "h_re ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_97": {
                "input": {
                    "value": "t_re ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_58": {
                "input": {
                    "value": "t_im ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_57": {
                "input": {
                    "value": "t_re ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_55": {
                "input": {
                    "value": "h_re ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_56": {
                "input": {
                    "value": "h_im ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/predict.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./checkpoints/movie_undirected_kbc.ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "sigmoid_35": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/train1.py": {
        "torch": {
            "Adam_9": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_25": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "batch_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/utils.py": {
        "torch": {}
    },
    "RippleNet/utils/data_utils.py": {
        "torch": {
            "zeros_241": {
                "variable": {
                    "value": "qa_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "rel_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "num_tuples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "qa_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "rel_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "num_tuples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_363": {
                "variable": {
                    "value": "statement_data",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sents), max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "vocab.w2idx[PAD_TOK]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_364": {
                "variable": {
                    "value": "statement_len",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sents),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "concept_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_385": {
                "variable": {
                    "value": "node_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_903": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_904": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, num_choices, max_seq_length), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "[pad_token] * padding_length + input_ids",
                            "BinOp"
                        ],
                        [
                            "input_ids + [pad_token] * padding_length",
                            "BinOp"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "input_ids + [0] * padding_length",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_905": {
                "variable": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_lengths, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_100": {
                "variable": {
                    "value": "batch_adj[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_adj.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "emb_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_cpt_num, emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "emb_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_node_num, all_embs[0].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "concept_ids[idx, :num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concepts[:num_concept]",
                            "Subscript"
                        ],
                        [
                            "np.arange(num_concept)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_408": {
                "variable": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.row",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.col",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_674": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "variable": {
                    "value": "all_output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'output_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_846": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_847": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_850": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_932": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "qa_data[i][:len(cur_qa)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cur_qa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "rel_data[i][:len(cur_rel)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cur_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "emb_data[idx, :masked_embs.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embs[mask[:embs.shape[0]]]",
                            "Subscript"
                        ],
                        [
                            "masked_embs[:, :emb_dim]",
                            "Subscript"
                        ],
                        [
                            "masked_embs[:, emb_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "statement_data[i][:len(word_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vocab.w2idx[w] if w in vocab else vocab.w2idx[UNK_TOK] for w in sent.split(' ')[:max_seq_len - 1] + [EOS_TOK]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_399": {
                "variable": {
                    "value": "emb_data[idx, :num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "embs[:num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "cur_qa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "cur_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "(k, j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_346": {
                "start": {
                    "value": "max_tuple_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_406": {
                "data": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "data": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_478": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/utils/extract_bert_node_features.py": {
        "torch": {
            "device_144": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "concept_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concept_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(concept_vecs, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_107": {
                "start": {
                    "value": "max_seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "RippleNet/utils/graph.py": {
        "torch": {
            "tensor_370": {
                "variable": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts[:min(len(concepts), max_node_num)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qm[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "am[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_399": {
                "variable": {
                    "value": "ori_adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_401": {
                "variable": {
                    "value": "concepts_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_402": {
                "variable": {
                    "value": "qmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_403": {
                "variable": {
                    "value": "amask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_417": {
                "obj": {
                    "value": "(ori_adj_lengths, adj_lengths, concepts_ids, adj_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/utils/graph_gn.py": {
        "torch": {
            "tensor_402": {
                "variable": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts[:min(len(concepts), max_node_num)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qm[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "variable": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "am[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_431": {
                "variable": {
                    "value": "ori_adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_432": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_433": {
                "variable": {
                    "value": "concepts_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "variable": {
                    "value": "qmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "variable": {
                    "value": "amask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_449": {
                "obj": {
                    "value": "(ori_adj_lengths, adj_lengths, concepts_ids, adj_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/utils/layers.py": {
        "torch": {
            "randn_615": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_616": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_622": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_633": {
                "variable": {
                    "value": "triple_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3], [4, 5, 6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_638": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4], [5, 6, 7, 8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_639": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_42": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "type_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_212": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "output_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_213": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size // 2 if self.bidirectional else hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_228": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb(inputs)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(embed)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([3, 2])",
                            "Call"
                        ],
                        [
                            "mask_or_lengths.float()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_230": {
                "variable": {
                    "value": "(rnn_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_dropout(rnn_outputs)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "full_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_247": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "output_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_250": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "contextualized_emb.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim // 2 if self.bidirectional else hidden_dim",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_261": {
                "variable": {
                    "value": "(h, r, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((h, r, t), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, r, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_281": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_282": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_309": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_342": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_392": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "value_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_430": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_471": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_501": {
                "variable": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_501": {
                "variable": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_171": {
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "masked_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb.weight * mask",
                            "BinOp"
                        ],
                        [
                            "self.emb.weight",
                            "Attribute"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.emb.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.emb.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.emb.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.emb.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_268": {
                "variable": {
                    "value": "(outputs_f, outputs_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_dropout(rnn_outputs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_f[:, -1, :], outputs_b[:, 0, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_484": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector.masked_fill(mask.to(dtype=torch.uint8), mask_fill_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_578": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "concept_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "concept_in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_587": {
                "variable": {
                    "value": "self.cpt_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "concept_in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "concept_out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_14": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_205": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_size if i == 0 else self.hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size if i < self.num_layers else self.output_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_107": {
                "start": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_132": {
                "start": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_613": {
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_79": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_81": {
                "normalized_shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(5, 3)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/utils/optimization_utils.py": {
        "torch": {
            "Sequential_280": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(100, 10), nn.ReLU(), nn.Linear(10, 2)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_281": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_282": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_283": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_233": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_235": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/utils/tasks/plain_qa/plainqa_task.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "src_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_toks, binarize(src)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "RippleNet/utils/triples.py": {
        "torch": {}
    },
    "csqa/Replay_Memory.py": {
        "torch": {
            "tensor_157": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(steps, dtype=torch.float, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "seq_actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions0, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "seq_actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "seq_actions2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "seq_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_rewards, -1)",
                            "Call"
                        ],
                        [
                            "seq_rewards * (self.args.reward_expectation / (self.sum_abs_rewards / self.num_rewards + 1e-10))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "seq_terminals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_terminals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_terminals, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/dqn.py": {
        "torch": {
            "LSTMCell_25": {
                "variable": {
                    "value": "self.lstm_cell1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.linears2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.linears3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_embeddings, step_embs[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_123": {
                "variable": {
                    "value": "self.lstm_cell2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.linears2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.linears3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.node_pre_embedding[actions0], self.node_pre_embedding[actions1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_embeddings, step_embs[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "node_pre_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_pre_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(node_pre_embedding).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "relation_pre_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "relation_pre_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(relation_pre_embedding).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_274": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.policyQ1.parameters()) + list(self.policyQ2.parameters()) + hc0",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.dqn_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_466": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(load_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_480": {
                "condition": {
                    "value": "torch.abs(x) < 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.abs(x) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.max(v) for v in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v[index[i]] for (i, v) in enumerate(values)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_219": {
                "variable": {
                    "value": "(m, index1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "index1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "q_values_pred1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values1[i][actions1_inside[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "next_actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.vocab_index[random.randint(0, self.num_vocab_index - 1)] for i in range(len(actions0))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_458": {
                "obj": {
                    "value": "[self.policyQ1.state_dict(), self.policyQ2.state_dict()]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(load_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims3[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[self.node_pre_embedding[x], torch.ones(len(x), 1).to(self.device) * (states[2][i] / self.args.delayed_reward_step)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims3[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "(m, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "values.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "values.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "variable": {
                    "value": "actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_398": {
                "variable": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values2[i][actions2[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "[q_values2[i][self.vocab_index.index(actions2[i].item())] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "q_values2[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_480": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "input": {
                    "value": "graph_embeddings[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action_embeddings[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argsort_87": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_138": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "input": {
                    "value": "action_embeddings[:, None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action2_embedding[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(m[i], ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values[i][li]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_406": {
                "variable": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values2[i][actions2[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "[q_values2[i][self.vocab_index.index(actions2[i].item())] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "q_values2[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "input": {
                    "value": "action_embeddings[i, None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action2_embedding[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_428": {
                "input": {
                    "value": "clipped_error(q_values_pred2 - td_targets2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_431": {
                "input": {
                    "value": "clipped_error(q_values_pred1 - td_targets2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/modeling/modeling_aristo.py": {
        "torch": {
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.sent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/modeling/modeling_encoder.py": {
        "torch": {
            "randint_130": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(30, 70)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_131": {
                "variable": {
                    "value": "lenghts",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(30,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.LSTM(emb_size if l == 0 else hidden_size, (hidden_size if l != num_layers else output_size) // (2 if bidirectional else 1), 1, bidirectional=bidirectional, batch_first=True) for l in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.hidden_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNNDropout(hidden_p) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_40": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb.weight.size(1)",
                            "Call"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "pretrained_emb_or_path",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load(pretrained_emb_or_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_42": {
                "*args": {
                    "value": "emb_size if l == 0 else hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/modeling/modeling_gn.py": {
        "torch": {}
    },
    "csqa/modeling/modeling_kagnet.py": {
        "torch": {}
    },
    "csqa/modeling/modeling_lm.py": {
        "torch": {
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.sent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "self.inhouse_train_indexes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (i, qid) in enumerate(self.train_qids) if qid in inhouse_qids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "self.inhouse_test_indexes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (i, qid) in enumerate(self.train_qids) if qid not in inhouse_qids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randperm_81": {
                "variable": {
                    "value": "train_indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.train_qids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_85": {
                "start": {
                    "value": "len(self.train_qids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_88": {
                "start": {
                    "value": "len(self.dev_qids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_79": {
                "n": {
                    "value": "n_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.train_size() * subsample)",
                            "Call"
                        ],
                        [
                            "self.inhouse_train_indexes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_94": {
                "start": {
                    "value": "len(self.test_qids)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/utils/data_utils.py": {
        "torch": {
            "zeros_241": {
                "variable": {
                    "value": "qa_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "rel_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "num_tuples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "qa_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "rel_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "num_tuples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_363": {
                "variable": {
                    "value": "statement_data",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sents), max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "vocab.w2idx[PAD_TOK]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_364": {
                "variable": {
                    "value": "statement_len",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sents),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "concept_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_385": {
                "variable": {
                    "value": "node_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_903": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_904": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, num_choices, max_seq_length), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "[pad_token] * padding_length + input_ids",
                            "BinOp"
                        ],
                        [
                            "input_ids + [pad_token] * padding_length",
                            "BinOp"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "input_ids + [0] * padding_length",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_905": {
                "variable": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_lengths, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_100": {
                "variable": {
                    "value": "batch_adj[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_adj.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "emb_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_cpt_num, emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "emb_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_node_num, all_embs[0].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "concept_ids[idx, :num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concepts[:num_concept]",
                            "Subscript"
                        ],
                        [
                            "np.arange(num_concept)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_408": {
                "variable": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.row",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.col",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_674": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "variable": {
                    "value": "all_output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'output_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_846": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_847": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_850": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_932": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "qa_data[i][:len(cur_qa)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cur_qa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "rel_data[i][:len(cur_rel)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cur_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "emb_data[idx, :masked_embs.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embs[mask[:embs.shape[0]]]",
                            "Subscript"
                        ],
                        [
                            "masked_embs[:, :emb_dim]",
                            "Subscript"
                        ],
                        [
                            "masked_embs[:, emb_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "statement_data[i][:len(word_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vocab.w2idx[w] if w in vocab else vocab.w2idx[UNK_TOK] for w in sent.split(' ')[:max_seq_len - 1] + [EOS_TOK]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_399": {
                "variable": {
                    "value": "emb_data[idx, :num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "embs[:num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "cur_qa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "cur_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "(k, j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_346": {
                "start": {
                    "value": "max_tuple_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_406": {
                "data": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "data": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_478": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/utils/extract_bert_node_features.py": {
        "torch": {
            "device_144": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "concept_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concept_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(concept_vecs, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_107": {
                "start": {
                    "value": "max_seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "csqa/utils/graph.py": {
        "torch": {
            "tensor_402": {
                "variable": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts[:min(len(concepts), max_node_num)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qm[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "variable": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "am[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_431": {
                "variable": {
                    "value": "ori_adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_432": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_433": {
                "variable": {
                    "value": "concepts_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "variable": {
                    "value": "qmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "variable": {
                    "value": "amask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_449": {
                "obj": {
                    "value": "(ori_adj_lengths, adj_lengths, concepts_ids, adj_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/utils/graph_grn.py": {
        "torch": {
            "tensor_369": {
                "variable": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts[:min(len(concepts), max_node_num)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qm[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "am[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "variable": {
                    "value": "ori_adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_399": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "variable": {
                    "value": "concepts_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_401": {
                "variable": {
                    "value": "qmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_402": {
                "variable": {
                    "value": "amask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_416": {
                "obj": {
                    "value": "(ori_adj_lengths, adj_lengths, concepts_ids, adj_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/utils/layers.py": {
        "torch": {
            "randn_615": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_616": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_622": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_633": {
                "variable": {
                    "value": "triple_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3], [4, 5, 6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_638": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4], [5, 6, 7, 8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_639": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_42": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "type_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_212": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "output_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_213": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size // 2 if self.bidirectional else hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_228": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb(inputs)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(embed)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([3, 2])",
                            "Call"
                        ],
                        [
                            "mask_or_lengths.float()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_230": {
                "variable": {
                    "value": "(rnn_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_dropout(rnn_outputs)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "full_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_247": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "output_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_250": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "contextualized_emb.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim // 2 if self.bidirectional else hidden_dim",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_261": {
                "variable": {
                    "value": "(h, r, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((h, r, t), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, r, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_281": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_282": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_309": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_342": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_392": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "value_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_430": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_471": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_501": {
                "variable": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_501": {
                "variable": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_171": {
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "masked_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb.weight * mask",
                            "BinOp"
                        ],
                        [
                            "self.emb.weight",
                            "Attribute"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.emb.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.emb.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.emb.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.emb.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_268": {
                "variable": {
                    "value": "(outputs_f, outputs_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_dropout(rnn_outputs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_f[:, -1, :], outputs_b[:, 0, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_484": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector.masked_fill(mask.to(dtype=torch.uint8), mask_fill_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_578": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "concept_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "concept_in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_587": {
                "variable": {
                    "value": "self.cpt_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "concept_in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "concept_out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_14": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_205": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_size if i == 0 else self.hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size if i < self.num_layers else self.output_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_107": {
                "start": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_132": {
                "start": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_613": {
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_79": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_81": {
                "normalized_shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(5, 3)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/utils/optimization_utils.py": {
        "torch": {
            "Sequential_280": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(100, 10), nn.ReLU(), nn.Linear(10, 2)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_281": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_282": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_283": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_233": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_235": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "csqa/utils/tasks/plain_qa/plainqa_task.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "src_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_toks, binarize(src)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "csqa/utils/triples.py": {
        "torch": {}
    },
    "obqa/Replay_Memory.py": {
        "torch": {
            "tensor_157": {
                "variable": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(steps, dtype=torch.float, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "seq_actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions0, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "seq_actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "seq_actions2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_actions2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_actions2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "seq_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_rewards, -1)",
                            "Call"
                        ],
                        [
                            "seq_rewards * (self.args.reward_expectation / (self.sum_abs_rewards / self.num_rewards + 1e-10))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "seq_terminals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_terminals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(seq_terminals, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "args.delayed_reward_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/dqn.py": {
        "torch": {
            "LSTMCell_25": {
                "variable": {
                    "value": "self.lstm_cell1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.linears2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.linears3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_embeddings, step_embs[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_123": {
                "variable": {
                    "value": "self.lstm_cell2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "args.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.linears2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.linears3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.linears3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.node_pre_embedding[actions0], self.node_pre_embedding[actions1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pre_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_embeddings, step_embs[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "node_pre_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_pre_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(node_pre_embedding).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "relation_pre_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "relation_pre_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(relation_pre_embedding).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_274": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.policyQ1.parameters()) + list(self.policyQ2.parameters()) + hc0",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.args.dqn_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_466": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(load_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_480": {
                "condition": {
                    "value": "torch.abs(x) < 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * x * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.abs(x) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.max(v) for v in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v[index[i]] for (i, v) in enumerate(values)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_219": {
                "variable": {
                    "value": "(m, index1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "index1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "q_values_pred1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values1[i][actions1_inside[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "next_actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.vocab_index[random.randint(0, self.num_vocab_index - 1)] for i in range(len(actions0))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_458": {
                "obj": {
                    "value": "[self.policyQ1.state_dict(), self.policyQ2.state_dict()]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(load_dir, 'model_' + str(epoch) + '.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'data.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims3[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[self.node_pre_embedding[x], torch.ones(len(x), 1).to(self.device) * (states[2][i] / self.args.delayed_reward_step)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims1[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dims3[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "(m, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.matmul(graph_embeddings[i], action_embeddings[i]) / math.sqrt(self.embed_dim) for i in range(action_embeddings.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.matmul(action_embeddings[:, None, None, :], action2_embedding[:, :, None]) / math.sqrt(self.embed_dim)",
                            "BinOp"
                        ],
                        [
                            "values[:, :, 0, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(values, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "values.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "values.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "variable": {
                    "value": "actions0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "variable": {
                    "value": "actions1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[action1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_398": {
                "variable": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values2[i][actions2[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "[q_values2[i][self.vocab_index.index(actions2[i].item())] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "q_values2[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_480": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "input": {
                    "value": "graph_embeddings[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action_embeddings[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argsort_87": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_138": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "d0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "self.D_in2",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "args.lstm_hidden_dim",
                            "Attribute"
                        ],
                        [
                            "d",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims1[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims2[:-1]",
                            "Subscript"
                        ],
                        [
                            "self.hidden_dims3[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "input": {
                    "value": "action_embeddings[:, None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action2_embedding[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(m[i], ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values[i][li]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_406": {
                "variable": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values_pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q_values2[i][actions2[i]] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "[q_values2[i][self.vocab_index.index(actions2[i].item())] for i in range(len(nei))]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(q_values_pred2, 0)",
                            "Call"
                        ],
                        [
                            "q_values2[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "input": {
                    "value": "action_embeddings[i, None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "action2_embedding[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_428": {
                "input": {
                    "value": "clipped_error(q_values_pred2 - td_targets2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_431": {
                "input": {
                    "value": "clipped_error(q_values_pred1 - td_targets2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/modeling/modeling_aristo.py": {
        "torch": {
            "Dropout_12": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.sent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/modeling/modeling_gn.py": {
        "torch": {}
    },
    "obqa/modeling/modeling_kagnet.py": {
        "torch": {}
    },
    "obqa/modeling/modeling_lm.py": {
        "torch": {
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.sent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "self.inhouse_train_indexes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (i, qid) in enumerate(self.train_qids) if qid in inhouse_qids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "self.inhouse_test_indexes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for (i, qid) in enumerate(self.train_qids) if qid not in inhouse_qids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randperm_81": {
                "variable": {
                    "value": "train_indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.train_qids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_85": {
                "start": {
                    "value": "len(self.train_qids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_88": {
                "start": {
                    "value": "len(self.dev_qids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_79": {
                "n": {
                    "value": "n_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.train_size() * subsample)",
                            "Call"
                        ],
                        [
                            "self.inhouse_train_indexes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_94": {
                "start": {
                    "value": "len(self.test_qids)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/utils/data_utils.py": {
        "torch": {
            "zeros_241": {
                "variable": {
                    "value": "qa_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "variable": {
                    "value": "rel_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "num_tuples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "qa_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "rel_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_tuple_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "num_tuples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_363": {
                "variable": {
                    "value": "statement_data",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sents), max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "vocab.w2idx[PAD_TOK]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_364": {
                "variable": {
                    "value": "statement_len",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(sents),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "concept_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_385": {
                "variable": {
                    "value": "node_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_903": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_904": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_batch, num_choices, max_seq_length), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "[pad_token] * padding_length + input_ids",
                            "BinOp"
                        ],
                        [
                            "input_ids + [pad_token] * padding_length",
                            "BinOp"
                        ],
                        [
                            "tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "input_ids + [0] * padding_length",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(input_ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_905": {
                "variable": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_lengths, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_100": {
                "variable": {
                    "value": "batch_adj[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_adj.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "emb_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_cpt_num, emb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_390": {
                "variable": {
                    "value": "emb_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_samples, max_node_num, all_embs[0].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "concept_ids[idx, :num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concepts[:num_concept]",
                            "Subscript"
                        ],
                        [
                            "np.arange(num_concept)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_408": {
                "variable": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.row",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.col",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_673": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_674": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_675": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "variable": {
                    "value": "all_output_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'output_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_846": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_847": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_850": {
                "variable": {
                    "value": "all_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_932": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "qa_data[i][:len(cur_qa)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cur_qa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "rel_data[i][:len(cur_rel)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "cur_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "emb_data[idx, :masked_embs.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "masked_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embs[mask[:embs.shape[0]]]",
                            "Subscript"
                        ],
                        [
                            "masked_embs[:, :emb_dim]",
                            "Subscript"
                        ],
                        [
                            "masked_embs[:, emb_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_369": {
                "variable": {
                    "value": "statement_data[i][:len(word_ids)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vocab.w2idx[w] if w in vocab else vocab.w2idx[UNK_TOK] for w in sent.split(' ')[:max_seq_len - 1] + [EOS_TOK]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_399": {
                "variable": {
                    "value": "emb_data[idx, :num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "embs[:num_concept]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "cur_qa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "cur_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "(k, j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_346": {
                "start": {
                    "value": "max_tuple_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_406": {
                "data": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "data": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_478": {
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/utils/extract_bert_node_features.py": {
        "torch": {
            "device_144": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "concept_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concept_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(concept_vecs, 0).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_107": {
                "start": {
                    "value": "max_seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obqa/utils/graph.py": {
        "torch": {
            "tensor_370": {
                "variable": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts[:min(len(concepts), max_node_num)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qm[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "am[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_399": {
                "variable": {
                    "value": "ori_adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_401": {
                "variable": {
                    "value": "concepts_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_402": {
                "variable": {
                    "value": "qmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_403": {
                "variable": {
                    "value": "amask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_417": {
                "obj": {
                    "value": "(ori_adj_lengths, adj_lengths, concepts_ids, adj_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/utils/graph_gn.py": {
        "torch": {
            "tensor_402": {
                "variable": {
                    "value": "concepts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concepts[:min(len(concepts), max_node_num)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "qm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "qm[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "variable": {
                    "value": "am",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "am[:adj_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_431": {
                "variable": {
                    "value": "ori_adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_432": {
                "variable": {
                    "value": "adj_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_433": {
                "variable": {
                    "value": "concepts_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "variable": {
                    "value": "qmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "variable": {
                    "value": "amask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data), max_node_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_449": {
                "obj": {
                    "value": "(ori_adj_lengths, adj_lengths, concepts_ids, adj_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/utils/layers.py": {
        "torch": {
            "randn_615": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_616": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_622": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_633": {
                "variable": {
                    "value": "triple_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3], [4, 5, 6]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_638": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4], [5, 6, 7, 8]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_639": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_42": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "type_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_212": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "output_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_213": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size // 2 if self.bidirectional else hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_228": {
                "variable": {
                    "value": "lstm_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb(inputs)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(embed)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([3, 2])",
                            "Call"
                        ],
                        [
                            "mask_or_lengths.float()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_230": {
                "variable": {
                    "value": "(rnn_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_dropout(rnn_outputs)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "full_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_247": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.output_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "output_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_250": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "contextualized_emb.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_dim // 2 if self.bidirectional else hidden_dim",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "hidden_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_261": {
                "variable": {
                    "value": "(h, r, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((h, r, t), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, r, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_281": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_282": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_309": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_k_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_342": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_q_original",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * self.d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_392": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_429": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "value_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "query_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_430": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_471": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_501": {
                "variable": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_501": {
                "variable": {
                    "value": "ri",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_171": {
                "input": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "masked_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb.weight * mask",
                            "BinOp"
                        ],
                        [
                            "self.emb.weight",
                            "Attribute"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.emb.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "self.emb.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.emb.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "self.emb.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_268": {
                "variable": {
                    "value": "(outputs_f, outputs_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_dropout(rnn_outputs)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs_f[:, -1, :], outputs_b[:, 0, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_484": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector.masked_fill(mask.to(dtype=torch.uint8), mask_fill_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_578": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "concept_num",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "concept_in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_587": {
                "variable": {
                    "value": "self.cpt_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "concept_in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "concept_out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_14": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_205": {
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_size if i == 0 else self.hidden_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_size if i < self.num_layers else self.output_size",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_107": {
                "start": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_132": {
                "start": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_613": {
                "*size": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_79": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_81": {
                "normalized_shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(5, 3)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/utils/optimization_utils.py": {
        "torch": {
            "Sequential_280": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(100, 10), nn.ReLU(), nn.Linear(10, 2)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_281": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_282": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_283": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_233": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_235": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obqa/utils/tasks/plain_qa/plainqa_task.py": {
        "torch": {
            "cat_83": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tokens.new([self.args.init_token]), tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "src_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_toks, binarize(src)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "obqa/utils/triples.py": {
        "torch": {}
    }
}