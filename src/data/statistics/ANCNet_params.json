{
    "eval_pf_pascal.py": {
        "torch": {
            "is_available_31": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PFPascalDataset(csv_file=os.path.join(args.dataset_image_path, csv_file), dataset_path=args.dataset_image_path, transform=NormalizeImageDict(['source_image', 'target_image']), output_size=cnn_image_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "default_collate",
                            "Name"
                        ]
                    ]
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pf.ImagePairDataset(transform=NormalizeImageDict(['source_image', 'target_image']), dataset_image_path=args.dataset_image_path, dataset_csv_path=os.path.join(args.dataset_image_path, 'image_pairs'), dataset_csv_file=test_csv, output_size=cnn_image_size, keypoints_on=True, original=True, test=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "lib/conv4d.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "data_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Z, data, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[h, b, c_out, w, d, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "data.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[padding, b, c, w, d, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[padding, b, c, w, d, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv3d_56": {
                "variable": {
                    "value": "output[i, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data_padded[i + padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias / (1 + padding * 2)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_3d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kw // 2, kd // 2, kt // 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "conv3d_65": {
                "input": {
                    "value": "data_padded[i + padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding - p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias / (1 + padding * 2)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_3d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kw // 2, kd // 2, kt // 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "conv3d_72": {
                "input": {
                    "value": "data_padded[i + padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "filters[padding + p, :, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias / (1 + padding * 2)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_3d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kw // 2, kd // 2, kt // 2)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "lib/dataloader.py": {
        "torch": {
            "set_num_threads_44": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_95": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_133": {
                "obj": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_103": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_333": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_107": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomSampler_330": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_332": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/eval_util.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "pck",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source_points.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_23": {
                "variable": {
                    "value": "N_pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ne(p_src[0, :], -1) * torch.ne(p_src[1, :], -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_24": {
                "variable": {
                    "value": "point_distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.pow(p_src[:, :N_pts] - p_wrp[:, :N_pts], 2), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "le_28": {
                "variable": {
                    "value": "correct_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(p_src[:, :N_pts] - p_wrp[:, :N_pts], 2), 0), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "L_pck_mat * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_29": {
                "variable": {
                    "value": "pck[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "correct_points.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "torch.pow(p_src[:, :N_pts] - p_wrp[:, :N_pts], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ne_23": {
                "input": {
                    "value": "p_src[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "p_src[:, :N_pts] - p_wrp[:, :N_pts]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/im_pair_dataset.py": {
        "torch": {
            "Tensor_101": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_107": {
                "variable": {
                    "value": "im_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/interpolator.py": {
        "torch": {
            "ones_20": {
                "variable": {
                    "value": "self.maxXY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "self.minXY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_78": {
                "variable": {
                    "value": "iLower",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.floor(keypoints)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_80": {
                "variable": {
                    "value": "iUpper",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ceil(keypoints)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "iX",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(iLower[:, :, 0].unsqueeze(2), iUpper[:, :, 0].unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "iY",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(iLower[:, :, 1].unsqueeze(2), iUpper[:, :, 1].unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "xX",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lower[:, :, 0].unsqueeze(2), upper[:, :, 0].unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "yY",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lower[:, :, 1].unsqueeze(2), upper[:, :, 1].unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_115": {
                "variable": {
                    "value": "UF",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature.view(B, C, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(iY * W + iX).view(B, N * 4)",
                            "Call"
                        ],
                        [
                            "indices.unsqueeze(dim=1).expand(-1, C, -1)",
                            "Call"
                        ],
                        [
                            "boundedXY[:, :, 1] * W + boundedXY[:, :, 0]",
                            "BinOp"
                        ],
                        [
                            "indices.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "iY * W + iX",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_234": {
                "variable": {
                    "value": "boundedXY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyGt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(Xg, keypoint_g) / self.im_fe_ratio - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(Xg, keypoint_g) / self.im_fe_ratio - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_235": {
                "variable": {
                    "value": "boundedXY",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boundedXY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(xyGt, minXY)",
                            "Call"
                        ],
                        [
                            "torch.min(boundedXY, maxXY)",
                            "Call"
                        ],
                        [
                            "boundedXY.long()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_242": {
                "variable": {
                    "value": "coeff",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_276": {
                "variable": {
                    "value": "iLower",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.floor(xyGt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_279": {
                "variable": {
                    "value": "iUpper",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ceil(xyGt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "iX",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(iLower[:, :, 0].unsqueeze(2), iUpper[:, :, 0].unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "iY",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(iLower[:, :, 1].unsqueeze(2), iUpper[:, :, 1].unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "xX",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lower[:, :, 0].unsqueeze(2), upper[:, :, 0].unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "yY",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lower[:, :, 1].unsqueeze(2), upper[:, :, 1].unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_303": {
                "variable": {
                    "value": "onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "self.maxXY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "self.minXY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "gaussian_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int(kernel_size / 2), int(kernel_size / 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "floor_78": {
                "input": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints / self.im_fe_ratio - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ceil_80": {
                "input": {
                    "value": "keypoints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints / self.im_fe_ratio - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_277": {
                "input": {
                    "value": "xyGt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(Xg, keypoint_g) / self.im_fe_ratio - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(Xg, keypoint_g) / self.im_fe_ratio - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ceil_279": {
                "input": {
                    "value": "xyGt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(Xg, keypoint_g) / self.im_fe_ratio - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(Xg, keypoint_g) / self.im_fe_ratio - 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_230": {
                "input": {
                    "value": "Xg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keypoint_g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_271": {
                "input": {
                    "value": "Xg",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "keypoint_g",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model.py": {
        "torch": {
            "pow_21": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_21": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*nn_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "max_508": {
                "variable": {
                    "value": "(corr4d_B_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4d_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "corr4d_B / (corr4d_B_max + eps)",
                            "BinOp"
                        ],
                        [
                            "corr4d_B.view(batch_size, 1, fs1, fs2, fs3, fs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_509": {
                "variable": {
                    "value": "(corr4d_A_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr4d_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "corr4d_A / (corr4d_A_max + eps)",
                            "BinOp"
                        ],
                        [
                            "corr4d_A.view(batch_size, 1, fs1, fs2, fs3, fs4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_536": {
                "variable": {
                    "value": "slices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(slices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_537": {
                "variable": {
                    "value": "(corr4d, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "slices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(tuple(slices), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fmod_538": {
                "variable": {
                    "value": "max_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fmod_539": {
                "variable": {
                    "value": "max_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx.sub(max_l).div(k_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fmod_540": {
                "variable": {
                    "value": "max_j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_idx.sub(max_l).div(k_size).sub(max_k).div(k_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_25": {
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(feature, 2), 1) + epsilon, 0.5).unsqueeze(1).expand_as(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list[:last_layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "variable": {
                    "value": "self.ReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_206": {
                "variable": {
                    "value": "feature_mul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_A.view(b, c, hA * wA).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtraction(tnf_batch['source_image'])",
                            "Call"
                        ],
                        [
                            "feature_A.half()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature_B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_B.view(b, c, hB * wB)",
                            "Call"
                        ],
                        [
                            "self.FeatureExtraction(tnf_batch['target_image'])",
                            "Call"
                        ],
                        [
                            "feature_B.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_221": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024 + self.kernel_size * self.kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_233": {
                "variable": {
                    "value": "feature_normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_234": {
                "variable": {
                    "value": "feature_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_normalized",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(feature, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(feature, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad, self.pad, self.pad, self.pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.kernel_size * self.kernel_size, b, h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "feature.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_253": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.kernel_size * self.kernel_size, b, h, w], dtype=feature.dtype, requires_grad=feature.requires_grad)",
                            "Call"
                        ],
                        [
                            "output.cuda(feature.get_device())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((feature, output), 1)",
                            "Call"
                        ],
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.context_size * self.context_size, b, h, w], dtype=feature_normalized.dtype, requires_grad=feature_normalized.requires_grad)",
                            "Call"
                        ],
                        [
                            "output.cuda(feature_normalized.get_device())",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat((ss, ss1, ss2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_262": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.context_size * self.context_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_278": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_293": {
                "variable": {
                    "value": "feature_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_normalized",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(feature, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(feature, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad, self.pad, self.pad, self.pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_296": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.context_size * self.context_size, b, h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature_normalized.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "feature_normalized.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_313": {
                "variable": {
                    "value": "feature_normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_316": {
                "variable": {
                    "value": "ss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(ss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_317": {
                "variable": {
                    "value": "ss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(ss1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ss, ss1, ss2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.features.children())[:last_layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "conv_body",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.features.children())[:-3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features[0], features[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_482": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_334": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/normalization.py": {
        "torch": {
            "unsqueeze_36": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/pf_dataset.py": {
        "torch": {
            "sum_91": {
                "variable": {
                    "value": "N_pts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ne(point_A_coords[0, :], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_175": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_181": {
                "variable": {
                    "value": "im_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_197": {
                "variable": {
                    "value": "point_coords",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ne_91": {
                "input": {
                    "value": "point_A_coords[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_96": {
                "input": {
                    "value": "point_A_coords[:, :N_pts].max(1)[0] - point_A_coords[:, :N_pts].min(1)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/pf_pascal_dataset.py": {
        "torch": {
            "zeros_170": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s.shape[0]",
                            "Subscript"
                        ],
                        [
                            "kp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "annotation.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "s.shape[0]",
                            "Subscript"
                        ],
                        [
                            "kp.shape[0]",
                            "Subscript"
                        ],
                        [
                            "annotation.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_223": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_230": {
                "variable": {
                    "value": "im_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_286": {
                "variable": {
                    "value": "keypoint",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/plot.py": {
        "torch": {}
    },
    "lib/point_tnf.py": {
        "torch": {
            "sqrt_143": {
                "variable": {
                    "value": "distB",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(deltaX, 2) + torch.pow(deltaY, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_144": {
                "variable": {
                    "value": "(vals, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "distB",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.pow(deltaX, 2) + torch.pow(deltaY, 2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "warped_points_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(warped_points_x, warped_points_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_170": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "(match_A_vals, idx_A_Bvec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_97": {
                "variable": {
                    "value": "(match_B_vals, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "nc_A_Bvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "nc_B_Avec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(batch_size, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_178": {
                "input": {
                    "value": "(target_points_norm[:, 0, :] - grid > 0).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "(target_points_norm[:, 1, :] - grid > 0).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_208": {
                "tensors": {
                    "value": "(X[idx.view(-1)].view(b, 1, N).contiguous(), Y[idx.view(-1)].view(b, 1, N).contiguous())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_223": {
                "input": {
                    "value": "target_points_norm - P_m_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_224": {
                "input": {
                    "value": "target_points_norm - P_p_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_225": {
                "input": {
                    "value": "target_points_norm - P_p_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_226": {
                "input": {
                    "value": "target_points_norm - P_m_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_143": {
                "input": {
                    "value": "deltaY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_points_norm[:, 1, :].unsqueeze(1) - yB.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tools.py": {
        "torch": {
            "max_48": {
                "variable": {
                    "value": "(_, indices_gt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_assignments_gt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_73": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_assignments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_assignments * batch_assignments",
                            "BinOp"
                        ],
                        [
                            "batch_assignments / (Xrs_sum + constant._eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_81": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(indices_gt == indices).sum(dim=1).float()",
                            "Call"
                        ],
                        [
                            "torch.div(accuracy, src_key_num_gt)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "src_key_num_gt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "batch_keys_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_assignments_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "target_batch_keys[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "div_146": {
                "variable": {
                    "value": "err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "err",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dif.norm(dim=2) / image_scale",
                            "BinOp"
                        ],
                        [
                            "dif.norm(dim=2)",
                            "Call"
                        ],
                        [
                            "err.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(err, key_num_gt)",
                            "Call"
                        ],
                        [
                            "distance(target_keys_pred, batch_keys_gt, src_key_num_gt)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_num_gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_gt.sum(dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_167": {
                "variable": {
                    "value": "batch_keys_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_assignments_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "target_batch_keys[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_195": {
                "variable": {
                    "value": "batch_keys_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_assignments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_assignments * batch_assignments",
                            "BinOp"
                        ],
                        [
                            "batch_assignments / (Xrs_sum + constant._eps)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "target_batch_keys[:, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_216": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_assignments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_assignments * batch_assignments",
                            "BinOp"
                        ],
                        [
                            "batch_assignments / (Xrs_sum + constant._eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "num_unique",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(len(torch.unique(kk))) - 1 for kk in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_427": {
                "variable": {
                    "value": "mean_pck3",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_428": {
                "variable": {
                    "value": "mean_pck4",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1029",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1029",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1029",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_34": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(model_dir, str(state['epoch']) + '_' + model_fn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_238": {
                "variable": {
                    "value": "Xrs_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_assignments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_assignments * batch_assignments",
                            "BinOp"
                        ],
                        [
                            "batch_assignments / (Xrs_sum + constant._eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_260": {
                "variable": {
                    "value": "(match_A_vals, idx_A_Bvec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(B, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "xyB",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xB, yB)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_277": {
                "variable": {
                    "value": "(match_B_vals, idx_B_Avec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(B, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "xyA",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xA, yA)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_318": {
                "variable": {
                    "value": "keycorr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keycorr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keycorr / sum_per_row",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(keycorr, size=image_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, N, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "keycorr_original.clone()",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, -1)",
                            "Call"
                        ],
                        [
                            "(keycorr - kmin) / krange",
                            "BinOp"
                        ],
                        [
                            "self.interp(corr, key_gt)",
                            "Call"
                        ],
                        [
                            "keycorr.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, N, H2, W2)",
                            "Call"
                        ],
                        [
                            "self.interp(corr, key_gt)",
                            "Call"
                        ],
                        [
                            "keycorr.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, N, H1, W1)",
                            "Call"
                        ],
                        [
                            "self.upsampling_keycorr(keycorr, image_size)",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, N, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "NormalisationPerRow(keycorr)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(256",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_394": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "keycorr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keycorr / sum_per_row",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(keycorr, size=image_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, N, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "keycorr_original.clone()",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, -1)",
                            "Call"
                        ],
                        [
                            "(keycorr - kmin) / krange",
                            "BinOp"
                        ],
                        [
                            "self.interp(corr, key_gt)",
                            "Call"
                        ],
                        [
                            "keycorr.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, N, H2, W2)",
                            "Call"
                        ],
                        [
                            "self.interp(corr, key_gt)",
                            "Call"
                        ],
                        [
                            "keycorr.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, N, H1, W1)",
                            "Call"
                        ],
                        [
                            "self.upsampling_keycorr(keycorr, image_size)",
                            "Call"
                        ],
                        [
                            "keycorr.view(B, N, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "NormalisationPerRow(keycorr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "xyA",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xA, yA)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_101": {
                "input": {
                    "value": "wrong",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(err > alpha).sum(dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_num_gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask_gt.sum(dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "div_223": {
                "input": {
                    "value": "num_unique",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([float(len(torch.unique(kk))) - 1 for kk in indices])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "src_key_num_gt.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_258": {
                "variable": {
                    "value": "nc_A_Bvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_A_Bvec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(B, fs1, fs2, fs3 * fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_A_Bvec, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "nc_B_Avec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nc_B_Avec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr4d.view(B, fs1 * fs2, fs3, fs4)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(nc_B_Avec, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_222": {
                "input": {
                    "value": "kk",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/torch_util.py": {
        "torch": {
            "unsqueeze_49": {
                "variable": {
                    "value": "x_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "exp_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - x_k.expand_as(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_52": {
                "input": {
                    "value": "exp_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sum(exp_x, dim).unsqueeze(dim).expand_as(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_23": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "exp_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "input": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(model_dir, str(state['epoch']) + '_' + model_fn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_49": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x - x_k.expand_as(x)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/transformation.py": {
        "torch": {
            "Tensor_23": {
                "variable": {
                    "value": "self.theta_identity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grid_sample_50": {
                "variable": {
                    "value": "warped_image_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "sampling_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gridGen(theta_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "affine_grid_69": {
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "theta.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size((batch_size, self.out_ch, self.out_h, self.out_w))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}