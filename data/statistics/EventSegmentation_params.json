{
    "Zacks_VGG_RNN.py": {
        "tensorflow": {
            "placeholder_125": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "init_state1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_hidden1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_131": {
                "variable": {
                    "value": "W_RNN1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size + n_hidden1, n_hidden1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "b_RNN1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer(dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden1, feature_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_143": {
                "variable": {
                    "value": "b_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[feature_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_149": {
                "variable": {
                    "value": "(r, g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs * 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_151": {
                "variable": {
                    "value": "VGG_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b - VGG_MEAN[0], g - VGG_MEAN[1], r - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "RNN_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vgg16_Features[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_184": {
                "variable": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(fc1[0, :], vgg16_Features[1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_185": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "learnError * tf.ones_like(sseLoss1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_186": {
                "variable": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "sseLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_190": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_197": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='vgg_16')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat([inputs, state], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_84": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_89": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_96": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat([inputs, h], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_99": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=3, num_or_size_splits=3, value=inputs * 255.0)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_101": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_103": {
                "variable": {
                    "value": "forget_bias_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_bias",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_204": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_142": {
                "shape": {
                    "value": "[n_hidden1, feature_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_143": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_16'",
                            "str"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[VGG_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "vgg16_Features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4096)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "a": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RNNCell(W_RNN1, b_RNN1, RNN_inputs, curr_state1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([n_hidden1, feature_size], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_184": {
                "x": {
                    "value": "fc1[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "vgg16_Features[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_186": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(sseLoss1, learnError * tf.ones_like(sseLoss1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_199": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_73": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_83": {
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_98": {
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_132": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_185": {
                "input": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Zacks_VGG_RNN_EventLayer.py": {
        "tensorflow": {}
    },
    "Zacks_VGG_RNN_EventLayer_Inference.py": {
        "tensorflow": {
            "placeholder_150": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "init_state1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2 * n_hidden1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "State",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "W_lstm1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size + n_hidden1, 4 * n_hidden1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_163": {
                "variable": {
                    "value": "b_lstm1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4 * n_hidden1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer(dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_168": {
                "variable": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden1, feature_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_169": {
                "variable": {
                    "value": "b_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[feature_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_175": {
                "variable": {
                    "value": "(r, g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs * 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_177": {
                "variable": {
                    "value": "VGG_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b - VGG_MEAN[0], g - VGG_MEAN[1], r - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "variable": {
                    "value": "RNN_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vgg16_Features[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_215": {
                "variable": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(fc1[0, :], vgg16_Features[1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_216": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "learnError * tf.ones_like(sseLoss1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_217": {
                "variable": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_218": {
                "variable": {
                    "value": "sseLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_221": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_228": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat([inputs, state], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_93": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_98": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat([inputs, h], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_108": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=3, num_or_size_splits=3, value=inputs * 255.0)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_110": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_112": {
                "variable": {
                    "value": "forget_bias_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_bias",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_234": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_168": {
                "shape": {
                    "value": "[n_hidden1, feature_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_169": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_16'",
                            "str"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[VGG_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "vgg16_Features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4096)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "subtract_215": {
                "x": {
                    "value": "fc1[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "vgg16_Features[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_217": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(sseLoss1, learnError * tf.ones_like(sseLoss1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_82": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_92": {
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_163": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_216": {
                "input": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Zacks_VGG_RNN_Inference.py": {
        "tensorflow": {
            "placeholder_119": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 224, 224, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "init_state1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_hidden1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "W_RNN1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size + n_hidden1, n_hidden1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_126": {
                "variable": {
                    "value": "b_RNN1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init_ops.zeros_initializer(dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_136": {
                "variable": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden1, feature_size], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "b_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[feature_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_143": {
                "variable": {
                    "value": "(r, g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs * 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "VGG_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[b - VGG_MEAN[0], g - VGG_MEAN[1], r - VGG_MEAN[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "RNN_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vgg16_Features[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_181": {
                "variable": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(fc1[0, :], vgg16_Features[1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_182": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "learnError * tf.ones_like(sseLoss1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_183": {
                "variable": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "sseLoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_191": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_193": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_76": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat([inputs, state], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_83": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_88": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_95": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "array_ops.concat([inputs, h], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_98": {
                "variable": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=3, num_or_size_splits=3, value=inputs * 255.0)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_100": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "gate_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(array_ops.concat([inputs, state], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, B)",
                            "Call"
                        ],
                        [
                            "math_ops.matmul(array_ops.concat([inputs, h], 1), W)",
                            "Call"
                        ],
                        [
                            "nn_ops.bias_add(gate_inputs, b)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ],
                        [
                            "constant_op.constant(1, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_102": {
                "variable": {
                    "value": "forget_bias_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "forget_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget_bias",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_136": {
                "shape": {
                    "value": "[n_hidden1, feature_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_137": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[feature_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_16'",
                            "str"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[VGG_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "vgg16_Features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4096)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "a": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RNNCell(W_RNN1, b_RNN1, RNN_inputs, curr_state1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([n_hidden1, feature_size], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_181": {
                "x": {
                    "value": "fc1[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "vgg16_Features[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.greater(sseLoss1, learnError * tf.ones_like(sseLoss1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_72": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_82": {
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_97": {
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_126": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_182": {
                "input": {
                    "value": "sseLoss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(fc1[0, :], vgg16_Features[1, :]))",
                            "Call"
                        ],
                        [
                            "tf.multiply(sseLoss1, tf.cast(mask, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evaluateBreakfastActions.py": {
        "tensorflow": {}
    },
    "getBoundaries.py": {
        "tensorflow": {}
    },
    "preprocessVideo.py": {
        "tensorflow": {}
    }
}