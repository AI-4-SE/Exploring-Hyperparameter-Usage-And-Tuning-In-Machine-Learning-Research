{
    "setup.py": {
        "torch": {
            "split_13": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/core/anchor_generator.py": {
        "torch": {
            "stack_18": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(spaces)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_26": {
                "variable": {
                    "value": "attr[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor(anchor[key]) for anchor in cfg.ANCHORS]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_72": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(centers, sizes, angles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_11": {
                "start": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "x1 - dx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_18": {
                "*tensors": {
                    "value": "spaces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_linspace_midpoint(*x) for x in arrays]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_25": {
                "data": {
                    "value": "anchor[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "self.cfg.VOXEL_SIZE[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "self.cfg.GRID_BOUNDS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_58": {
                "start": {
                    "value": "self.cfg.NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/core/box_encode.py": {
        "torch": {
            "cat_9": {
                "variable": {
                    "value": "A_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(A_norm, A_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(P_xyz * A_norm + A_xyz, P_wlh.exp() * A_wlh, P_yaw + A_yaw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((G_xyz - A_xyz) / A_norm, (G_wlh / A_wlh).log(), (G_yaw - A_yaw) % math.pi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/core/preprocess.py": {
        "torch": {
            "stack_68": {
                "tensors": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/core/proposal_targets.py": {
        "torch": {
            "zeros_like_50": {
                "variable": {
                    "value": "G_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "full_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "boxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_idx[class_mask][matches]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(matches).view(self.anchors.shape[:-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_74": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(labels).view(self.anchors.shape[:-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vision3d/core/refinement_targets.py": {
        "torch": {
            "tensor_17": {
                "variable": {
                    "value": "self.anchor_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "anchor_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[anchor['wlh'] for anchor in cfg.ANCHORS]",
                            "ListComp"
                        ],
                        [
                            "self.anchor_sizes.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "self.anchor_radii",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "anchor_radii",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[anchor['radius'] for anchor in cfg.ANCHORS]",
                            "ListComp"
                        ],
                        [
                            "self.anchor_radii.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_25": {
                "variable": {
                    "value": "box_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "repeat_interleave_26": {
                "variable": {
                    "value": "box_batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "torch.LongTensor(box_counts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_28": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1, num_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randint_37": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "(B, M)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "targets_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, N, self.num_classes + 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "targets_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, N, self.num_classes, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "keypoints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_81": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoints[:, :, None, :] - box_centers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "item['boxes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "item['class_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_27": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/dataset/augmentation.py": {
        "torch": {
            "cat_144": {
                "tensors": {
                    "value": "(torch.from_numpy(boxes), torch.from_numpy(sample_boxes))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((xy, zwlh, rz + theta), 1)",
                            "Call"
                        ],
                        [
                            "self._split_rotate_boxes(theta, boxes)",
                            "Call"
                        ],
                        [
                            "np.concatenate((x, -y, zwlh, -rz), 1)",
                            "Call"
                        ],
                        [
                            "self._split_flip_boxes(boxes)",
                            "Call"
                        ],
                        [
                            "np.concatenate((factor * xyzwlh, rz), 1)",
                            "Call"
                        ],
                        [
                            "self._split_scale_boxes(factor, boxes)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.from_numpy(boxes), torch.from_numpy(sample_boxes))).cuda().float()[:, [0, 1, 3, 4, 6]]",
                            "Subscript"
                        ],
                        [
                            "samples['boxes']",
                            "Subscript"
                        ],
                        [
                            "np.concatenate((boxes, samples['boxes']))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_146": {
                "ndarray": {
                    "value": "sample_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/dataset/kitti_dataset.py": {
        "torch": {
            "full_like_125": {
                "variable": {
                    "value": "item[box_ignore]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "item['class_idx']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/detector/layers.py": {
        "torch": {
            "min_35": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(indices, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_49": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.clamp(indices, min=0), image_dims)",
                            "Call"
                        ],
                        [
                            "2 * (indices / (image_dims - 1)) - 1",
                            "BinOp"
                        ],
                        [
                            "keypoint_xyz[:, None, :, :2] - self.pixel_offset",
                            "BinOp"
                        ],
                        [
                            "indices / (self.base_pixel_size * self.cfg.STRIDES[-1])",
                            "BinOp"
                        ],
                        [
                            "self.normalize_indices(indices, H, W).flip(3)",
                            "Call"
                        ],
                        [
                            "self.compute_bev_indices(keypoint_xyz, H, W)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_35": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.clamp(indices, min=0), image_dims)",
                            "Call"
                        ],
                        [
                            "2 * (indices / (image_dims - 1)) - 1",
                            "BinOp"
                        ],
                        [
                            "keypoint_xyz[:, None, :, :2] - self.pixel_offset",
                            "BinOp"
                        ],
                        [
                            "indices / (self.base_pixel_size * self.cfg.STRIDES[-1])",
                            "BinOp"
                        ],
                        [
                            "self.normalize_indices(indices, H, W).flip(3)",
                            "Call"
                        ],
                        [
                            "self.compute_bev_indices(keypoint_xyz, H, W)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_64": {
                "num_features": {
                    "value": "channels[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/detector/model.py": {
        "torch": {
            "split_69": {
                "variable": {
                    "value": "points_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "item['points']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "point_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_features + [bev_features]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*pnets",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/detector/proposal.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cfg.PROPOSAL.C_IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg.NUM_CLASSES * cfg.NUM_YAW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cfg.PROPOSAL.C_IN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg.NUM_CLASSES * cfg.NUM_YAW * cfg.BOX_DOF",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_121": {
                "variable": {
                    "value": "loss_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "G_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_122": {
                "variable": {
                    "value": "loss_wlh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_wlh",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "G_wlh",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_123": {
                "input": {
                    "value": "P_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "G_yaw",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_34": {
                "start": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_35": {
                "start": {
                    "value": "n_cls",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/detector/refinement.py": {
        "torch": {
            "topk_40": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - scores[..., -1:]",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "self.cfg.PROPOSAL.TOPK",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/detector/roi_grid_pool.py": {
        "torch": {
            "split_44": {
                "variable": {
                    "value": "(xy, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c, -s, s, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((c, -s, s, c), dim=-1).view(b, n, m, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "xy.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xy.squeeze(-1), z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_45": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.unsqueeze(-1).expand(-1, -1, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_45": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.unsqueeze(-1).expand(-1, -1, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_59": {
                "*size": {
                    "value": "(b, n, m, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/detector/second.py": {
        "torch": {
            "Sequential_74": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes, stride, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ZeroPad2d_60": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "*block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/detector/sparse_cnn.py": {
        "torch": {
            "randint_36": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_99": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "volume.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_109": {
                "variable": {
                    "value": "helper_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "batch_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "num_features": {
                    "value": "C_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.split(batch_count)",
                            "Call"
                        ],
                        [
                            "[torch.cat((c, p)) for (c, p) in zip(chunks, pad_values)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "(c, p)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/inference.py": {
        "torch": {
            "load_25": {
                "f": {
                    "value": "../vision3d/ckpts/epoch_12.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/ops/focal_loss.py": {
        "torch": {
            "sigmoid_32": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_33": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/ops/iou_nms.py": {
        "torch": {
            "unique_27": {
                "input": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_114": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_125": {
                "input": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_128": {
                "input": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/ops/matcher.py": {
        "torch": {
            "nonzero_158": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels != -1) & (labels != bg_label)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_159": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels == bg_label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_112": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_81": {
                "input": {
                    "value": "match_quality_matrix >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randperm_169": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_170": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vision3d/train.py": {
        "torch": {
            "DataLoader_14": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "KittiDatasetTrain(cfg)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "preprocessor.collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./ckpts/epoch_{epoch}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "OneCycleLR_77": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(parameters, lr=0.01)",
                            "Call"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "epochs": {
                    "value": "cfg.TRAIN.EPOCHS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_epoch * N / cfg.TRAIN.BATCH_SIZE",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_32": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(state_dict=model.state_dict(), optimizer=optimizer.state_dict(), epoch=epoch, meta=meta)",
                            "Call"
                        ],
                        [
                            "torch.load(fpath)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'./ckpts/epoch_{epoch}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "clip_grad_norm__66": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}