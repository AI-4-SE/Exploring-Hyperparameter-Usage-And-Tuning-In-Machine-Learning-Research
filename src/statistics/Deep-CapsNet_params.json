{
    "helpers.py": {
        "torch": {
            "sum_39": {
                "variable": {
                    "value": "correct_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_29": {
                "n": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "index_select_29": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "tensor.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "load_data.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(root=self.data_path, train=True, download=True, transform=transforms.Compose([transforms.RandomAffine(degrees=self.rotation, translate=self.translate, scale=self.scale), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST(root=self.data_path, train=False, download=True, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=self.data_path, train=True, download=True, transform=transforms.Compose([transforms.RandomAffine(degrees=self.rotation, translate=self.translate, scale=self.scale), transforms.Grayscale(), transforms.Resize(self.img_size), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=self.data_path, train=False, download=True, transform=transforms.Compose([transforms.Grayscale(), transforms.Resize(self.img_size), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "sum_15": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "caps ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reshaped_in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_channel_in * self.caps_num_in",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reshaped_out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_channel_out * self.caps_num_out",
                            "BinOp"
                        ],
                        [
                            "self.caps_num_out * self.conv_channel_out",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_129": {
                "variable": {
                    "value": "self.conv_3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "reshaped_in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_channel_in * self.caps_num_in",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reshaped_out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_channel_out * self.caps_num_out",
                            "BinOp"
                        ],
                        [
                            "self.caps_num_out * self.conv_channel_out",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(caps_num_in, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.input_capsules, self.output_capsules, self.out_dimensions, self.in_dimensions) * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, 1, self.output_capsules, self.out_dimensions) * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.conv_channel_in * self.caps_num_in, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv_3d(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.conv_channel_in, self.conv_channel_out, self.caps_num_out, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 5, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.routing(x, x_detached, batch_size, self.routing_iter)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=2).unsqueeze(dim=4)",
                            "Call"
                        ],
                        [
                            "x.type(torch.FloatTensor).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 16, self.neurons, self.neurons)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers1(x)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers2(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers3(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.img_size, self.img_size)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.toCaps(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_00(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_02(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_03(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_10(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_12(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_13(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_20(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_22(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_23(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_30(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_32(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_33(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "torch.cat((xa, xb), dim=-2)",
                            "Call"
                        ],
                        [
                            "self.to_scalar(dig_caps)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_262": {
                "variable": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.conv_channel_in * self.caps_num_in, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv_3d(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.conv_channel_in, self.conv_channel_out, self.caps_num_out, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 5, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.routing(x, x_detached, batch_size, self.routing_iter)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=2).unsqueeze(dim=4)",
                            "Call"
                        ],
                        [
                            "x.type(torch.FloatTensor).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 16, self.neurons, self.neurons)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers1(x)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers2(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers3(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.img_size, self.img_size)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.toCaps(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_00(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_02(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_03(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_10(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_12(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_13(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_20(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_22(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_23(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_30(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_32(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_33(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "torch.cat((xa, xb), dim=-2)",
                            "Call"
                        ],
                        [
                            "self.to_scalar(dig_caps)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_268": {
                "variable": {
                    "value": "batch_ind",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "reconstructed.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_269": {
                "variable": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_ind, max_len_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "masked",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1) + x.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_297": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.caps_dimension * self.num_caps, self.neurons * self.neurons * 16)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_299": {
                "variable": {
                    "value": "self.reconst_layers1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(num_features=16, momentum=0.8)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_303": {
                "variable": {
                    "value": "self.reconst_layers2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_304": {
                "variable": {
                    "value": "self.reconst_layers3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "self.reconst_layers4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=16, out_channels=1, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_322": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.conv_channel_in * self.caps_num_in, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv_3d(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.conv_channel_in, self.conv_channel_out, self.caps_num_out, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 5, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.routing(x, x_detached, batch_size, self.routing_iter)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=2).unsqueeze(dim=4)",
                            "Call"
                        ],
                        [
                            "x.type(torch.FloatTensor).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 16, self.neurons, self.neurons)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers1(x)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers2(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers3(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.img_size, self.img_size)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.toCaps(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_00(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_02(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_03(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_10(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_12(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_13(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_20(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_22(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_23(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_30(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_32(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_33(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "torch.cat((xa, xb), dim=-2)",
                            "Call"
                        ],
                        [
                            "self.to_scalar(dig_caps)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "p2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 0, 1, 0)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_325": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.conv_channel_in * self.caps_num_in, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv_3d(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.conv_channel_in, self.conv_channel_out, self.caps_num_out, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 5, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.routing(x, x_detached, batch_size, self.routing_iter)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=2).unsqueeze(dim=4)",
                            "Call"
                        ],
                        [
                            "x.type(torch.FloatTensor).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 16, self.neurons, self.neurons)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers1(x)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers2(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers3(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.img_size, self.img_size)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.toCaps(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_00(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_02(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_03(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_10(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_12(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_13(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_20(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_22(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_23(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_30(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_32(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_33(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "torch.cat((xa, xb), dim=-2)",
                            "Call"
                        ],
                        [
                            "self.to_scalar(dig_caps)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "p2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 0, 1, 0)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_348": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_349": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MSELoss_402": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xa, xb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_481": {
                "variable": {
                    "value": "v_c",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.conv_channel_in * self.caps_num_in, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv_3d(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.conv_channel_in, self.conv_channel_out, self.caps_num_out, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 5, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.routing(x, x_detached, batch_size, self.routing_iter)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=2).unsqueeze(dim=4)",
                            "Call"
                        ],
                        [
                            "x.type(torch.FloatTensor).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 16, self.neurons, self.neurons)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers1(x)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers2(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers3(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.img_size, self.img_size)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.toCaps(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_00(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_02(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_03(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_10(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_12(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_13(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_20(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_22(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_23(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_30(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_32(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_33(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "torch.cat((xa, xb), dim=-2)",
                            "Call"
                        ],
                        [
                            "self.to_scalar(dig_caps)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_16": {
                "input": {
                    "value": "dot_prod + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.B.permute(0, 5, 3, 1, 2, 4).contiguous().view(batch_size, self.conv_channel_in, 1, self.height * self.width * self.conv_channel_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_233": {
                "variable": {
                    "value": "c_ij",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "b_ij",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.new_zeros(size=(x.size()[0], self.input_capsules, self.output_capsules, 1), requires_grad=False).to(self.device)",
                            "Call"
                        ],
                        [
                            "b_ij + a_ij",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_472": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.conv_channel_in * self.caps_num_in, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv_3d(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.conv_channel_in, self.conv_channel_out, self.caps_num_out, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 5, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.routing(x, x_detached, batch_size, self.routing_iter)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=2).unsqueeze(dim=4)",
                            "Call"
                        ],
                        [
                            "x.type(torch.FloatTensor).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 16, self.neurons, self.neurons)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers1(x)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers2(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers3(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.img_size, self.img_size)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.toCaps(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_00(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_02(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_03(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_10(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_12(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_13(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_20(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_22(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_23(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_30(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_32(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_33(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "torch.cat((xa, xb), dim=-2)",
                            "Call"
                        ],
                        [
                            "self.to_scalar(dig_caps)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(batch_size, self.conv_channel_in * self.caps_num_in, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv_3d(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self.conv_channel_in, self.conv_channel_out, self.caps_num_out, self.height, self.width)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 5, 3, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.routing(x, x_detached, batch_size, self.routing_iter)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(dim=2).unsqueeze(dim=4)",
                            "Call"
                        ],
                        [
                            "x.type(torch.FloatTensor).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, 16, self.neurons, self.neurons)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers1(x)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers2(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers3(x)",
                            "Call"
                        ],
                        [
                            "func.pad(x, p2d, 'constant', 0)",
                            "Call"
                        ],
                        [
                            "self.reconst_layers4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, self.img_size, self.img_size)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.toCaps(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_00(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_02(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_03(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_10(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_12(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_13(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_20(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_22(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_23(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "self.conv2dcaps_30(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_32(x)",
                            "Call"
                        ],
                        [
                            "self.conv2dcaps_33(x)",
                            "Call"
                        ],
                        [
                            "x + x_skip",
                            "BinOp"
                        ],
                        [
                            "torch.cat((xa, xb), dim=-2)",
                            "Call"
                        ],
                        [
                            "self.to_scalar(dig_caps)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_299": {
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_300": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_305": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_484": {
                "input": {
                    "value": "m_plus - v_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_485": {
                "input": {
                    "value": "v_c - m_minus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_213": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_capsules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.output_capsules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.out_dimensions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.in_dimensions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_214": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.output_capsules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.out_dimensions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "in_features": {
                    "value": "self.caps_dimension * self.num_caps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.neurons * self.neurons * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "deepcaps.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_24": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "deepcaps.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_folder + checkpoint_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_36": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_folder + checkpoint_name",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}