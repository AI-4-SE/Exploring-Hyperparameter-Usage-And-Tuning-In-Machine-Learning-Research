{
    "semantic_image_synthesis/util/visualizer.py": {
        "tensorflow": {
            "FileWriter_28": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cross_view_translation/data/__init__.py": {
        "torch": {}
    },
    "cross_view_translation/data/aligned_dataset.py": {
        "torch": {}
    },
    "cross_view_translation/data/base_dataset.py": {
        "torch": {}
    },
    "cross_view_translation/data/image_folder.py": {
        "torch": {}
    },
    "cross_view_translation/models/base_model.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_129": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "str(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_102": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cross_view_translation/models/lggan_model.py": {
        "torch": {
            "cat_93": {
                "variable": {
                    "value": "combine_AD",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_D)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "real_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "real_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "real_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "real_DB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_D, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "real_DB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_D, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "real_DB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_D, self.real_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "fake_AB_global",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B_global)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "fake_DB_global",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_D, self.fake_B_global)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "fake_AB_local",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "fake_DB_local",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_D, self.fake_B_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "fake_AB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "fake_DB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.real_D, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_64": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "self.optimizer_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.netD1.parameters(), self.netD2.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "(self.real_A, self.fake_B_global)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "(self.real_A, self.fake_B_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "(self.real_A, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "(self.real_D, self.fake_B_global)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "(self.real_D, self.fake_B_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "(self.real_D, self.fake_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_259": {
                "input": {
                    "value": "torch.abs(self.fake_B_local[:, :, :, :-1] - self.fake_B_local[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_260": {
                "input": {
                    "value": "torch.abs(self.fake_B_local[:, :, :-1, :] - self.fake_B_local[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_253": {
                "input": {
                    "value": "torch.abs(self.fake_B[:, :, :, :-1] - self.fake_B[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_254": {
                "input": {
                    "value": "torch.abs(self.fake_B[:, :, :-1, :] - self.fake_B[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_256": {
                "input": {
                    "value": "torch.abs(self.fake_B_global[:, :, :, :-1] - self.fake_B_global[:, :, :, 1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_257": {
                "input": {
                    "value": "torch.abs(self.fake_B_global[:, :, :-1, :] - self.fake_B_global[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_259": {
                "input": {
                    "value": "self.fake_B_local[:, :, :, :-1] - self.fake_B_local[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_260": {
                "input": {
                    "value": "self.fake_B_local[:, :, :-1, :] - self.fake_B_local[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_253": {
                "input": {
                    "value": "self.fake_B[:, :, :, :-1] - self.fake_B[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_254": {
                "input": {
                    "value": "self.fake_B[:, :, :-1, :] - self.fake_B[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_256": {
                "input": {
                    "value": "self.fake_B_global[:, :, :, :-1] - self.fake_B_global[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_257": {
                "input": {
                    "value": "self.fake_B_global[:, :, :-1, :] - self.fake_B_global[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cross_view_translation/models/networks.py": {
        "torch": {
            "LambdaLR_31": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ],
                        [
                            "net[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "L1Loss_128": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_336": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_338": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_367": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_440": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_441": {
                "variable": {
                    "value": "self.conv1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_442": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_443": {
                "variable": {
                    "value": "self.conv2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_444": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_445": {
                "variable": {
                    "value": "self.conv3_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_481": {
                "variable": {
                    "value": "self.deconv3_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_482": {
                "variable": {
                    "value": "self.deconv3_norm_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_483": {
                "variable": {
                    "value": "self.deconv4_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_484": {
                "variable": {
                    "value": "self.deconv4_norm_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_487": {
                "variable": {
                    "value": "self.deconv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_488": {
                "variable": {
                    "value": "self.deconv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_489": {
                "variable": {
                    "value": "self.deconv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_490": {
                "variable": {
                    "value": "self.deconv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_491": {
                "variable": {
                    "value": "self.deconv5_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_492": {
                "variable": {
                    "value": "self.deconv5_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_493": {
                "variable": {
                    "value": "self.deconv5_7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_497": {
                "variable": {
                    "value": "self.deconv3_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_498": {
                "variable": {
                    "value": "self.deconv3_norm_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_499": {
                "variable": {
                    "value": "self.deconv4_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_500": {
                "variable": {
                    "value": "self.deconv4_norm_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_501": {
                "variable": {
                    "value": "self.deconv5_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_504": {
                "variable": {
                    "value": "self.deconv3_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_505": {
                "variable": {
                    "value": "self.deconv3_norm_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_506": {
                "variable": {
                    "value": "self.deconv4_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_507": {
                "variable": {
                    "value": "self.deconv4_norm_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_508": {
                "variable": {
                    "value": "self.deconv5_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_562": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_563": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_norm(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_564": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_norm(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_565": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_norm(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_583": {
                "variable": {
                    "value": "x_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_norm_local(self.deconv3_local(middle_x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_585": {
                "variable": {
                    "value": "x_feature_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_norm_local(self.deconv4_local(x_local))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_605": {
                "variable": {
                    "value": "label_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local * mask_1_64",
                            "BinOp"
                        ],
                        [
                            "F.pad(label_1, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_606": {
                "variable": {
                    "value": "label_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local * mask_2_64",
                            "BinOp"
                        ],
                        [
                            "F.pad(label_2, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_607": {
                "variable": {
                    "value": "label_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local * mask_3_64",
                            "BinOp"
                        ],
                        [
                            "F.pad(label_3, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_608": {
                "variable": {
                    "value": "label_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local * mask_4_64",
                            "BinOp"
                        ],
                        [
                            "F.pad(label_4, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_609": {
                "variable": {
                    "value": "label_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local * mask_5_64",
                            "BinOp"
                        ],
                        [
                            "F.pad(label_5, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_610": {
                "variable": {
                    "value": "label_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local * mask_6_64",
                            "BinOp"
                        ],
                        [
                            "F.pad(label_6, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_613": {
                "variable": {
                    "value": "result_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_1(label_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_615": {
                "variable": {
                    "value": "result_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_2(label_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_616": {
                "variable": {
                    "value": "result_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_3(label_3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_617": {
                "variable": {
                    "value": "result_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_4(label_4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_618": {
                "variable": {
                    "value": "result_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_5(label_5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_619": {
                "variable": {
                    "value": "result_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_6(label_6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_626": {
                "variable": {
                    "value": "x_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_norm_global(self.deconv3_global(middle_x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_627": {
                "variable": {
                    "value": "x_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_norm_global(self.deconv4_global(x_global))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_628": {
                "variable": {
                    "value": "x_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_global",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.deconv3_norm_global(self.deconv3_global(middle_x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv4_norm_global(self.deconv4_global(x_global)))",
                            "Call"
                        ],
                        [
                            "F.pad(x_global, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_629": {
                "variable": {
                    "value": "result_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_global(x_global)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_631": {
                "variable": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_norm_attention(self.deconv3_attention(middle_x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_633": {
                "variable": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_norm_attention(self.deconv4_attention(x_attention))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_636": {
                "variable": {
                    "value": "softmax_",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_661": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_662": {
                "variable": {
                    "value": "self.conv1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_663": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_664": {
                "variable": {
                    "value": "self.conv2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_665": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_666": {
                "variable": {
                    "value": "self.conv3_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_702": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_703": {
                "variable": {
                    "value": "self.deconv3_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_704": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_705": {
                "variable": {
                    "value": "self.deconv4_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_706": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_728": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_729": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_norm(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_730": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_norm(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_731": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_norm(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_748": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_norm(self.deconv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_749": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_norm(self.deconv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_756": {
                "variable": {
                    "value": "x_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1:, :, :]",
                            "Subscript"
                        ],
                        [
                            "F.pad(x_feature, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_758": {
                "variable": {
                    "value": "result_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5(x_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_785": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(attention_global, attention_local)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_786": {
                "variable": {
                    "value": "softmax_",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_805": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_806": {
                "variable": {
                    "value": "self.conv1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_807": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_808": {
                "variable": {
                    "value": "self.conv2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_816": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.padding, self.padding, self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_817": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_norm(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_818": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ],
                        [
                            "F.pad(input, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_norm(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_norm(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks9(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv3_norm(self.deconv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv4_norm(self.deconv4(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding, self.padding, self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_847": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "StepLR_33": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_185": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_187": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_342": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_35": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "target_real_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "data": {
                    "value": "target_fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_217": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_218": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_221": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_243": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_271": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_273": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_286": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_349": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_356": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_373": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_388": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_389": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_407": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_410": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_413": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_837": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_838": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_839": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_841": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_842": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "Conv2d_226": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_237": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_242": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_263": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_275": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_279": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_401": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_845": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReplicationPad2d_265": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_281": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_363": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "cross_view_translation/options/base_options.py": {
        "torch": {
            "set_device_116": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cross_view_translation/util/image_pool.py": {
        "torch": {
            "cat_31": {
                "variable": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(return_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_17": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cross_view_translation/util/util.py": {
        "torch": {
            "mean_27": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_27": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/ade20k/models/networks/generator.py": {
        "torch": {
            "Tensor_23": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_77": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "151",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_81": {
                "variable": {
                    "value": "self.conv1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_83": {
                "variable": {
                    "value": "self.conv2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_85": {
                "variable": {
                    "value": "self.conv3_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_87": {
                "variable": {
                    "value": "self.conv4_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_89": {
                "variable": {
                    "value": "self.conv5_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_110": {
                "variable": {
                    "value": "self.deconv3_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_111": {
                "variable": {
                    "value": "self.deconv3_norm_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_112": {
                "variable": {
                    "value": "self.deconv4_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_113": {
                "variable": {
                    "value": "self.deconv4_norm_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.deconv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 * 52",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.deconv5_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.deconv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.deconv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.deconv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.deconv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.deconv5_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.deconv5_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.deconv5_7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.deconv5_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.deconv5_9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.deconv5_10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.deconv5_11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.deconv5_12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.deconv5_13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.deconv5_14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.deconv5_15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.deconv5_16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.deconv5_17",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.deconv5_18",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.deconv5_19",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.deconv5_20",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "variable": {
                    "value": "self.deconv5_21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.deconv5_22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.deconv5_23",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.deconv5_24",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.deconv5_25",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.deconv5_26",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.deconv5_27",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.deconv5_28",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.deconv5_29",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.deconv5_30",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.deconv5_31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.deconv5_32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "self.deconv5_33",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "variable": {
                    "value": "self.deconv5_34",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.deconv5_35",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.deconv5_36",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.deconv5_37",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.deconv5_38",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.deconv5_39",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "variable": {
                    "value": "self.deconv5_40",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.deconv5_41",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.deconv5_42",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.deconv5_43",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.deconv5_44",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.deconv5_45",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.deconv5_46",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "variable": {
                    "value": "self.deconv5_47",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.deconv5_48",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "variable": {
                    "value": "self.deconv5_49",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "variable": {
                    "value": "self.deconv5_50",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "variable": {
                    "value": "self.deconv5_51",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_170": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "51",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_174": {
                "variable": {
                    "value": "self.deconv3_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_175": {
                "variable": {
                    "value": "self.deconv3_norm_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_176": {
                "variable": {
                    "value": "self.deconv4_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_177": {
                "variable": {
                    "value": "self.deconv4_norm_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "variable": {
                    "value": "self.deconv5_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_246": {
                "variable": {
                    "value": "result_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_253": {
                "variable": {
                    "value": "label_52",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_51_151",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[:, 51:151, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_0_50, label_52)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_273": {
                "variable": {
                    "value": "x_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_norm_local(self.deconv3_local(middle_x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_274": {
                "variable": {
                    "value": "x_feature_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_norm_local(self.deconv4_local(x_local))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_334": {
                "variable": {
                    "value": "feature_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_0, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_344": {
                "variable": {
                    "value": "feature_combine_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((feature_0, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34, feature_35, feature_36, feature_37, feature_38, feature_39, feature_40, feature_41, feature_42, feature_43, feature_44, feature_45, feature_46, feature_47, feature_48, feature_49, feature_50), 0)",
                            "Call"
                        ],
                        [
                            "self.avgpool(feature_combine)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_354": {
                "variable": {
                    "value": "target_label_0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_355": {
                "variable": {
                    "value": "target_label_1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_356": {
                "variable": {
                    "value": "target_label_2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_357": {
                "variable": {
                    "value": "target_label_3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_358": {
                "variable": {
                    "value": "target_label_4",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_359": {
                "variable": {
                    "value": "target_label_5",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_360": {
                "variable": {
                    "value": "target_label_6",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_361": {
                "variable": {
                    "value": "target_label_7",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_362": {
                "variable": {
                    "value": "target_label_8",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_363": {
                "variable": {
                    "value": "target_label_9",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_364": {
                "variable": {
                    "value": "target_label_10",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_365": {
                "variable": {
                    "value": "target_label_11",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_366": {
                "variable": {
                    "value": "target_label_12",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_367": {
                "variable": {
                    "value": "target_label_13",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_368": {
                "variable": {
                    "value": "target_label_14",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_369": {
                "variable": {
                    "value": "target_label_15",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_370": {
                "variable": {
                    "value": "target_label_16",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_371": {
                "variable": {
                    "value": "target_label_17",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_372": {
                "variable": {
                    "value": "target_label_18",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_373": {
                "variable": {
                    "value": "target_label_19",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_374": {
                "variable": {
                    "value": "target_label_20",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_375": {
                "variable": {
                    "value": "target_label_21",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_376": {
                "variable": {
                    "value": "target_label_22",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_377": {
                "variable": {
                    "value": "target_label_23",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_378": {
                "variable": {
                    "value": "target_label_24",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_379": {
                "variable": {
                    "value": "target_label_25",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_380": {
                "variable": {
                    "value": "target_label_26",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_381": {
                "variable": {
                    "value": "target_label_27",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_382": {
                "variable": {
                    "value": "target_label_28",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_383": {
                "variable": {
                    "value": "target_label_29",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_384": {
                "variable": {
                    "value": "target_label_30",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_385": {
                "variable": {
                    "value": "target_label_31",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_386": {
                "variable": {
                    "value": "target_label_32",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_387": {
                "variable": {
                    "value": "target_label_33",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_388": {
                "variable": {
                    "value": "target_label_34",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_390": {
                "variable": {
                    "value": "target_label_35",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_391": {
                "variable": {
                    "value": "target_label_36",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_392": {
                "variable": {
                    "value": "target_label_37",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_393": {
                "variable": {
                    "value": "target_label_38",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_394": {
                "variable": {
                    "value": "target_label_39",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_395": {
                "variable": {
                    "value": "target_label_40",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_396": {
                "variable": {
                    "value": "target_label_41",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_397": {
                "variable": {
                    "value": "target_label_42",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_398": {
                "variable": {
                    "value": "target_label_43",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_399": {
                "variable": {
                    "value": "target_label_44",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_400": {
                "variable": {
                    "value": "target_label_45",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_401": {
                "variable": {
                    "value": "target_label_46",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_402": {
                "variable": {
                    "value": "target_label_47",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_403": {
                "variable": {
                    "value": "target_label_48",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_404": {
                "variable": {
                    "value": "target_label_49",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_405": {
                "variable": {
                    "value": "target_label_50",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_label_0, target_label_1, target_label_2, target_label_3, target_label_4, target_label_5, target_label_6, target_label_7, target_label_8, target_label_9, target_label_10, target_label_11, target_label_12, target_label_13, target_label_14, target_label_15, target_label_16, target_label_17, target_label_18, target_label_19, target_label_20, target_label_21, target_label_22, target_label_23, target_label_24, target_label_25, target_label_26, target_label_27, target_label_28, target_label_29, target_label_30, target_label_31, target_label_32, target_label_33, target_label_34, target_label_35, target_label_36, target_label_37, target_label_38, target_label_39, target_label_40, target_label_41, target_label_42, target_label_43, target_label_44, target_label_45, target_label_46, target_label_47, target_label_48, target_label_49, target_label_50)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_415": {
                "variable": {
                    "value": "valid_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(if_all_zero(label_0), if_all_zero(label_1), if_all_zero(label_2), if_all_zero(label_3), if_all_zero(label_4), if_all_zero(label_5), if_all_zero(label_6), if_all_zero(label_7), if_all_zero(label_8), if_all_zero(label_9), if_all_zero(label_10), if_all_zero(label_11), if_all_zero(label_12), if_all_zero(label_13), if_all_zero(label_14), if_all_zero(label_15), if_all_zero(label_16), if_all_zero(label_17), if_all_zero(label_18), if_all_zero(label_19), if_all_zero(label_20), if_all_zero(label_21), if_all_zero(label_22), if_all_zero(label_23), if_all_zero(label_24), if_all_zero(label_25), if_all_zero(label_26), if_all_zero(label_27), if_all_zero(label_28), if_all_zero(label_29), if_all_zero(label_30), if_all_zero(label_31), if_all_zero(label_32), if_all_zero(label_33), if_all_zero(label_34), if_all_zero(label_35), if_all_zero(label_36), if_all_zero(label_37), if_all_zero(label_38), if_all_zero(label_39), if_all_zero(label_40), if_all_zero(label_41), if_all_zero(label_42), if_all_zero(label_43), if_all_zero(label_44), if_all_zero(label_45), if_all_zero(label_46), if_all_zero(label_47), if_all_zero(label_48), if_all_zero(label_49), if_all_zero(label_50))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_430": {
                "variable": {
                    "value": "feature_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_0.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_0, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_431": {
                "variable": {
                    "value": "feature_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_1.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_1, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_432": {
                "variable": {
                    "value": "feature_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_2.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_2, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_433": {
                "variable": {
                    "value": "feature_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_3.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_3, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_434": {
                "variable": {
                    "value": "feature_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_4.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_4, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_435": {
                "variable": {
                    "value": "feature_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_5.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_5, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_436": {
                "variable": {
                    "value": "feature_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_6.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_6, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_437": {
                "variable": {
                    "value": "feature_7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_7.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_7, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_438": {
                "variable": {
                    "value": "feature_8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_8.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_8, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_439": {
                "variable": {
                    "value": "feature_9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_9.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_9, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_440": {
                "variable": {
                    "value": "feature_10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_10.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_10, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_441": {
                "variable": {
                    "value": "feature_11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_11.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_11, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_442": {
                "variable": {
                    "value": "feature_12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_12.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_12, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_443": {
                "variable": {
                    "value": "feature_13",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_13.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_13, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_444": {
                "variable": {
                    "value": "feature_14",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_14",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_14.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_14, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_445": {
                "variable": {
                    "value": "feature_15",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_15",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_15.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_15, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_446": {
                "variable": {
                    "value": "feature_16",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_16.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_16, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_447": {
                "variable": {
                    "value": "feature_17",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_17",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_17.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_17, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_448": {
                "variable": {
                    "value": "feature_18",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_18",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_18.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_18, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_449": {
                "variable": {
                    "value": "feature_19",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_19",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_19.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_19, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_450": {
                "variable": {
                    "value": "feature_20",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_20",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_20.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_20, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_451": {
                "variable": {
                    "value": "feature_21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_21.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_21, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_452": {
                "variable": {
                    "value": "feature_22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_22.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_22, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_453": {
                "variable": {
                    "value": "feature_23",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_23",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_23.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_23, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_454": {
                "variable": {
                    "value": "feature_24",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_24",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_24.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_24, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_455": {
                "variable": {
                    "value": "feature_25",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_25",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_25.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_25, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_456": {
                "variable": {
                    "value": "feature_26",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_26",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_26.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_26, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_457": {
                "variable": {
                    "value": "feature_27",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_27",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_27.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_27, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_458": {
                "variable": {
                    "value": "feature_28",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_28",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_28.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_28, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_459": {
                "variable": {
                    "value": "feature_29",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_29",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_29.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_29, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_460": {
                "variable": {
                    "value": "feature_30",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_30",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_30.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_30, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_461": {
                "variable": {
                    "value": "feature_31",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_31",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_31.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_31, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_462": {
                "variable": {
                    "value": "feature_32",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_32.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_32, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_463": {
                "variable": {
                    "value": "feature_33",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_33",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_33.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_33, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_464": {
                "variable": {
                    "value": "feature_34",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_34",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_34.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_34, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_465": {
                "variable": {
                    "value": "feature_35",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_35",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_35.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_35, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_466": {
                "variable": {
                    "value": "feature_36",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_36",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_36.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_36, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_467": {
                "variable": {
                    "value": "feature_37",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_37",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_37.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_37, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_468": {
                "variable": {
                    "value": "feature_38",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_38",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_38.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_38, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_469": {
                "variable": {
                    "value": "feature_39",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_39",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_39.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_39, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_470": {
                "variable": {
                    "value": "feature_40",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_40",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_40.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_40, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_471": {
                "variable": {
                    "value": "feature_41",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_41",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_41.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_41, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_472": {
                "variable": {
                    "value": "feature_42",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_42",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_42.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_42, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_473": {
                "variable": {
                    "value": "feature_43",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_43",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_43.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_43, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_474": {
                "variable": {
                    "value": "feature_44",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_44",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_44.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_44, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_475": {
                "variable": {
                    "value": "feature_45",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_45",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_45.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_45, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_476": {
                "variable": {
                    "value": "feature_46",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_46",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_46.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_46, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_477": {
                "variable": {
                    "value": "feature_47",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_47",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_47.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_47, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_478": {
                "variable": {
                    "value": "feature_48",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_48",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_48.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_48, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_479": {
                "variable": {
                    "value": "feature_49",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_49",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_49.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_49, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_480": {
                "variable": {
                    "value": "feature_50",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_50",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_50.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_50, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_481": {
                "variable": {
                    "value": "feature_51",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_51",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_51.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_51, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_484": {
                "variable": {
                    "value": "result_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_0(feature_0.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_486": {
                "variable": {
                    "value": "result_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_1(feature_1.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_487": {
                "variable": {
                    "value": "result_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_2(feature_2.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_488": {
                "variable": {
                    "value": "result_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_3(feature_3.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_489": {
                "variable": {
                    "value": "result_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_4(feature_4.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_490": {
                "variable": {
                    "value": "result_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_5(feature_5.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_491": {
                "variable": {
                    "value": "result_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_6(feature_6.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_492": {
                "variable": {
                    "value": "result_7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_7(feature_7.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_493": {
                "variable": {
                    "value": "result_8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_8(feature_8.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_494": {
                "variable": {
                    "value": "result_9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_9(feature_9.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_495": {
                "variable": {
                    "value": "result_10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_10(feature_10.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_496": {
                "variable": {
                    "value": "result_11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_11(feature_11.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_497": {
                "variable": {
                    "value": "result_12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_12(feature_12.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_498": {
                "variable": {
                    "value": "result_13",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_13(feature_13.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_499": {
                "variable": {
                    "value": "result_14",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_14(feature_14.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_500": {
                "variable": {
                    "value": "result_15",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_15(feature_15.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_501": {
                "variable": {
                    "value": "result_16",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_16(feature_16.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_502": {
                "variable": {
                    "value": "result_17",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_17(feature_17.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_503": {
                "variable": {
                    "value": "result_18",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_18(feature_18.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_504": {
                "variable": {
                    "value": "result_19",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_19(feature_19.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_505": {
                "variable": {
                    "value": "result_20",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_20(feature_20.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_506": {
                "variable": {
                    "value": "result_21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_21(feature_21.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_507": {
                "variable": {
                    "value": "result_22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_22(feature_22.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_508": {
                "variable": {
                    "value": "result_23",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_23(feature_23.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_509": {
                "variable": {
                    "value": "result_24",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_24(feature_24.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_510": {
                "variable": {
                    "value": "result_25",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_25(feature_25.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_511": {
                "variable": {
                    "value": "result_26",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_26(feature_26.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_512": {
                "variable": {
                    "value": "result_27",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_27(feature_27.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_513": {
                "variable": {
                    "value": "result_28",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_28(feature_28.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_514": {
                "variable": {
                    "value": "result_29",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_29(feature_29.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_515": {
                "variable": {
                    "value": "result_30",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_30(feature_30.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_516": {
                "variable": {
                    "value": "result_31",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_31(feature_31.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_517": {
                "variable": {
                    "value": "result_32",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_32(feature_32.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_518": {
                "variable": {
                    "value": "result_33",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_33(feature_33.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_519": {
                "variable": {
                    "value": "result_34",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_34(feature_34.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_520": {
                "variable": {
                    "value": "result_35",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_35(feature_35.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_521": {
                "variable": {
                    "value": "result_36",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_36(feature_36.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_522": {
                "variable": {
                    "value": "result_37",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_37(feature_37.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_523": {
                "variable": {
                    "value": "result_38",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_38(feature_38.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_524": {
                "variable": {
                    "value": "result_39",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_39(feature_39.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_525": {
                "variable": {
                    "value": "result_40",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_40(feature_40.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_526": {
                "variable": {
                    "value": "result_41",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_41(feature_41.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_527": {
                "variable": {
                    "value": "result_42",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_42(feature_42.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_528": {
                "variable": {
                    "value": "result_43",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_43(feature_43.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_529": {
                "variable": {
                    "value": "result_44",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_44(feature_44.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_530": {
                "variable": {
                    "value": "result_45",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_45(feature_45.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_531": {
                "variable": {
                    "value": "result_46",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_46(feature_46.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_532": {
                "variable": {
                    "value": "result_47",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_47(feature_47.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_533": {
                "variable": {
                    "value": "result_48",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_48(feature_48.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_534": {
                "variable": {
                    "value": "result_49",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_49(feature_49.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_535": {
                "variable": {
                    "value": "result_50",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_50(feature_50.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_536": {
                "variable": {
                    "value": "result_51",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_51(feature_51.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_544": {
                "variable": {
                    "value": "combine_local",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result_0, result_1, result_2, result_3, result_4, result_5, result_6, result_7, result_8, result_9, result_10, result_11, result_12, result_13, result_14, result_15, result_16, result_17, result_18, result_19, result_20, result_21, result_22, result_23, result_24, result_25, result_26, result_27, result_28, result_29, result_30, result_31, result_32, result_33, result_34, result_35, result_36, result_37, result_38, result_39, result_40, result_41, result_42, result_43, result_44, result_45, result_46, result_47, result_48, result_49, result_50, result_51)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_549": {
                "variable": {
                    "value": "result_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv9(combine_local)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_556": {
                "variable": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_norm_attention(self.deconv3_attention(x_encode))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_558": {
                "variable": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_norm_attention(self.deconv4_attention(x_attention))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_562": {
                "variable": {
                    "value": "softmax_",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_599": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_600": {
                "variable": {
                    "value": "self.conv1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_601": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_602": {
                "variable": {
                    "value": "self.conv2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_610": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.padding, self.padding, self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_611": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_norm(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_612": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding, self.padding, self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_665": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_667": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_725": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_748": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_789": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_norm(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_norm(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_216": {
                "variable": {
                    "value": "x_encode",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_norm(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_217": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_norm(self.conv4(x_encode))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_218": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_norm(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_219": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_643": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_647": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_697": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "tensor[i:i + 1, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_204": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_245": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_691": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_724": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_753": {
                "padding": {
                    "value": "opt.resnet_initial_kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_785": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_786": {
                "in_channels": {
                    "value": "nc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.output_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_787": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_754": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.label_nc + (1 if opt.contain_dontcare_label else 0) + (0 if opt.no_instance else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.resnet_initial_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_762": {
                "in_channels": {
                    "value": "opt.ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_778": {
                "in_channels": {
                    "value": "nc_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/ade20k/models/pix2pix_model.py": {
        "torch": {
            "Adam_112": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_408": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_441": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_442": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_30": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_31": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_32": {
                "variable": {
                    "value": "self.criterionCE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_224": {
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/data/__init__.py": {
        "torch": {}
    },
    "semantic_image_synthesis/data/base_dataset.py": {
        "torch": {}
    },
    "semantic_image_synthesis/data/image_folder.py": {
        "torch": {}
    },
    "semantic_image_synthesis/models/__init__.py": {
        "torch": {}
    },
    "semantic_image_synthesis/models/networks/__init__.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/models/networks/architecture.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fmiddle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(fin, fout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_36": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_37": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1
                            ],
                            "Call"
                        ],
                        [
                            [
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "Call"
                        ],
                        [
                            [
                                7,
                                8,
                                9,
                                10,
                                11
                            ],
                            "Call"
                        ],
                        [
                            [
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20
                            ],
                            "Call"
                        ],
                        [
                            [
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29
                            ],
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_39": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_79": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_82": {
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "semantic_image_synthesis/models/networks/base_network.py": {
        "torch": {}
    },
    "semantic_image_synthesis/models/networks/discriminator.py": {
        "torch": {
            "avg_pool2d_47": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(input)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_D_input_nc(opt)",
                            "Call"
                        ],
                        [
                            "opt.label_nc + opt.output_nc",
                            "BinOp"
                        ],
                        [
                            "input_nc + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_85": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*sequence[n]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "nf_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ndf",
                            "Attribute"
                        ],
                        [
                            "min(nf * 2, 512)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if n == opt.n_layers_D - 1 else 2",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "semantic_image_synthesis/models/networks/encoder.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ndf * 8 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "variable": {
                    "value": "self.actvn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(256, 256), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer3(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer4(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer5(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.layer6(self.actvn(x))",
                            "Call"
                        ],
                        [
                            "self.actvn(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "ndf * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil((kw - 1.0) / 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "semantic_image_synthesis/models/networks/generator.py": {
        "torch": {
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_64": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "35 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_68": {
                "variable": {
                    "value": "self.conv1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_70": {
                "variable": {
                    "value": "self.conv2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_72": {
                "variable": {
                    "value": "self.conv3_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_74": {
                "variable": {
                    "value": "self.conv4_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_76": {
                "variable": {
                    "value": "self.conv5_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_97": {
                "variable": {
                    "value": "self.deconv3_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_98": {
                "variable": {
                    "value": "self.deconv3_norm_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_99": {
                "variable": {
                    "value": "self.deconv4_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_100": {
                "variable": {
                    "value": "self.deconv4_norm_local",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.deconv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 * 35",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.deconv5_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.deconv5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.deconv5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.deconv5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.deconv5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.deconv5_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.deconv5_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.deconv5_7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.deconv5_8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.deconv5_9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.deconv5_10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.deconv5_11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.deconv5_12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.deconv5_13",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.deconv5_14",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.deconv5_15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.deconv5_16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.deconv5_17",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.deconv5_18",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "self.deconv5_19",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.deconv5_20",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.deconv5_21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.deconv5_22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.deconv5_23",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.deconv5_24",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.deconv5_25",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.deconv5_26",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.deconv5_27",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.deconv5_28",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.deconv5_29",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.deconv5_30",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.deconv5_31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.deconv5_32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.deconv5_33",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "variable": {
                    "value": "self.deconv5_34",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_140": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "35",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_144": {
                "variable": {
                    "value": "self.deconv3_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_145": {
                "variable": {
                    "value": "self.deconv3_norm_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_146": {
                "variable": {
                    "value": "self.deconv4_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_147": {
                "variable": {
                    "value": "self.deconv4_norm_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.deconv5_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_215": {
                "variable": {
                    "value": "result_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_235": {
                "variable": {
                    "value": "x_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_norm_local(self.deconv3_local(middle_x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_236": {
                "variable": {
                    "value": "x_feature_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_norm_local(self.deconv4_local(x_local))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "feature_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_0, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_289": {
                "variable": {
                    "value": "feature_combine_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((feature_0, feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, feature_16, feature_17, feature_18, feature_19, feature_20, feature_21, feature_22, feature_23, feature_24, feature_25, feature_26, feature_27, feature_28, feature_29, feature_30, feature_31, feature_32, feature_33, feature_34), 0)",
                            "Call"
                        ],
                        [
                            "self.avgpool(feature_combine)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "variable": {
                    "value": "valid_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[if_all_zero(label_0), if_all_zero(label_1), if_all_zero(label_2), if_all_zero(label_3), if_all_zero(label_4), if_all_zero(label_5), if_all_zero(label_6), if_all_zero(label_7), if_all_zero(label_8), if_all_zero(label_9), if_all_zero(label_10), if_all_zero(label_11), if_all_zero(label_12), if_all_zero(label_13), if_all_zero(label_14), if_all_zero(label_15), if_all_zero(label_16), if_all_zero(label_17), if_all_zero(label_18), if_all_zero(label_19), if_all_zero(label_20), if_all_zero(label_21), if_all_zero(label_22), if_all_zero(label_23), if_all_zero(label_24), if_all_zero(label_25), if_all_zero(label_26), if_all_zero(label_27), if_all_zero(label_28), if_all_zero(label_29), if_all_zero(label_30), if_all_zero(label_31), if_all_zero(label_32), if_all_zero(label_33), if_all_zero(label_34)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_309": {
                "variable": {
                    "value": "feature_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_0.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_0, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_310": {
                "variable": {
                    "value": "feature_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_1.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_1, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_311": {
                "variable": {
                    "value": "feature_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_2.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_2, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_312": {
                "variable": {
                    "value": "feature_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_3.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_3, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_313": {
                "variable": {
                    "value": "feature_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_4.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_4, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_314": {
                "variable": {
                    "value": "feature_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_5.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_5, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_315": {
                "variable": {
                    "value": "feature_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_6.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_6, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_316": {
                "variable": {
                    "value": "feature_7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_7.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_7, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_317": {
                "variable": {
                    "value": "feature_8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_8.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_8, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_318": {
                "variable": {
                    "value": "feature_9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_9.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_9, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_319": {
                "variable": {
                    "value": "feature_10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_10.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_10, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_320": {
                "variable": {
                    "value": "feature_11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_11.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_11, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_321": {
                "variable": {
                    "value": "feature_12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_12.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_12, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_322": {
                "variable": {
                    "value": "feature_13",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_13",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_13.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_13, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_323": {
                "variable": {
                    "value": "feature_14",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_14",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_14.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_14, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_324": {
                "variable": {
                    "value": "feature_15",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_15",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_15.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_15, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_325": {
                "variable": {
                    "value": "feature_16",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_16.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_16, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_326": {
                "variable": {
                    "value": "feature_17",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_17",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_17.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_17, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_327": {
                "variable": {
                    "value": "feature_18",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_18",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_18.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_18, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_328": {
                "variable": {
                    "value": "feature_19",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_19",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_19.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_19, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_329": {
                "variable": {
                    "value": "feature_20",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_20",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_20.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_20, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_330": {
                "variable": {
                    "value": "feature_21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_21.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_21, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_331": {
                "variable": {
                    "value": "feature_22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_22.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_22, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_332": {
                "variable": {
                    "value": "feature_23",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_23",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_23.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_23, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_333": {
                "variable": {
                    "value": "feature_24",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_24",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_24.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_24, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_334": {
                "variable": {
                    "value": "feature_25",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_25",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_25.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_25, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_335": {
                "variable": {
                    "value": "feature_26",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_26",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_26.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_26, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_336": {
                "variable": {
                    "value": "feature_27",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_27",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_27.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_27, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_337": {
                "variable": {
                    "value": "feature_28",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_28",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_28.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_28, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_338": {
                "variable": {
                    "value": "feature_29",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_29",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_29.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_29, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_339": {
                "variable": {
                    "value": "feature_30",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_30",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_30.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_30, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_340": {
                "variable": {
                    "value": "feature_31",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_31",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_31.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_31, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_341": {
                "variable": {
                    "value": "feature_32",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_32.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_32, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_342": {
                "variable": {
                    "value": "feature_33",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_33",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_33.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_33, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_343": {
                "variable": {
                    "value": "feature_34",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_34",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_feature_local.cuda() * label_64_34.cuda()",
                            "BinOp"
                        ],
                        [
                            "F.pad(feature_34, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_346": {
                "variable": {
                    "value": "result_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_0(feature_0.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_348": {
                "variable": {
                    "value": "result_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_1(feature_1.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_349": {
                "variable": {
                    "value": "result_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_2(feature_2.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_350": {
                "variable": {
                    "value": "result_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_3(feature_3.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_351": {
                "variable": {
                    "value": "result_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_4(feature_4.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_352": {
                "variable": {
                    "value": "result_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_5(feature_5.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_353": {
                "variable": {
                    "value": "result_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_6(feature_6.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_354": {
                "variable": {
                    "value": "result_7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_7(feature_7.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_355": {
                "variable": {
                    "value": "result_8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_8(feature_8.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_356": {
                "variable": {
                    "value": "result_9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_9(feature_9.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_357": {
                "variable": {
                    "value": "result_10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_10(feature_10.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_358": {
                "variable": {
                    "value": "result_11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_11(feature_11.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_359": {
                "variable": {
                    "value": "result_12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_12(feature_12.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_360": {
                "variable": {
                    "value": "result_13",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_13(feature_13.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_361": {
                "variable": {
                    "value": "result_14",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_14(feature_14.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_362": {
                "variable": {
                    "value": "result_15",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_15(feature_15.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_363": {
                "variable": {
                    "value": "result_16",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_16(feature_16.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_364": {
                "variable": {
                    "value": "result_17",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_17(feature_17.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_365": {
                "variable": {
                    "value": "result_18",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_18(feature_18.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_366": {
                "variable": {
                    "value": "result_19",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_19(feature_19.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_367": {
                "variable": {
                    "value": "result_20",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_20(feature_20.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_368": {
                "variable": {
                    "value": "result_21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_21(feature_21.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_369": {
                "variable": {
                    "value": "result_22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_22(feature_22.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_370": {
                "variable": {
                    "value": "result_23",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_23(feature_23.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_371": {
                "variable": {
                    "value": "result_24",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_24(feature_24.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_372": {
                "variable": {
                    "value": "result_25",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_25(feature_25.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_373": {
                "variable": {
                    "value": "result_26",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_26(feature_26.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_374": {
                "variable": {
                    "value": "result_27",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_27(feature_27.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_375": {
                "variable": {
                    "value": "result_28",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_28(feature_28.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_376": {
                "variable": {
                    "value": "result_29",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_29(feature_29.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_377": {
                "variable": {
                    "value": "result_30",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_30(feature_30.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_378": {
                "variable": {
                    "value": "result_31",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_31(feature_31.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_379": {
                "variable": {
                    "value": "result_32",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_32(feature_32.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_380": {
                "variable": {
                    "value": "result_33",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_33(feature_33.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_381": {
                "variable": {
                    "value": "result_34",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv5_34(feature_34.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "combine_local",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result_0, result_1, result_2, result_3, result_4, result_5, result_6, result_7, result_8, result_9, result_10, result_11, result_12, result_13, result_14, result_15, result_16, result_17, result_18, result_19, result_20, result_21, result_22, result_23, result_24, result_25, result_26, result_27, result_28, result_29, result_30, result_31, result_32, result_33, result_34)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_393": {
                "variable": {
                    "value": "result_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv9(combine_local)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_400": {
                "variable": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3_norm_attention(self.deconv3_attention(x_encode))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_402": {
                "variable": {
                    "value": "x_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4_norm_attention(self.deconv4_attention(x_attention))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_406": {
                "variable": {
                    "value": "softmax_",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_439": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_440": {
                "variable": {
                    "value": "self.conv1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_441": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_442": {
                "variable": {
                    "value": "self.conv2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_450": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.padding, self.padding, self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_451": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_norm(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_452": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding, self.padding, self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_505": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ],
                        [
                            "nf",
                            "variable"
                        ],
                        [
                            "nf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_507": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_565": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_588": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_629": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(3, 3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_norm(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_norm(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "x_encode",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_norm(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_186": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4_norm(self.conv4(x_encode))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_norm(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_188": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_483": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * self.sw * self.sh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_487": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.opt.semantic_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_537": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.sh, self.sw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_173": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_214": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_531": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_564": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(seg, (3, 3, 3, 3), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_norm(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4_norm(self.conv4(x_encode)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv5_norm(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks1(x_encode)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks2(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks3(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks4(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks5(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks6(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks7(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_blocks8(x)",
                            "Call"
                        ],
                        [
                            "F.pad(input, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_norm(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (self.padding, self.padding, self.padding, self.padding), 'reflect')",
                            "Call"
                        ],
                        [
                            "self.conv2_norm(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg, size=(self.sh, self.sw))",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.fc(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 16 * self.opt.ngf, self.sh, self.sw)",
                            "Call"
                        ],
                        [
                            "self.head_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.G_middle_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_0(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_1(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_2(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_3(x, seg)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.up_4(x, seg)",
                            "Call"
                        ],
                        [
                            "self.conv_img(F.leaky_relu(x, 0.2))",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_593": {
                "padding": {
                    "value": "opt.resnet_initial_kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_625": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_626": {
                "in_channels": {
                    "value": "nc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.output_nc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_627": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_594": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.label_nc + (1 if opt.contain_dontcare_label else 0) + (0 if opt.no_instance else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "opt.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.resnet_initial_kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_602": {
                "in_channels": {
                    "value": "opt.ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_618": {
                "in_channels": {
                    "value": "nc_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(opt.ngf * mult / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/models/networks/loss.py": {
        "torch": {
            "L1Loss_106": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_94": {
                "variable": {
                    "value": "new_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_tensor.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_64": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_68": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_71": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-input - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_72": {
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ],
                        [
                            "torch.min(-input - 1, self.get_zero_tensor(input))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "semantic_image_synthesis/models/networks/normalization.py": {
        "torch": {
            "Sequential_89": {
                "variable": {
                    "value": "self.mlp_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(label_nc, nhidden, kernel_size=ks, padding=pw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.mlp_gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.mlp_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_102": {
                "variable": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(segmap, size=x.size()[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "spectral_norm_27": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spectral_norm(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_76": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "label_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(parsed.group(2))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm2d_44": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "get_out_channel(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.param_free_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/models/pix2pix_model.py": {
        "torch": {
            "Adam_100": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netG.parameters())",
                            "Call"
                        ],
                        [
                            "G_params + list(self.netE.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "G_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.netD.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "D_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "fake_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, fake_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "real_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_semantics, real_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "fake_and_real",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_concat, real_concat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_387": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_388": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_30": {
                "variable": {
                    "value": "self.criterionFeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_31": {
                "variable": {
                    "value": "self.criterionL1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_32": {
                "variable": {
                    "value": "self.criterionCE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "input_semantics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_semantics, instance_edge_map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/options/base_options.py": {
        "torch": {
            "set_device_175": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/test_ade.py": {
        "torch": {
            "max_67": {
                "input": {
                    "value": "attention_local[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_66": {
                "input": {
                    "value": "attention_local[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/test_city.py": {
        "torch": {
            "max_54": {
                "input": {
                    "value": "attention_local[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_53": {
                "input": {
                    "value": "attention_local[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "semantic_image_synthesis/util/util.py": {
        "torch": {
            "load_207": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_198": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.checkpoints_dir, opt.name, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}